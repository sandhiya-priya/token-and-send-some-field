using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using AppBlock;
using FormatFunctions;
using System.IO;
using System.Data;
using System.Configuration;
using System.Text;
using System.Net;
using System.Security.Cryptography.X509Certificates;
using System.Security.Cryptography;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ABCIPO.BusinessData;
using System.Web.Script.Serialization;
using System.Web.Services;
using System.Data.SqlClient;

namespace ABCIPO
{
    public partial class ipo : System.Web.UI.Page
    {
        public string sqlcon = ConfigurationManager.ConnectionStrings["IPOOnline"].ToString();
        public string clcode = "", Depository = "", DPId = "", Applicantname = "", panno = "", code = "", BSECode = "", Category = "", strIssueType = "", ipo_Tick = "", Price = "", UserName = "", validteupid = "", nseapp = "";
        protected void Page_Load(object sender, EventArgs e)
        {


            //clcode = Session["ClientCode"] == null ? string.Empty : Session["ClientCode"].ToString().Trim();
            //DPId = Session["DPClientId"] == null ? string.Empty : Session["DPClientId"].ToString().Trim();
            //Applicantname = Session["ClientFname"] == null ? string.Empty : Session["ClientFname"].ToString().Trim();
            //panno = Session["Pan"] == null ? string.Empty : Session["Pan"].ToString().Trim();
            clcode = Session["ClientCode"] == null ? string.Empty : Session["ClientCode"].ToString().Trim();
            DPId = Session["DPClientId"] == null ? string.Empty : Session["DPClientId"].ToString().Trim();
            Applicantname = Session["ClientFname"] == null ? string.Empty : Session["ClientFname"].ToString().Trim();
            panno = Session["Pan"] == null ? string.Empty : Session["Pan"].ToString().Trim();
            Depository = Session["Depository"] == null ? string.Empty : Session["Depository"].ToString().Trim();
            clname.InnerText = Applicantname;
            clpan.InnerText = panno;
            cldpid.InnerText = DPId;
           // clupi.InnerText = txtupiid.Value;
            string qs = Request.QueryString["id"] != null ? Request.QueryString["id"] : "";
            if (clcode == string.Empty)
                Response.Redirect("/loginnew.aspx");
            if (!IsPostBack)
            {
                UserName = Session["ClientFnamelbl"].ToString();
                // category_dropdown();
                fillofflinetrigger();
                fillopenbid();
                fillupcomingbid();
                fillrecentlyclosedbid();
                fillupiid();

                hdndvcount.Value = "1";
            }
            if (qs == "recentlyclosed")
            {
                //if (qs == "recentlyclosed")
                //{
                ScriptManager.RegisterStartupScript(this.Page, typeof(string), "hide", " $(\"#tetsta\").click();", true);
                //ScriptManager.RegisterStartupScript(this.Page, typeof(string), "hide", "togglecheck("+qs+");", true);

                //}
            }
            else
            {
                if (qs == "Upcoming")
                {
                    ScriptManager.RegisterStartupScript(this.Page, typeof(string), "hide", " $(\"#upcomeid\").click();", true);
                }
            }



        }

        public void fillupiid()
        {
            SqlParameter[] param = { new SqlParameter("@clcode", clcode) };
            //string sql = "select upiid from  ucc_master  where ucc='" + clcode + "'";
            string sql = "select upiid from  ucc_master  where ucc=@clcode";
            //string sql = "select distinct ipo_symbse,ipo_issueto,ipo_issuefrm,ipo_prfrm,ipo_prto from ipomaster where IPO_IssueTo >= (select convert(varchar(10),getdate(),120)) and IPO_Issuefrm <= (select convert(varchar(10),getdate(),120)) ";

            DataSet ds = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, sql, param);
            // DataSet ds = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, sql);

            if (ds != null && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0]["upiid"].ToString().Trim() != "")
                {
                    txtupiid.Value = ds.Tables[0].Rows[0]["upiid"].ToString().Trim();
                   
                }
                //else
                //{
                //    validteupid = txtupiid.Value;
                //}

            }
            
        }

        public void fillopenbid()
        {
            //string sql = "select distinct ipo_symbse,cast(ipo_cat as varchar(50)) as ipo_cat,ipo_issueto,ipo_issuefrm,ipo_prfrm,ipo_prto,ipo_minord,filename,IPO_MTimFrm,IPO_MTimTo,ipo_discount_type,IPO_Discount,ipo_tick,uploadtype,applystatus from ipomaster where IPO_IssueTo >= (select convert(varchar(10),getdate(),120)) and IPO_Issuefrm <= (select convert(varchar(10),getdate(),120)) and cast(ipo_cat as varchar(50)) in ('IND','SHA','POL')";
            //string sql = "select a.*,b.category from (select distinct ipo_symbse,cast(ipo_cat as varchar(50)) as ipo_cat,ipo_issueto,ipo_issuefrm,ipo_prfrm,ipo_prto,ipo_minord,filename,IPO_MTimFrm,IPO_MTimTo,ipo_discount_type,IPO_Discount,ipo_tick,uploadtype,applystatus from ipomaster where IPO_IssueTo >= (select convert(varchar(10),getdate(),120)) and IPO_Issuefrm <= (select convert(varchar(10),getdate(),120)) and cast(ipo_cat as varchar(50)) in ('IND','SHA','POL','EMP')) a inner join IPOCategoryMaster b on a.ipo_cat=b.CStatus";
            //string sql = "select distinct ipo_symbse,ipo_issueto,ipo_issuefrm,ipo_prfrm,ipo_prto from ipomaster where IPO_IssueTo >= (select convert(varchar(10),getdate(),120)) and IPO_Issuefrm <= (select convert(varchar(10),getdate(),120)) ";



            //string sql = "select distinct * from(select T1.ExTypeNew,isnull(case when T1.ExTypeNew = 'BSE' then T2.ipo_name else T3.ipo_name end, t1.IPO_SymBse) Ipo_Name,";
            //sql = "case when Sub_type is null then isnull(T2.ipo_name,T2.IPO_SymBse) else ISNULL(t3.ipo_name,T3.IPO_SymBse)+'<br/>'+Sub_type end Sub_type,";
            //sql += "case when T1.ExTypeNew = 'BSE' then T2.ipo_symbse else T3.ipo_symbse end ipo_symbse,";
            //sql += "case when T1.ExTypeNew = 'BSE' then T2.IPO_IssueFrm else T3.IPO_IssueFrm end IPO_IssueFrm,";
            //sql += "case when T1.ExTypeNew = 'BSE' then T2.IPO_IssueTo else T3.IPO_IssueTo end IPO_IssueTo,";
            //sql += "case when T1.ExTypeNew = 'BSE' then T2.IPO_PrTo else T3.IPO_PrTo end IPO_PrTo,";
            //sql += "case when T1.ExTypeNew = 'BSE' then T2.IPO_PrFrm else T3.IPO_PrFrm end IPO_PrFrm,";
            //sql += "case when T1.ExTypeNew = 'BSE' then T2.ipo_minord else T3.ipo_minord end ipo_minord,";
            //sql += "case when T1.ExTypeNew = 'BSE' then T2.filename else T3.filename end filename,";
            //sql += "case when T1.ExTypeNew = 'BSE' then T2.IPO_MTimFrm else T3.IPO_MTimFrm end IPO_MTimFrm,";
            //sql += "case when T1.ExTypeNew = 'BSE' then T2.IPO_MTimTo else T3.IPO_MTimTo end IPO_MTimTo,";
            //sql += "case when T1.ExTypeNew = 'BSE' then T2.ipo_tick else T3.ipo_tick end ipo_tick,";
            //sql += "case when T1.ExTypeNew = 'BSE' then T2.uploadtype else T3.uploadtype end uploadtype,";
            //sql += "case when T1.ExTypeNew = 'BSE' then T2.applystatus else T3.applystatus end applystatus from(";
            //sql += "select IPO_SymBse, case when COUNT(IPO_SymBse) > 1 then 'BSE' else MAX(ExType) end ExTypeNew  from(";
            //sql += "select distinct IPO_SymBse, 'BSE' ExType, ipo_cat from IPOmaster where ipo_cat  in ('IND', 'SHA', 'POL', 'EMP')";
            //sql += "union select distinct IPO_SymBse, 'NSE' ExType, ipo_cat from NSE_ipomaster) cm group by IPO_SymBse, ipo_cat ) T1";
            //sql += " left join(select IPO_SymBse, ipo_name, max(IPO_IssueFrm) IPO_IssueFrm, max(IPO_IssueTo) IPO_IssueTo, max(IPO_PrTo)IPO_PrTo, MAX(IPO_PrFrm) IPO_PrFrm, max(ipo_minord)ipo_minord, max(filename)filename, max(IPO_MTimFrm)IPO_MTimFrm, max(IPO_MTimTo)IPO_MTimTo, max(ipo_tick)ipo_tick, max(uploadtype)uploadtype, max(applystatus)applystatus  from ipomaster where ipo_cat  in ('IND', 'SHA', 'POL', 'EMP') group by IPO_SymBse,ipo_name) T2 on T2.IPO_SymBse = T1.IPO_SymBse";
            //sql += " left join (select max(Sub_type)Sub_type,IPO_SymBse, ipo_name, max(IPO_IssueFrm)IPO_IssueFrm, max(IPO_IssueTo) IPO_IssueTo, max(IPO_PrTo)IPO_PrTo, MAX(IPO_PrFrm) IPO_PrFrm, max(ipo_minord)ipo_minord, max(filename)filename, max(IPO_MTimFrm)IPO_MTimFrm, max(IPO_MTimTo)IPO_MTimTo, max(ipo_tick)ipo_tick, max(uploadtype)uploadtype, max(applystatus)applystatus from NSE_IPOMASTER group by IPO_SymBse, ipo_name) T3 on T3.IPO_SymBse = T1.IPO_SymBse) final ";
            //sql += " where IPO_IssueTo >= convert(varchar(10), getdate(), 120) and IPO_Issuefrm <= convert(varchar(10), getdate(), 120)";
            string sql = "select distinct * from(select T1.ExTypeNew,isnull(case when T1.ExTypeNew = 'BSE' then T2.ipo_name else T3.ipo_name end, t1.IPO_SymBse) Ipo_Name,";
            //sql += "case when Sub_type is null then isnull(T2.ipo_name,T2.IPO_SymBse) else ISNULL(t3.ipo_name,T3.IPO_SymBse)+'<br/>'+Sub_type end Sub_type,";
            sql += "   case when T1.ExTypeNew = 'BSE' then T2.SUBTYPE else T3.SUBTYPE end SUBTYPE,";
            sql += "case when T1.ExTypeNew = 'BSE' then T2.ipo_symbse else T3.ipo_symbse end ipo_symbse,";
            sql += "case when T1.ExTypeNew = 'BSE' then T2.IPO_IssueFrm else T3.IPO_IssueFrm end IPO_IssueFrm,";
            sql += "case when T1.ExTypeNew = 'BSE' then T2.IPO_IssueTo else T3.IPO_IssueTo end IPO_IssueTo,";
            sql += "case when T1.ExTypeNew = 'BSE' then T2.IPO_PrTo else T3.IPO_PrTo end IPO_PrTo,";
            sql += "case when T1.ExTypeNew = 'BSE' then T2.IPO_PrFrm else T3.IPO_PrFrm end IPO_PrFrm,";

            sql += "case when T1.ExTypeNew = 'BSE' then T2.IPO_Discount else T3.IPO_Discount end IPO_Discount,";
            sql += "case when T1.ExTypeNew = 'BSE' then T2.ipo_discount_type else T3.ipo_discount_type end ipo_discount_type,";

            sql += "case when T1.ExTypeNew = 'BSE' then T2.ipo_minord else T3.ipo_minord end ipo_minord,";
            sql += "case when T1.ExTypeNew = 'BSE' then T2.filename else T3.filename end filename,";
            sql += "case when T1.ExTypeNew = 'BSE' then T2.IPO_MTimFrm else T3.IPO_MTimFrm end IPO_MTimFrm,";
            sql += "case when T1.ExTypeNew = 'BSE' then T2.IPO_MTimTo else T3.IPO_MTimTo end IPO_MTimTo,";
            sql += "case when T1.ExTypeNew = 'BSE' then T2.ipo_tick else T3.ipo_tick end ipo_tick,";
            sql += "case when T1.ExTypeNew = 'BSE' then T2.uploadtype else T3.uploadtype end uploadtype,";
            sql += "case when T1.ExTypeNew = 'BSE' then T2.applystatus else T3.applystatus end applystatus from(";
            sql += "select IPO_SymBse, case when COUNT(IPO_SymBse) > 1 then 'BSE' else MAX(ExType) end ExTypeNew  from(";
            sql += "select distinct IPO_SymBse,''SUBTYPE, 'BSE' ExType, ipo_cat from IPOmaster where ipo_cat  in ('IND', 'SHA', 'POL', 'EMP') union";
            sql += "  select distinct IPO_SymBse,'SME'SUBTYPE, 'NSE' ExType, ipo_cat from NSE_ipomaster) cm group by IPO_SymBse, ipo_cat ) T1 left join";
            sql += "(select ''SUBTYPE,IPO_SymBse, ipo_name, max(IPO_IssueFrm) IPO_IssueFrm, max(IPO_IssueTo) IPO_IssueTo, max(IPO_PrTo)IPO_PrTo, MAX(IPO_PrFrm) IPO_PrFrm,";
            sql += "max(ipo_minord)ipo_minord, max(filename)filename, max(IPO_MTimFrm)IPO_MTimFrm, max(IPO_MTimTo)IPO_MTimTo, max(ipo_tick)ipo_tick,";
            sql += "max(uploadtype)uploadtype, max(applystatus)applystatus,max(ipo_discount_type)ipo_discount_type,max(IPO_Discount)IPO_Discount  from ipomaster ";
            sql += "where ipo_cat  in ('IND', 'SHA', 'POL', 'EMP') group by IPO_SymBse,ipo_name) T2 on T2.IPO_SymBse = T1.IPO_SymBse left join";
            sql += "(select isnull(max(Sub_type),'') SUBTYPE,IPO_SymBse, ipo_name, max(IPO_IssueFrm)IPO_IssueFrm, max(IPO_IssueTo) IPO_IssueTo, max(IPO_PrTo)IPO_PrTo, MAX(IPO_PrFrm) IPO_PrFrm, ";
            sql += "max(ipo_minord)ipo_minord, max(filename)filename, max(IPO_MTimFrm)IPO_MTimFrm, max(IPO_MTimTo)IPO_MTimTo, max(ipo_tick)ipo_tick, ";
            sql += "max(uploadtype)uploadtype, max(applystatus)applystatus,max(ipo_discount_type)ipo_discount_type,max(IPO_Discount)IPO_Discount from NSE_IPOMASTER group by IPO_SymBse, ipo_name) T3 on T3.IPO_SymBse = T1.IPO_SymBse) final ";
            sql += "where IPO_IssueTo >= convert(varchar(10), getdate(), 120) and IPO_Issuefrm <= convert(varchar(10), getdate(), 120)";
            // string sql = "select distinct ipo_symbse,isnull(ipo_name,ipo_symbse) as iponame,ipo_issueto,ipo_issuefrm,ipo_prfrm,ipo_prto,ipo_minord,filename,IPO_MTimFrm,IPO_MTimTo,ipo_tick,uploadtype,applystatus from ipomaster where IPO_IssueTo >= (select convert(varchar(10),getdate(),120)) and IPO_Issuefrm <= (select convert(varchar(10),getdate(),120)) and cast(ipo_cat as varchar(50)) in ('IND','SHA','POL','EMP')";
            DataSet ds = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, sql);

            if (ds != null && ds.Tables[0].Rows.Count > 0)
            {
                rep_open.DataSource = ds;
                rep_open.DataBind();
                opencount.InnerHtml = "(" + ds.Tables[0].Rows.Count.ToString() + ")";
                nodatadivopen.Visible = false;
                //dtpgrlvwissue.Visible = ds.Tables[0].Rows.Count > 10 ? true : false;
            }
            else
            {
                rep_open.DataSource = null;
                rep_open.DataBind();
                opencount.InnerHtml = "(0)";
                nodatadivopen.Visible = true;

                //ScriptManager.RegisterStartupScript(this.Page, typeof(string), "hide", "HideTable();", true);

            }
        }

        public void fillupcomingbid()
        {
            try
            {
                //string upbid = "select distinct ipo_symbse,cast(ipo_cat as varchar(50)) as ipo_cat,ipo_issueto,ipo_issuefrm,ipo_prfrm,ipo_prto,filename from ipomaster where IPO_IssueTo >= (select convert(varchar(10),getdate(),120)) and IPO_Issuefrm <= (select convert(varchar(10),getdate(),120)) and cast(ipo_cat as varchar(50)) in ('IND','SHA')";
                //string qry = "select  distinct ipo_symbse,cast(ipo_cat as varchar(50)) as ipo_cat,ipo_issueto,ipo_issuefrm,ipo_prfrm,ipo_prto,ipo_minord,filename,IPO_MTimFrm,IPO_MTimTo,ipo_discount_type,IPO_Discount,ipo_tick from ipomaster where IPO_IssueTo >= (select convert(varchar(10),getdate(),120)) and IPO_Issuefrm <= (select convert(varchar(10),getdate(),120)) and cast(ipo_cat as varchar(50)) in ('IND','SHA')";
                //discountstring qry = "(select  distinct ipo_symbse,ipo_cat,ipo_issueto,ipo_issuefrm,ipo_prfrm,IPO_Code,ipo_prto,filename,ipo_minord,IPO_MTimFrm,IPO_MTimTo,ipo_discount_type,IPO_Discount,ipo_tick,uploadtype,applystatus  from ipomaster a inner join IPOCategoryMaster b on a.ipo_cat=b.CStatus where convert(varchar(10), IPO_Issuefrm, 120) > (select convert(varchar(10), getdate(), 120)) or IPO_Issuefrm is null order by IPO_Code  desc ) ";
                // string qry = "select a.*,b.category from (select  distinct ipo_symbse,ipo_cat,ipo_issueto,ipo_issuefrm,ipo_prfrm,IPO_Code,ipo_prto,filename,ipo_minord,IPO_MTimFrm,IPO_MTimTo,ipo_discount_type,IPO_Discount,ipo_tick,uploadtype,applystatus  from ipomaster where convert(varchar(10), IPO_Issuefrm, 120) > (select convert(varchar(10), getdate(), 120)) or IPO_Issuefrm is null  ) a inner join IPOCategoryMaster b on a.ipo_cat=b.CStatus order by IPO_Code  desc";
                string qry = "select distinct * from(select T1.ExTypeNew,isnull(case when T1.ExTypeNew = 'BSE' then T2.ipo_name else T3.ipo_name end, t1.IPO_SymBse) Ipo_Name,";
                qry += "   case when T1.ExTypeNew = 'BSE' then T2.SUBTYPE else T3.SUBTYPE end SUBTYPE,";
                qry += "case when T1.ExTypeNew = 'BSE' then T2.ipo_symbse else T3.ipo_symbse end ipo_symbse,";
                qry += "case when T1.ExTypeNew = 'BSE' then T2.IPO_IssueFrm else T3.IPO_IssueFrm end IPO_IssueFrm,";
                qry += "case when T1.ExTypeNew = 'BSE' then T2.IPO_IssueTo else T3.IPO_IssueTo end IPO_IssueTo,";
                qry += "case when T1.ExTypeNew = 'BSE' then T2.IPO_PrTo else T3.IPO_PrTo end IPO_PrTo,";
                qry += "case when T1.ExTypeNew = 'BSE' then T2.IPO_PrFrm else T3.IPO_PrFrm end IPO_PrFrm,";
                qry += "case when T1.ExTypeNew = 'BSE' then T2.ipo_minord else T3.ipo_minord end ipo_minord,";

                qry += "case when T1.ExTypeNew = 'BSE' then T2.IPO_Discount else T3.IPO_Discount end IPO_Discount,";
                qry += "case when T1.ExTypeNew = 'BSE' then T2.ipo_discount_type else T3.ipo_discount_type end ipo_discount_type,";

                //qry += "case when T1.ExTypeNew = 'BSE' then T2.IPO_Code else T3.IPO_Code end IPO_Code,";//doubt for IPO_Code
                qry += "case when T1.ExTypeNew = 'BSE' then T2.filename else T3.filename end filename,";
                qry += "case when T1.ExTypeNew = 'BSE' then T2.IPO_MTimFrm else T3.IPO_MTimFrm end IPO_MTimFrm,";
                qry += "case when T1.ExTypeNew = 'BSE' then T2.IPO_MTimTo else T3.IPO_MTimTo end IPO_MTimTo,";
                qry += "case when T1.ExTypeNew = 'BSE' then T2.ipo_tick else T3.ipo_tick end ipo_tick,";
                qry += "case when T1.ExTypeNew = 'BSE' then T2.uploadtype else T3.uploadtype end uploadtype,";
                qry += "case when T1.ExTypeNew = 'BSE' then T2.applystatus else T3.applystatus end applystatus from(";
                qry += "select IPO_SymBse, case when COUNT(IPO_SymBse) > 1 then 'BSE' else MAX(ExType) end ExTypeNew  from(";
                qry += "select distinct IPO_SymBse,''SUBTYPE, 'BSE' ExType, ipo_cat from IPOmaster where ipo_cat  in ('IND', 'SHA', 'POL', 'EMP')";
                qry += "union select distinct IPO_SymBse,'SME'SUBTYPE, 'NSE' ExType, ipo_cat from NSE_ipomaster) cm group by IPO_SymBse, ipo_cat ) T1";
                qry += " left join(select ''SUBTYPE,IPO_SymBse, ipo_name, max(IPO_IssueFrm) IPO_IssueFrm, max(IPO_IssueTo) IPO_IssueTo, max(IPO_PrTo)IPO_PrTo, MAX(IPO_PrFrm) IPO_PrFrm, max(ipo_minord)ipo_minord, max(filename)filename, max(IPO_MTimFrm)IPO_MTimFrm, max(IPO_MTimTo)IPO_MTimTo, max(ipo_tick)ipo_tick, max(uploadtype)uploadtype, max(applystatus)applystatus,max(ipo_discount_type)ipo_discount_type,max(IPO_Discount)IPO_Discount  from ipomaster where ipo_cat  in ('IND', 'SHA', 'POL', 'EMP') group by IPO_SymBse,ipo_name) T2 on T2.IPO_SymBse = T1.IPO_SymBse";
                qry += " left join (select isnull(max(Sub_type),'') SUBTYPE,IPO_SymBse, ipo_name, max(IPO_IssueFrm)IPO_IssueFrm, max(IPO_IssueTo) IPO_IssueTo, max(IPO_PrTo)IPO_PrTo, MAX(IPO_PrFrm) IPO_PrFrm, max(ipo_minord)ipo_minord, max(filename)filename, max(IPO_MTimFrm)IPO_MTimFrm, max(IPO_MTimTo)IPO_MTimTo, max(ipo_tick)ipo_tick, max(uploadtype)uploadtype, max(applystatus)applystatus,max(ipo_discount_type)ipo_discount_type,max(IPO_Discount)IPO_Discount from NSE_IPOMASTER group by IPO_SymBse, ipo_name) T3 on T3.IPO_SymBse = T1.IPO_SymBse)final";
                qry += " where convert(varchar(10), IPO_Issuefrm, 120) > convert(varchar(10), getdate(), 120)  or IPO_Issuefrm is null";
                // string qry = "select distinct ipo_symbse,isnull(ipo_name,ipo_symbse) as iponame,ipo_issueto,ipo_issuefrm,ipo_prfrm,IPO_Code,ipo_prto,filename,ipo_minord,IPO_MTimFrm,IPO_MTimTo,ipo_tick,uploadtype,applystatus  from ipomaster where convert(varchar(10), IPO_Issuefrm, 120) > (select convert(varchar(10), getdate(), 120)) or IPO_Issuefrm is null";
                //DataSet ds = BusinessData.CommonFunction.IPOIssues("FI");
                DataSet ds = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, qry);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    rep_upcoming.DataSource = ds;
                    rep_upcoming.DataBind();
                    //opencount.InnerHtml = 
                    upcomingcount.InnerHtml = "(" + ds.Tables[0].Rows.Count.ToString() + ")";
                    nodatadivupcoming.Visible = false;
                }
                else
                {

                    rep_upcoming.DataSource = null;
                    rep_upcoming.DataBind();
                    upcomingcount.InnerHtml = "(0)";
                    nodatadivupcoming.Visible = true;

                    //ScriptManager.RegisterStartupScript(this.Page, typeof(string), "hide", "HideTable();", true);
                }

                //dtpgrlvwissue.Visible = ds.Tables[0].Rows.Count > 10 ? true : false;
            }
            catch (Exception ex)
            {
                rep_upcoming.DataSource = null;
                rep_upcoming.DataBind();
                upcomingcount.InnerHtml = "(0)";
                ExceptionLogging.SendErrorToText("", "", ex.Message.ToString());

                //ScriptManager.RegisterStartupScript(this.Page, typeof(string), "hide", "HideTable();", true);
            }

        }

        public string catname(string category)
        {
            SqlParameter[] param = { new SqlParameter("@category", category) };
            //string sql = "select * from IPOCategoryMaster where CStatus='" + category + "'";
            string sql = "select * from IPOCategoryMaster where CStatus=@category";
            DataSet ds = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, sql, param);
            if (ds != null & ds.Tables[0].Rows.Count > 0)
            {
                return ds.Tables[0].Rows[0]["catheading"].ToString();
            }
            else
            {
                return category;
            }

        }
        public void fillrecentlyclosedbid()
        {
            try
            {
                //string upbid = "select distinct ipo_symbse,cast(ipo_cat as varchar(50)) as ipo_cat,ipo_issueto,ipo_issuefrm,ipo_prfrm,ipo_prto,filename from ipomaster where IPO_IssueTo >= (select convert(varchar(10),getdate(),120)) and IPO_Issuefrm <= (select convert(varchar(10),getdate(),120)) and cast(ipo_cat as varchar(50)) in ('IND','SHA')";
                //string qry = "select convert(char(12),IPO_IssueFrm,106) as IPO_IssueFrm,convert(char(12),IPO_IssueTo,106) as IPO_IssueTo,IPO_Code,IPO_CoCode,IPO_prTO,IPO_prfrm,IPO_TypeMeth,IPO_RptName,ipo_symbse as Comp_name  from ipomaster where convert(varchar(10), IPO_Issuefrm, 120) > (select convert(varchar(10), getdate(), 120)) order by IPO_Code  desc  ";
                //string qry = " select convert(char(12),IPO_IssueFrm,106) as IPO_IssueFrm,convert(char(12),IPO_IssueTo,106) as IPO_IssueTo,IPO_prTO,IPO_prfrm ,IPO_SymBse as Symbol,ipo_cat,AllotmentDate,ListingDate,AllotmentPrice,ListingPrice from ipomaster where IPO_IssueTo <= (select convert(varchar(10), getdate(), 120)) and IPO_Issuefrm <= (select convert(varchar(10), getdate(), 120)) and cast(ipo_cat as varchar(50))  in ('IND','SHA')";
                //DataSet ds = BusinessData.CommonFunction.IPOIssues("FI");

                string qry = "select * from(select T1.ExTypeNew,isnull(case when T1.ExTypeNew='BSE' then T2.ipo_name else T3.ipo_name end,t1.IPO_SymBse) Ipo_Name,";
                qry += "case when T1.ExTypeNew = 'BSE' then T2.SUBTYPE else T3.SUBTYPE end SUBTYPE,";
                qry += "case when T1.ExTypeNew='BSE' then T2.IPO_SymBse else T3.IPO_SymBse end IPO_SymBse,";
                qry += "case when T1.ExTypeNew='BSE' then T2.IPO_IssueFrm else T3.IPO_IssueFrm end IPO_IssueFrm,";
                qry += "case when T1.ExTypeNew='BSE' then T2.IPO_IssueTo else T3.IPO_IssueTo end IPO_IssueTo,";
                qry += "case when T1.ExTypeNew='BSE' then T2.filename else T3.filename end filename,";
                qry += "case when T1.ExTypeNew='BSE' then T2.AllotmentDate else T3.AllotmentDate end AllotmentDate,";
                qry += "case when T1.ExTypeNew='BSE' then T2.ListingDate else T3.ListingDate end ListingDate,";
                qry += "case when T1.ExTypeNew='BSE' then T2.AllotmentPrice else T3.AllotmentPrice end AllotmentPrice,";
                qry += "case when T1.ExTypeNew='BSE' then T2.ListingPrice else T3.ListingPrice end ListingPrice from (select IPO_SymBse, case when COUNT(IPO_SymBse)>1 then 'BSE' else MAX(ExType) end ExTypeNew  from (select distinct ''SUBTYPE,IPO_SymBse,'BSE' ExType from IPOmaster union ";
                qry += "select distinct 'SME'SUBTYPE,IPO_SymBse,'NSE' ExType from NSE_ipomaster) cm group by IPO_SymBse ) T1";
                qry += " left join (select ''SUBTYPE,IPO_SymBse,ipo_name,max(IPO_IssueFrm) IPO_IssueFrm,max(IPO_IssueTo) IPO_IssueTo,max(filename)filename,max(AllotmentDate)AllotmentDate,max(ListingDate)ListingDate,max(AllotmentPrice)AllotmentPrice,max(ListingPrice)ListingPrice  from ipomaster group by IPO_SymBse,ipo_name) T2 on T2.IPO_SymBse=T1.IPO_SymBse";
                qry += " left join (select isnull(max(Sub_type),'') SUBTYPE,IPO_SymBse,ipo_name,max(IPO_IssueFrm) IPO_IssueFrm,max(IPO_IssueTo) IPO_IssueTo,max(filename)filename,max(AllotmentDate)AllotmentDate,max(ListingDate)ListingDate,max(AllotmentPrice)AllotmentPrice ,max(ListingPrice)ListingPrice  from NSE_IPOMASTER group by IPO_SymBse,ipo_name) T3 on T3.IPO_SymBse=T1.IPO_SymBse )final";
                qry += " where IPO_IssueTo < (select convert(varchar(10), getdate(), 120)) and IPO_IssueFrm > (select convert(varchar(10),'2021-10-31 00:00:00.000', 120))  order by IPO_IssueFrm desc";
                // string qry = "select distinct IPO_SymBse,isnull(ipo_name,ipo_symbse) as iponame,filename, convert(char(12),IPO_IssueFrm,106) as IPO_IssueFrm,IPO_IssueFrm as IPO_IssueFrm1,convert(char(12),IPO_IssueTo,106) as IPO_IssueTo,IPO_IssueTo as IPO_IssueTo1,IPO_SymBse as Symbol,AllotmentDate,ListingDate,AllotmentPrice,ListingPrice from ipomaster where IPO_IssueTo < (select convert(varchar(10), getdate(), 120)) and IPO_IssueFrm > (select convert(varchar(10),'2021-10-31 00:00:00.000', 120)) and cast(ipo_cat as varchar(50))  in ('IND','SHA','POL','EMP') order by IPO_IssueFrm1 desc";
                DataSet ds = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, qry);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    rep_recentlyclosed.DataSource = ds;
                    rep_recentlyclosed.DataBind();
                    //opencount.InnerHtml = "(" + ds.Tables[0].Rows.Count.ToString() + ")";
                    divnodataclosed.Visible = false;
                }
                else
                {

                    rep_recentlyclosed.DataSource = null;
                    rep_recentlyclosed.DataBind();
                    divnodataclosed.Visible = true;

                    //upcomingcount.InnerHtml = "(0)";

                    //ScriptManager.RegisterStartupScript(this.Page, typeof(string), "hide", "HideTable();", true);
                }

                //dtpgrlvwissue.Visible = ds.Tables[0].Rows.Count > 10 ? true : false;
            }
            catch
            {
                rep_recentlyclosed.DataSource = null;
                rep_recentlyclosed.DataBind();
                //upcomingcount.InnerHtml = "(0)";

                //ScriptManager.RegisterStartupScript(this.Page, typeof(string), "hide", "HideTable();", true);
            }

        }
        //public string mastertype(string id)
        //{
        //    string qry= "select uploadtype,applystatus from ipomaster where ipo_"
        //}

        protected void applybtn_ServerClick(object sender, EventArgs e)
        {
            //confirm_txt.InnerText = "Wait Just A Moment";
            BusinessData.NSE_ExceptionLogging.uservalidationconfirm_log(Applicantname, panno, DPId, txtupiid.Value,"apply");

            string sqlExist = "";
            SqlParameter[] param = { new SqlParameter("@symbolhdn", symbolhdn.Value),
                                     new SqlParameter("@categoryhdn", categoryhdn.Value),
                                     new SqlParameter("@minprice",  minprice.Value),
                                      new SqlParameter("@maxprice", maxprice.Value),
                                    new SqlParameter("@minqty",  minqty.Value),
                                    new SqlParameter("@discounthdn", discounthdn.Value)};
            //string sqlExist = "select * from IPObidfiledetailsNew where uccId='" + clcode + "' and Symbol='" + symbolhdn.Value + "' and Status not in ('Cancelled','Rejected')";
            if (exchanges.Value == "NSE")
            {
                // sqlExist = "select * from nse_ipomaster where ipo_symbse='" + symbolhdn.Value + "' and ipo_cat='" + categoryhdn.Value + "' and ipo_prfrm='" + minprice.Value + "' and ipo_prto='" + maxprice.Value + "' and ipo_minord='" + minqty.Value + "' and IPO_Discount='" + discounthdn.Value + "'";
                sqlExist = "select * from nse_ipomaster where ipo_symbse=@symbolhdn and ipo_cat=@categoryhdn and ipo_prfrm=@minprice and ipo_prto=@maxprice and ipo_minord=@minqty and IPO_Discount=@discounthdn";
            }
            else
            {
                //sqlExist = "select * from ipomaster where ipo_symbse='" + symbolhdn.Value + "' and ipo_cat='" + categoryhdn.Value + "' and ipo_prfrm='" + minprice.Value + "' and ipo_prto='" + maxprice.Value + "' and ipo_minord='" + minqty.Value + "' and IPO_Discount='" + discounthdn.Value + "'";
                sqlExist = "select * from ipomaster where ipo_symbse=@symbolhdn and ipo_cat=@categoryhdn and ipo_prfrm=@minprice and ipo_prto=@maxprice and ipo_minord=@minqty and IPO_Discount=@discounthdn";
                //DataSet dsExist = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, sqlExist);
            }
            BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("Apply the symbol query: " + sqlExist);

            DataSet dsExist = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, sqlExist, param);
            if (dsExist != null && dsExist.Tables[0].Rows.Count > 0)
            {
                insertIPONew();
            }
            else
            {
                string script = "alertify.alert('Invalid Input Data');";
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "alertifyScript", script, true);

               // ScriptManager.RegisterStartupScript(this, this.GetType(), "success", "alert('Invalid Input Data');", true);
                fillopenbid();
            }

        }
        public void fillofflinetrigger()
        {

            string offsql = "select * from IPOOffline_Automation";
            DataSet offds = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, offsql);
            if (offds != null && offds.Tables.Count > 0 && offds.Tables[0].Rows.Count > 0)
            {
                if (offds.Tables[0].Rows[0]["OfflineTrigger"].ToString() != "" && offds.Tables[0].Rows[0]["OfflineTrigger"].ToString() == "Y")
                {
                    offtrigger.Value = "Y";
                }
                else
                {
                    offtrigger.Value = "N";

                }
                offlinemessage.Value = offds.Tables[0].Rows[0]["message"].ToString();


            }
        }
        public void insertIPONew()
        {
            SqlParameter[] param = { new SqlParameter("@txtupiid", txtupiid.Value.Trim()),
                                                     new SqlParameter("@clcode", clcode),
                                        new SqlParameter("@symbolhdn", symbolhdn.Value),
                                        new SqlParameter("@categoryhdn", categoryhdn.Value)};
            bidreq bidrequest = new bidreq();
            string strAppNo = "", AppNoDecryptstr = "";
            try
            {
                //if (DPId.Length < 16)
                if ((Depository.ToUpper() == "NSDL" && DPId.Length  < 16) || (Depository.ToUpper() == "CDSL" && DPId.Length < 8))

                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "success", "Dpidvalidation();", true);

                    //ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('Your DPID is invalid,Please contact Customer Support!!');window.location='/ipo.aspx';", true);

                }
                else
                {//upi saved
                    if (upiid.Checked)
                    {
                        if (txtupiid.Value.Trim() != "")
                        {


                            //string qryupdateupiid = "update ucc_master set  upiid='" + txtupiid.Value.Trim() + "' where ucc='" + clcode + "'";
                            string qryupdateupiid = "update ucc_master set  upiid=@txtupiid where ucc=@clcode";
                            SqlHelper.ExecuteNonQuery(sqlcon, CommandType.Text, qryupdateupiid, param);
                            // SqlHelper.ExecuteNonQuery(sqlcon, CommandType.Text, qryupdateupiid);
                        }
                    }

                    if (exchanges.Value == "NSE")
                    {
                        #region NSE
                        // string sqlExist = "select * from (select Symbol,upistatus,status from IPObidfiledetailsNew  where Exchange='NSE' and uccId='" + clcode + "' and Symbol='" + symbolhdn.Value + "' and Category='" + categoryhdn.Value + "')a left join  NSE_upistatusMaster c on a.upistatus = c.Description where a.Status not in ('Cancelled','Rejected') and  c.status !='rejected'";
                        string sqlExist = "select * from (select Symbol,upistatus,status from IPObidfiledetailsNew  where Exchange='NSE' and uccId=@clcode and Symbol=@symbolhdn and Category=@categoryhdn)a left join  NSE_upistatusMaster c on a.upistatus = c.Description where a.Status not in ('Cancelled','Rejected') and  ( c.status !='rejected' or c.status is null)";
                        BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("Apply the IPO for NSE: " + sqlExist);
                        DataSet dsExist = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, sqlExist, param);
                        //DataSet dsExist = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, sqlExist);
                        if (dsExist != null && dsExist.Tables[0].Rows.Count > 0)
                        {
                            BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("You have already applied for this NSE IPO: " + sqlExist);
                            //ScriptManager.RegisterStartupScript(this, this.GetType(), "success", "alert('You have already applied for this IPO.');window.location='/ipo.aspx';", true);


                            ScriptManager.RegisterStartupScript(this, this.GetType(), "success", "alreadyapplied();", true);

                        }
                        else if (validateoffline())
                        {
                            #region offlinevalidation NSE
                            // string sqlExistoff = "select * from IPOBidFileDetailsOffline where Exchange='NSE' and uccId='" + clcode + "' and Symbol='" + symbolhdn.Value + "' and Category='" + categoryhdn.Value + "' and Status='pending' ";
                            string sqlExistoff = "select * from IPOBidFileDetailsOffline where Exchange='NSE' and uccId=@clcode and Symbol=@symbolhdn and Category=@categoryhdn and Status='pending' ";
                            BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText(" Apply the IPO in Offline for NSE Query : " + sqlExistoff);
                            DataSet dsExistoff = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, sqlExistoff, param);
                            // DataSet dsExistoff = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, sqlExistoff);
                            if (dsExistoff != null && dsExistoff.Tables[0].Rows.Count > 0)
                            {
                                BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("You have already applied for this IPO in offline mode for NSE: " + sqlExistoff);
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "success", "offlinealreadyapplied();", true);
                                //ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('You have already applied for this IPO in offline mode.');window.location='/orders.aspx';", true);
                            }
                            #region offlineflow
                            else
                            {
                                #region Get values
                                bool CutoffFlag1, CutoffFlag2, CutoffFlag3;
                                string ChqRecFlag = "", OrderedBY = "", PlacedBy = "", depository = "", dp1 = "", dp2 = "", CategoryName = "", Tupiid = "", symbol = "", discounttype = "", AppNo = "";
                                int bidcount = 0, quantity1 = 0, quantity2 = 0, quantity3 = 0;
                                decimal Bprice1 = 0, Bprice2 = 0, Bprice3 = 0, amount1 = 0, amount2 = 0, amount3 = 0;
                                double calNetAmount1 = 0, calNetAmount2 = 0, calNetAmount3 = 0, DiscountValue1 = 0, DiscountValue2 = 0, DiscountValue3 = 0;
                                double NetAmount1 = 0, NetAmount2 = 0, NetAmount3 = 0;
                                double discountcalAmount1 = 0, discountcalAmount2 = 0, discountcalAmount3 = 0;
                                string insertqry1 = ""; int formType = 1;
                                CutoffFlag1 = cutoff1.Checked == true ? true : false;
                                CutoffFlag2 = cutoff2.Checked == true ? true : false;
                                CutoffFlag3 = cutoff3.Checked == true ? true : false;

                                if (CutoffFlag1 == true || CutoffFlag2 == true || CutoffFlag3 == true)
                                    ChqRecFlag = "N";
                                else
                                    ChqRecFlag = "Y";

                                CategoryName = categoryhdn.Value.ToString().ToUpper();
                                Tupiid = txtupiid.Value.Trim();
                                symbol = symbolhdn.Value;
                                discounttype = discounttypehdn.Value;
                                OrderedBY = Session["OrderedBY"].ToString();
                                PlacedBy = Session["PlacedBY"].ToString();
                                Session["BankName"] = "8888".ToString().PadRight(6);
                                Session["Location"] = "UPIIDL".ToString().PadRight(6);
                                depository = Session["Depository"].ToString();
                                string accntpayer = txtupiid.Value.Trim();
                                Session["AccNo"] = accntpayer.Trim();
                                Random rn = new Random();
                                int ReferenceNo = rn.Next(99999999);
                                if (depository == "CDSL")
                                {
                                    dp1 = "0";
                                    dp2 = DPId;
                                }
                                else if (depository == "NSDL")
                                {
                                    dp1 = DPId.Substring(0, 8);
                                    dp2 = DPId.Substring(8, 8);
                                }

                                if (lot1.Value != "" && price1.Value != "") { bidcount += 1; }
                                if (lot2.Value != "" && price2.Value != "") { bidcount += 1; }
                                if (lot3.Value != "" && price3.Value != "") { bidcount += 1; }


                                if (CategoryName == "EMP" || CategoryName == "SHA")
                                    formType = 3;



                                #region eformoffline
                                if (bidcount.ToString() != "")
                                {
                                    if (bidcount > 0)
                                    {
                                        double DiscountAmount = 0;
                                        DiscountValue1 = Convert.ToDouble(discounthdn.Value);
                                        quantity1 = (Convert.ToInt32(lot1.Value) * Convert.ToInt32(minqty.Value));
                                        Bprice1 = Convert.ToDecimal(price1.Value);


                                        NetAmount1 = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price1.Value);
                                        if (discounttypehdn.Value == "P")
                                            DiscountValue1 = Convert.ToDouble(price1.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                                        DiscountAmount = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * DiscountValue1;
                                        calNetAmount1 = Convert.ToDouble(NetAmount1 - DiscountAmount);



                                        if (calNetAmount1 < 200000)
                                            discountcalAmount1 = calNetAmount1;
                                        else
                                            discountcalAmount1 = NetAmount1;

                                        //amount1 = quantity1 * Bprice1;
                                        amount1 = Convert.ToDecimal(discountcalAmount1);
                                    }
                                    if (bidcount > 1)
                                    {
                                        double DiscountAmount = 0;
                                        DiscountValue2 = Convert.ToDouble(discounthdn.Value);
                                        quantity2 = (Convert.ToInt32(lot2.Value) * Convert.ToInt32(minqty.Value));
                                        Bprice2 = Convert.ToDecimal(price2.Value);

                                        NetAmount2 = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price2.Value);
                                        if (discounttypehdn.Value == "P")
                                            DiscountValue2 = Convert.ToDouble(price2.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                                        DiscountAmount = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * DiscountValue2;
                                        calNetAmount2 = Convert.ToDouble(NetAmount2 - DiscountAmount);


                                        if (calNetAmount2 < 200000)
                                            discountcalAmount2 = calNetAmount2;
                                        else
                                            discountcalAmount2 = NetAmount2;

                                        // amount2 = quantity2 * Bprice2;
                                        amount2 = Convert.ToDecimal(discountcalAmount2);
                                    }
                                    if (bidcount > 2)
                                    {
                                        double DiscountAmount = 0;
                                        DiscountValue3 = Convert.ToDouble(discounthdn.Value);
                                        quantity3 = (Convert.ToInt32(lot3.Value) * Convert.ToInt32(minqty.Value));
                                        Bprice3 = Convert.ToDecimal(price3.Value);


                                        NetAmount3 = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price3.Value);
                                        if (discounttypehdn.Value == "P")
                                            DiscountValue3 = Convert.ToDouble(price3.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                                        DiscountAmount = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * DiscountValue3;
                                        calNetAmount3 = Convert.ToDouble(NetAmount3 - DiscountAmount);

                                        if (calNetAmount3 < 200000)
                                            discountcalAmount3 = calNetAmount3;
                                        else
                                            discountcalAmount3 = NetAmount3;
                                        //amount3 = quantity3 * Bprice3;
                                        amount3 = Convert.ToDecimal(discountcalAmount3);
                                    }

                                }

                                ApplicationBid[] NSEappbid = new ApplicationBid[bidcount];
                                if (bidcount > 0)
                                {
                                    double DiscountAmount = 0;
                                    DiscountValue1 = Convert.ToDouble(discounthdn.Value);
                                    NSEappbid[0] = new ApplicationBid();
                                    NSEappbid[0].quantity = quantity1;
                                    NSEappbid[0].atCutOff = CutoffFlag1;
                                    NSEappbid[0].price = Bprice1;

                                    NetAmount1 = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price1.Value);
                                    if (discounttypehdn.Value == "P")
                                        DiscountValue1 = Convert.ToDouble(price1.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                                    DiscountAmount = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * DiscountValue1;
                                    calNetAmount1 = Convert.ToDouble(NetAmount1 - DiscountAmount);



                                    if (calNetAmount1 < 200000)
                                        discountcalAmount1 = calNetAmount1;
                                    else
                                        discountcalAmount1 = NetAmount1;


                                    NSEappbid[0].amount = Convert.ToDecimal(discountcalAmount1);
                                }

                                if (bidcount > 1)
                                {
                                    double DiscountAmount = 0;
                                    DiscountValue2 = Convert.ToDouble(discounthdn.Value);
                                    NSEappbid[1] = new ApplicationBid();
                                    NSEappbid[1].quantity = quantity2;
                                    NSEappbid[1].atCutOff = CutoffFlag2;
                                    NSEappbid[1].price = Bprice2;

                                    NetAmount2 = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price2.Value);
                                    if (discounttypehdn.Value == "P")
                                        DiscountValue2 = Convert.ToDouble(price2.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                                    DiscountAmount = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * DiscountValue2;
                                    calNetAmount2 = Convert.ToDouble(NetAmount2 - DiscountAmount);


                                    if (calNetAmount2 < 200000)
                                        discountcalAmount2 = calNetAmount2;
                                    else
                                        discountcalAmount2 = NetAmount2;


                                    NSEappbid[1].amount = Convert.ToDecimal(discountcalAmount2);
                                }

                                if (bidcount > 2)
                                {
                                    double DiscountAmount = 0;
                                    DiscountValue3 = Convert.ToDouble(discounthdn.Value);
                                    NSEappbid[2] = new ApplicationBid();
                                    NSEappbid[2].quantity = quantity3;
                                    NSEappbid[2].atCutOff = CutoffFlag3;
                                    NSEappbid[2].price = Bprice3;

                                    NetAmount3 = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price3.Value);
                                    if (discounttypehdn.Value == "P")
                                        DiscountValue3 = Convert.ToDouble(price3.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                                    DiscountAmount = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * DiscountValue3;
                                    calNetAmount3 = Convert.ToDouble(NetAmount3 - DiscountAmount);

                                    if (calNetAmount3 < 200000)
                                        discountcalAmount3 = calNetAmount3;
                                    else
                                        discountcalAmount3 = NetAmount3;

                                    NSEappbid[2].amount = Convert.ToDecimal(discountcalAmount3);
                                }

                                applicationNo NSEappno = new applicationNo();
                                NSEappno.symbol = symbol;
                                NSEappno.depository = depository;
                                NSEappno.dpId = dp1;
                                NSEappno.clientBenId = dp2;
                                NSEappno.pan = Session["Pan"].ToString().Trim();
                                NSEappno.category = CategoryName;
                                NSEappno.bankReferenceNo = "";
                                NSEappno.bankAccountNo = "";
                                NSEappno.bankNameBranch = "";
                                NSEappno.clientName = Session["ClientFname"].ToString().Trim();
                                NSEappno.clientAddress = "";
                                NSEappno.clientEmail = "";
                                NSEappno.clientTelephone = "";
                                NSEappno.formType = formType;
                                NSEappno.paymentType = "FULL";
                                NSEappno.nonASBA = false;
                                NSEappno.upiFlag = "Y";
                                NSEappno.upi = Tupiid;
                                NSEappno.bankCode = "";
                                NSEappno.locationCode = "";
                                NSEappno.syndMemCode = "";
                                NSEappno.brokerCode = "";
                                NSEappno.subBrokerCode = "";
                                NSEappno.bids = NSEappbid;
                                string EformReqJson = (new JavaScriptSerializer()).Serialize(NSEappno);

                                #endregion
                                if (bidcount > 0)
                                {
                                    double DiscountAmount = 0;
                                    DiscountValue1 = Convert.ToDouble(discounthdn.Value);
                                    quantity1 = (Convert.ToInt32(lot1.Value) * Convert.ToInt32(minqty.Value));
                                    Bprice1 = Convert.ToDecimal(price1.Value);

                                    NetAmount1 = Convert.ToDouble(quantity1 * Bprice1);

                                    if (discounttype == "P")
                                        DiscountValue1 = Convert.ToDouble(Bprice1) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                                    DiscountAmount = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * DiscountValue1;
                                    calNetAmount1 = Convert.ToDouble(NetAmount1 - DiscountAmount);

                                    if (calNetAmount1 < 200000)
                                        discountcalAmount1 = calNetAmount1;
                                    else
                                        discountcalAmount1 = NetAmount1;

                                    //amount1 = quantity1 * Bprice1;
                                    amount1 = Convert.ToDecimal(discountcalAmount1);
                                }
                                if (bidcount > 1)
                                {
                                    double DiscountAmount = 0;
                                    DiscountValue2 = Convert.ToDouble(discounthdn.Value);
                                    quantity2 = (Convert.ToInt32(lot2.Value) * Convert.ToInt32(minqty.Value));
                                    Bprice2 = Convert.ToDecimal(price2.Value);

                                    NetAmount2 = Convert.ToDouble(quantity2 * Bprice2);

                                    if (discounttype == "P")
                                        DiscountValue2 = Convert.ToDouble(Bprice2) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                                    DiscountAmount = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * DiscountValue2;
                                    calNetAmount2 = Convert.ToDouble(NetAmount2 - DiscountAmount);

                                    if (calNetAmount2 < 200000)
                                        discountcalAmount2 = calNetAmount2;
                                    else
                                        discountcalAmount2 = NetAmount2;

                                    // amount2 = quantity2 * Bprice2;
                                    amount2 = Convert.ToDecimal(discountcalAmount2);
                                }
                                if (bidcount > 2)
                                {
                                    double DiscountAmount = 0;
                                    DiscountValue3 = Convert.ToDouble(discounthdn.Value);
                                    quantity3 = (Convert.ToInt32(lot3.Value) * Convert.ToInt32(minqty.Value));
                                    Bprice3 = Convert.ToDecimal(price3.Value);

                                    NetAmount3 = Convert.ToDouble(quantity3 * Bprice3);
                                    if (discounttype == "P")
                                        DiscountValue3 = Convert.ToDouble(Bprice3) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                                    DiscountAmount = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * DiscountValue3;
                                    calNetAmount3 = Convert.ToDouble(NetAmount3 - DiscountAmount);


                                    if (calNetAmount3 < 200000)
                                        discountcalAmount3 = calNetAmount3;
                                    else
                                        discountcalAmount3 = NetAmount3;

                                    //amount3 = quantity3 * Bprice3;
                                    amount3 = Convert.ToDecimal(discountcalAmount3);
                                }
                                #endregion


                                #region Transaction bid
                                //double maxamt1 = 0;
                                //double maxamt2 = 0;
                                //double maxamt3 = 0;


                                double max = 0;
                                //double dv = 0;
                                NSEBidsReq[] NSEbidreq = new NSEBidsReq[bidcount];
                                if (bidcount > 0)
                                {
                                    double DiscountAmount = 0;
                                    DiscountValue1 = Convert.ToDouble(discounthdn.Value);

                                    NSEbidreq[0] = new NSEBidsReq();
                                    NSEbidreq[0].activityType = "new";
                                    NSEbidreq[0].quantity = quantity1;
                                    NSEbidreq[0].atCutOff = CutoffFlag1;
                                    NSEbidreq[0].price = Convert.ToDouble(Bprice1);

                                    // NetAmount = Convert.ToDouble(NSEbidreq[0].quantity * NSEbidreq[0].price);
                                    NetAmount1 = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price1.Value);
                                    if (discounttypehdn.Value == "P")
                                        DiscountValue1 = Convert.ToDouble(price1.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                                    DiscountAmount = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * DiscountValue1;
                                    calNetAmount1 = Convert.ToDouble(NetAmount1 - DiscountAmount);



                                    if (calNetAmount1 < 200000)
                                        discountcalAmount1 = calNetAmount1;
                                    else
                                        discountcalAmount1 = NetAmount1;

                                    NSEbidreq[0].amount = discountcalAmount1;
                                    NSEbidreq[0].remark = "";
                                    //maxamt1 = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price1.Value);
                                }

                                if (bidcount > 1)
                                {
                                    double DiscountAmount = 0;
                                    DiscountValue2 = Convert.ToDouble(discounthdn.Value);
                                    NSEbidreq[1] = new NSEBidsReq();
                                    NSEbidreq[1].activityType = "new";
                                    NSEbidreq[1].quantity = quantity2;
                                    NSEbidreq[1].atCutOff = CutoffFlag2;
                                    NSEbidreq[1].price = Convert.ToDouble(Bprice2);

                                    // NetAmount = Convert.ToDouble(NSEbidreq[1].quantity * NSEbidreq[1].price);
                                    NetAmount2 = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price2.Value);
                                    if (discounttypehdn.Value == "P")
                                        DiscountValue2 = Convert.ToDouble(price2.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                                    DiscountAmount = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * DiscountValue2;
                                    calNetAmount2 = Convert.ToDouble(NetAmount2 - DiscountAmount);


                                    if (calNetAmount2 < 200000)
                                        discountcalAmount2 = calNetAmount2;
                                    else
                                        discountcalAmount2 = NetAmount2;

                                    NSEbidreq[1].amount = discountcalAmount2;
                                    NSEbidreq[1].remark = "";
                                    //maxamt2 = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price2.Value);
                                }

                                if (bidcount > 2)
                                {
                                    double DiscountAmount = 0;
                                    DiscountValue3 = Convert.ToDouble(discounthdn.Value);
                                    NSEbidreq[2] = new NSEBidsReq();
                                    NSEbidreq[2].activityType = "new";
                                    NSEbidreq[2].quantity = quantity3;
                                    NSEbidreq[2].atCutOff = CutoffFlag3;
                                    NSEbidreq[2].price = Convert.ToDouble(Bprice3);

                                    //NetAmount = Convert.ToDouble(NSEbidreq[2].quantity * NSEbidreq[2].price);
                                    NetAmount3 = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price3.Value);
                                    if (discounttypehdn.Value == "P")
                                        DiscountValue3 = Convert.ToDouble(price3.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                                    DiscountAmount = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * DiscountValue3;
                                    calNetAmount3 = Convert.ToDouble(NetAmount3 - DiscountAmount);

                                    if (calNetAmount3 < 200000)
                                        discountcalAmount3 = calNetAmount3;
                                    else
                                        discountcalAmount3 = NetAmount3;

                                    NSEbidreq[2].amount = discountcalAmount3;
                                    NSEbidreq[2].remark = "";
                                    //maxamt3 = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price3.Value);
                                }
                                #region
                                //if (maxamt1 > maxamt2 && maxamt1 > maxamt3)
                                //{
                                //    max = maxamt1;
                                //    dv = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * DiscountValue1;
                                //}
                                //else if (maxamt2 > maxamt3 && maxamt2 > maxamt1)
                                //{
                                //    max = maxamt2;
                                //    dv = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * DiscountValue2;
                                //}
                                //else if (maxamt3 > maxamt1 && maxamt3 > maxamt2)
                                //{
                                //    max = maxamt3;
                                //    dv = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * DiscountValue3;
                                //}
                                #endregion
                                if (NetAmount1 > NetAmount2 && NetAmount1 > NetAmount3) max = NetAmount1;

                                else if (NetAmount2 > NetAmount3 && NetAmount2 > NetAmount1) max = NetAmount2;

                                else if (NetAmount3 > NetAmount1 && NetAmount3 > NetAmount2) max = NetAmount3;


                                #endregion bid
                                NSEtransactionreq transreq = new NSEtransactionreq();
                                transreq.symbol = symbol;
                                transreq.applicationNumber = "XXXXX";
                                transreq.category = CategoryName;
                                transreq.clientName = Session["ClientFname"].ToString().Trim();
                                transreq.depository = depository;
                                transreq.dpId = dp1;
                                transreq.clientBenId = dp2;
                                transreq.nonASBA = false;
                                transreq.pan = Session["Pan"].ToString().Trim();
                                transreq.referenceNumber = ReferenceNo.ToString();
                                transreq.allotmentMode = "demat";
                                transreq.upiFlag = "Y";
                                transreq.upi = Tupiid;
                                transreq.bankCode = "";
                                transreq.locationCode = "";
                                transreq.timestamp = "";
                                transreq.bids = NSEbidreq;
                                string ReqJson = (new JavaScriptSerializer()).Serialize(transreq);
                                int transCutoffflag1 = 0, transCutoffflag2 = 0, transCutoffflag3 = 0;
                                transCutoffflag1 = Convert.ToInt16(cutoff1.Checked == true ? 1 : 0);
                                transCutoffflag2 = Convert.ToInt16(cutoff2.Checked == true ? 1 : 0);
                                transCutoffflag3 = Convert.ToInt16(cutoff3.Checked == true ? 1 : 0);
                                SqlParameter[] param1 = {new SqlParameter("@clcode", clcode) ,
                                                         new SqlParameter("@ReqJson", ReqJson) ,
                                                          new SqlParameter("@EformReqJson", EformReqJson) ,
                                                           new SqlParameter("@symbol", symbol),
                                                          new SqlParameter("@CategoryName", CategoryName) ,
                                                          new SqlParameter("@ClientFname", Session["ClientFname"].ToString()) ,
                                                           new SqlParameter("@Depository", Session["Depository"].ToString()),
                                                          new SqlParameter("@dp1", dp1) ,
                                                          new SqlParameter("@dp2", dp2) ,
                                                           new SqlParameter("@quantity1", quantity1),
                                                         new SqlParameter("@transCutoffflag1", transCutoffflag1) ,
                                                          new SqlParameter("@Bprice1", Bprice1) ,
                                                           new SqlParameter("@max", max),
                                                          new SqlParameter("@amount1", amount1) ,
                                                          new SqlParameter("@ChqRecFlag", ChqRecFlag) ,
                                                           new SqlParameter("@Pan", Session["Pan"].ToString()),

                                                          new SqlParameter("@BankName", Session["BankName"].ToString()) ,
                                                          new SqlParameter("@Location",  Session["Location"].ToString()) ,
                                                           new SqlParameter("@AccNo", Session["AccNo"].ToString()),
                                                          new SqlParameter("@quantity2", quantity2) ,
                                                          new SqlParameter("@Bprice2", Bprice2) ,
                                                           new SqlParameter("@transCutoffflag2", transCutoffflag2),
                                                          new SqlParameter("@amount2", amount2) ,
                                                          new SqlParameter("@quantity3", quantity3) ,
                                                           new SqlParameter("@Bprice3", Bprice3),
                                                         new SqlParameter("@transCutoffflag3", transCutoffflag3) ,
                                                          new SqlParameter("@amount3", amount3) ,
                                                           new SqlParameter("@issuefromdatehdn", issuefromdatehdn.Value),
                                                          new SqlParameter("@issuetodatehdn", issuetodatehdn.Value) ,
                                                          new SqlParameter("@issuefromtimehdn", issuefromtimehdn.Value) ,
                                                           new SqlParameter("@issuetotimehdn", issuetotimehdn.Value),


                                new SqlParameter("@minprice", minprice.Value),
                                                         new SqlParameter("@maxprice", maxprice.Value) ,
                                                          new SqlParameter("@minqty", Convert.ToInt32(minqty.Value)) ,
                                                           new SqlParameter("@ticksizehdn", ticksizehdn.Value),
                                                          new SqlParameter("@discounthdn", discounthdn.Value) ,
                                                          new SqlParameter("@PlacedBY", Session["PlacedBY"].ToString()) ,
                                                           new SqlParameter("@OrderedBY", Session["OrderedBY"].ToString())};

                                insertqry1 = "insert into IPOBidFileDetailsOffline(ReqJson,EformReqJson,status,Symbol,Category,ApplicantName,Depository,DpID,ClientId,Quantity,CutOffFlag,Rate,Amt_Payable,Amt_Payable1,ActionCode,chqRecFlag,PanNo,BankName,Location,AccNo,App_Date,OptQty2,OptPrice2,OptCutOff2,Amt_Payable2,ActionCode2,OptQty3,OptPrice3,OptCutOff3,Amt_Payable3,ActionCode3,SyndMem_Code,SubBrokCode,uccId,IssueStartDate,IssueEndDate,IssueStartTime,IssueEndTime,MinPrice,MaxPrice,MinBidQty,TickSize,Discount,PlacedBy,OrderedBy,Exchange)";
                                //insertqry1 += " values ('" + ReqJson + "','"+ EformReqJson + "','pending','" + symbol + "','" + CategoryName + "','" + Session["ClientFname"].ToString() + "','" + Session["Depository"].ToString() + "','" + dp1 + "','" + dp2 + "','" + quantity1 + "','" + transCutoffflag1 + "','" + Bprice1 + "','" + max + "','" + amount1 + "','new','" + ChqRecFlag + "','" + Session["Pan"].ToString() + "','" + Session["BankName"].ToString() + "','" + Session["Location"].ToString() + "','" + Session["AccNo"].ToString() + "',getdate(),'" + quantity2 + "','" + Bprice2 + "','" + transCutoffflag2 + "','" + amount2 + "','new','" + quantity3 + "','" + Bprice3 + "','" + transCutoffflag3 + "','" + amount3 + "','new',null,null,'" + clcode + "','" + issuefromdatehdn.Value + "','" + issuetodatehdn.Value + "','" + issuefromtimehdn.Value + "','" + issuetotimehdn.Value + "','" + minprice.Value + "','" + maxprice.Value + "'," + Convert.ToInt32(minqty.Value) + ",'" + ticksizehdn.Value + "','" + discounthdn.Value + "','" + Session["PlacedBY"].ToString() + "','" + Session["OrderedBY"].ToString() + "','NSE')";
                                insertqry1 += " values (@ReqJson,@EformReqJson,'pending',@symbol,@CategoryName,@ClientFname,@Depository,@dp1,@dp2,@quantity1,@transCutoffflag1,@Bprice1,@max,@amount1,'new',@ChqRecFlag,@Pan,@BankName,@Location,@AccNo,getdate(),@quantity2,@Bprice2,@transCutoffflag2,@amount2,'new',@quantity3,@Bprice3,@transCutoffflag3,@amount3,'new',null,null,@clcode,@issuefromdatehdn,@issuetodatehdn,@issuefromtimehdn,@issuetotimehdn,@minprice,@maxprice,@minqty,@ticksizehdn,@discounthdn,@PlacedBY,@OrderedBY,'NSE')";


                                //insertqry1 = "insert into IPOBidFileDetailsOffline(ReqJson,status,Symbol,Category,ApplicantName,Depository,DpID,ClientId,Quantity,CutOffFlag,Rate,Amt_Payable,ActionCode,chqRecFlag,PanNo,App_Date,OptQty2,OptPrice2,OptCutOff2,Amt_Payable,ActionCode)";
                                //,Amt_Payable,ActionCode,OptQty3,OptPrice3,OptCutOff3,Amt_Payable,ActionCode,SyndMem_Code,SubBrokCode,uccId,IssueStartDate,IssueEndDate,IssueStartTime,IssueEndTime,MinPrice,MaxPrice,MinBidQty,TickSize,Discount,PlacedBy,OrderedBy,Exchange)";
                                //insertqry1 += " values ('" + ReqJson + "','pending','" + symbol + "','" + CategoryName + "','" + Session["ClientFname"].ToString() + "','" + Session["Depository"].ToString() + "','" + dp1 + "','" + dp2 + "','" + quantity1 + "','" + CutoffFlag1 + "','" + Bprice1 + "','" + amount1 + "','new','" + ChqRecFlag + "','" + Session["Pan"].ToString() + "',getdate(),'" + Bprice2 + "','" + CutoffFlag2 + "','" + amount2 + "','new')";
                                //,'" + amount2 + "','new','" + quantity3 + "','" + Bprice3 + "','" + CutoffFlag3 + "','" + amount3 + "','new',null,null,'" + clcode + "','" + issuefromdatehdn.Value + "','" + issuetodatehdn.Value + "','" + issuefromtimehdn.Value + "','" + issuetotimehdn.Value + "','" + minprice.Value + "','" + maxprice.Value + "'," + Convert.ToInt32(minqty.Value) + ",'" + ticksizehdn.Value + "','" + discounthdn.Value + "','" + Session["PlacedBY"].ToString() + "','" + Session["OrderedBY"].ToString() + "','NSE')";

                                //SqlHelper.ExecuteNonQuery(sqlcon, CommandType.Text, insertqry1, param1);
                                BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText(" Applied the IPO in Offline for NSE Query : " + insertqry1);
                                // BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("insert into IPOBidFileDetailsOffline: " + insertqry1);
                                SqlHelper.ExecuteNonQuery(sqlcon, CommandType.Text, insertqry1, param1);

                                //ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('Your BID is being Processed,We will place the order on next working day!!');window.location='/orders.aspx';", true);



                                // ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('Your BID is being Processed,Order will place when IPO market is open!!');window.location='/orders.aspx';", true);

                                ScriptManager.RegisterStartupScript(this, this.GetType(), "success", "nseoffline();", true);


                               // ScriptManager.RegisterStartupScript(this, GetType(), "alertifyScript", "alertify.alert('Your message');", true);
                                //Response.Redirect("/orders.aspx");
                            }
                            #endregion
                            #endregion
                            //ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('Market is not open, try again later');", true);

                        }
                        else
                        {
                            #region NSE Online

                            #region Get values
                            string status = "";
                            bool CutoffFlag1, CutoffFlag2, CutoffFlag3;
                            string ChqRecFlag = "", OrderedBY = "", PlacedBy = "", depository = "", dp1 = "", dp2 = "", AppNo = "", CategoryName = "", Tupiid = "", symbol = "", reason = "";
                            int formType = 1, bidcount = 0, quantity1 = 0, quantity2 = 0, quantity3 = 0;
                            decimal Bprice1 = 0, Bprice2 = 0, Bprice3 = 0, amount1 = 0, amount2 = 0, amount3 = 0;
                            double DiscountAmount = 0, calNetAmount1 = 0, calNetAmount2 = 0, calNetAmount3 = 0, NetAmount1 = 0, NetAmount2 = 0, NetAmount3 = 0, DiscountValue1 = 0, DiscountValue2 = 0, DiscountValue3 = 0;
                            string BIDstatus;
                            double max = 0, discountcalAmount1 = 0, discountcalAmount2 = 0, discountcalAmount3 = 0;

                            CutoffFlag1 = cutoff1.Checked == true ? true : false;
                            CutoffFlag2 = cutoff2.Checked == true ? true : false;
                            CutoffFlag3 = cutoff3.Checked == true ? true : false;

                            if (CutoffFlag1 == true || CutoffFlag2 == true || CutoffFlag3 == true)
                                ChqRecFlag = "N";
                            else
                                ChqRecFlag = "Y";

                            CategoryName = categoryhdn.Value.ToString();
                            Tupiid = txtupiid.Value.Trim();
                            symbol = symbolhdn.Value;
                            OrderedBY = Session["OrderedBY"].ToString();
                            PlacedBy = Session["PlacedBY"].ToString();
                            Random rn = new Random();
                            int ReferenceNo = rn.Next(99999999);
                            depository = Session["Depository"].ToString();
                            string BankName = "8888".ToString().PadRight(6);
                            string Location = "UPIIDL".ToString().PadRight(6);
                            string accntpayer = txtupiid.Value.Trim();
                            string AccNo = accntpayer.Trim();

                            if (depository == "CDSL")
                            {
                                dp1 = "0";
                                dp2 = DPId;
                            }
                            else if (depository == "NSDL")
                            {
                                dp1 = DPId.Substring(0, 8);
                                dp2 = DPId.Substring(8, 8);
                            }

                            if (CategoryName == "EMP" || CategoryName == "SHA")
                                formType = 3;

                            if (lot1.Value != "" && price1.Value != "") { bidcount += 1; }
                            if (lot2.Value != "" && price2.Value != "") { bidcount += 1; }
                            if (lot3.Value != "" && price3.Value != "") { bidcount += 1; }

                            if (bidcount > 0)
                            {
                                DiscountValue1 = Convert.ToDouble(discounthdn.Value);
                                quantity1 = (Convert.ToInt32(lot1.Value) * Convert.ToInt32(minqty.Value));
                                Bprice1 = Convert.ToDecimal(price1.Value);
                                // Bprice1 = price1.Value;

                                NetAmount1 = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price1.Value);
                                if (discounttypehdn.Value == "P")
                                    DiscountValue1 = Convert.ToDouble(price1.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                                DiscountAmount = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * DiscountValue1;
                                calNetAmount1 = Convert.ToDouble(NetAmount1 - DiscountAmount);

                                if (calNetAmount1 < 200000)
                                    discountcalAmount1 = calNetAmount1;
                                else
                                    discountcalAmount1 = NetAmount1;

                                //amount1 = quantity1 * Bprice1;
                                amount1 = Convert.ToDecimal(discountcalAmount1);
                            }
                            if (bidcount > 1)
                            {
                                DiscountValue2 = Convert.ToDouble(discounthdn.Value);
                                quantity2 = (Convert.ToInt32(lot2.Value) * Convert.ToInt32(minqty.Value));
                                Bprice2 = Convert.ToDecimal(price2.Value);

                                NetAmount2 = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price2.Value);
                                if (discounttypehdn.Value == "P")
                                    DiscountValue2 = Convert.ToDouble(price2.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                                DiscountAmount = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * DiscountValue2;
                                calNetAmount2 = Convert.ToDouble(NetAmount2 - DiscountAmount);

                                if (calNetAmount2 < 200000)
                                    discountcalAmount2 = calNetAmount2;
                                else
                                    discountcalAmount2 = NetAmount2;

                                //amount2 = quantity2 * Bprice2;
                                amount2 = Convert.ToDecimal(discountcalAmount2);
                            }
                            if (bidcount > 2)
                            {
                                DiscountValue3 = Convert.ToDouble(discounthdn.Value);
                                quantity3 = (Convert.ToInt32(lot3.Value) * Convert.ToInt32(minqty.Value));
                                Bprice3 = Convert.ToDecimal(price3.Value);

                                NetAmount3 = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price3.Value);
                                if (discounttypehdn.Value == "P")
                                    DiscountValue3 = Convert.ToDouble(price3.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                                DiscountAmount = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * DiscountValue3;
                                calNetAmount3 = Convert.ToDouble(NetAmount3 - DiscountAmount);

                                if (calNetAmount3 < 200000)
                                    discountcalAmount3 = calNetAmount3;
                                else
                                    discountcalAmount3 = NetAmount3;

                                //amount3 = quantity3 * Bprice3;
                                amount3 = Convert.ToDecimal(discountcalAmount3);
                            }
                            #endregion

                            #region eformbid
                            ApplicationBid[] NSEappbid = new ApplicationBid[bidcount];
                            if (bidcount > 0)
                            {
                                DiscountValue1 = Convert.ToDouble(discounthdn.Value);
                                NSEappbid[0] = new ApplicationBid();
                                NSEappbid[0].quantity = quantity1;
                                NSEappbid[0].atCutOff = CutoffFlag1;
                                NSEappbid[0].price = Bprice1;

                                NetAmount1 = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price1.Value);
                                if (discounttypehdn.Value == "P")
                                    DiscountValue1 = Convert.ToDouble(price1.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                                DiscountAmount = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * DiscountValue1;
                                calNetAmount1 = Convert.ToDouble(NetAmount1 - DiscountAmount);

                                if (calNetAmount1 < 200000)
                                    discountcalAmount1 = calNetAmount1;
                                else
                                    discountcalAmount1 = NetAmount1;

                                NSEappbid[0].amount = Convert.ToDecimal(discountcalAmount1);
                            }

                            if (bidcount > 1)
                            {
                                DiscountValue2 = Convert.ToDouble(discounthdn.Value);
                                NSEappbid[1] = new ApplicationBid();
                                NSEappbid[1].quantity = quantity2;
                                NSEappbid[1].atCutOff = CutoffFlag2;
                                NSEappbid[1].price = Bprice2;

                                NetAmount2 = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price2.Value);
                                if (discounttypehdn.Value == "P")
                                    DiscountValue2 = Convert.ToDouble(price2.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                                DiscountAmount = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * DiscountValue2;
                                calNetAmount2 = Convert.ToDouble(NetAmount2 - DiscountAmount);

                                if (calNetAmount2 < 200000)
                                    discountcalAmount2 = calNetAmount2;
                                else
                                    discountcalAmount2 = NetAmount2;

                                // NSEappbid[1].amount = amount2;
                                NSEappbid[1].amount = Convert.ToDecimal(discountcalAmount2);
                            }

                            if (bidcount > 2)
                            {
                                DiscountValue3 = Convert.ToDouble(discounthdn.Value);
                                NSEappbid[2] = new ApplicationBid();
                                NSEappbid[2].quantity = quantity3;
                                NSEappbid[2].atCutOff = CutoffFlag3;
                                NSEappbid[2].price = Bprice3;

                                NetAmount3 = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price3.Value);
                                if (discounttypehdn.Value == "P")
                                    DiscountValue3 = Convert.ToDouble(price3.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                                DiscountAmount = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * DiscountValue3;
                                calNetAmount3 = Convert.ToDouble(NetAmount3 - DiscountAmount);

                                if (calNetAmount3 < 200000)
                                    discountcalAmount3 = calNetAmount3;
                                else
                                    discountcalAmount3 = NetAmount3;

                                //NSEappbid[2].amount = amount3;
                                NSEappbid[2].amount = Convert.ToDecimal(discountcalAmount3);
                            }
                            #endregion
                            applicationNo NSEappno = new applicationNo();
                            NSEappno.symbol = symbol;
                            NSEappno.depository = depository;
                            NSEappno.dpId = dp1;
                            NSEappno.clientBenId = dp2;
                            NSEappno.pan = Session["Pan"].ToString().Trim();
                            NSEappno.category = CategoryName;
                            NSEappno.bankReferenceNo = "";
                            NSEappno.bankAccountNo = "";
                            NSEappno.bankNameBranch = "";
                            NSEappno.clientName = Session["ClientFname"].ToString().Trim();
                            NSEappno.clientAddress = "";
                            NSEappno.clientEmail = "";
                            NSEappno.clientTelephone = "";
                            NSEappno.formType = formType;
                            NSEappno.paymentType = "FULL";
                            NSEappno.nonASBA = false;
                            NSEappno.upiFlag = "Y";
                            NSEappno.upi = Tupiid;
                            NSEappno.bankCode = "";
                            NSEappno.locationCode = "";
                            NSEappno.syndMemCode = "";
                            NSEappno.brokerCode = "";
                            NSEappno.subBrokerCode = "";
                            NSEappno.bids = NSEappbid;

                            NSEIPO reqtoken = new NSEIPO();
                            string token = reqtoken.validtoken();

                            if (token.Contains("error") || token.Contains("login failed"))

                            {
                                string script = "alertify.alert('Login Failed');";
                                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "alertifyScript", script, true);
                                //ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "Msge", "alert('Login Failed ')", true);

                            }
                            else
                            {
                                string ReqAppjson = (new JavaScriptSerializer()).Serialize(NSEappno);
                                // string mainres = postData2NSEAPPNO(ReqAppjson, token);//eform api
                                NSEIPOAPPNo appobj = postData2NSEAPPNO(ReqAppjson, token);
                                string transrequ1 = ""; int Rescode = 0;
                                transrequ1 = appobj.result;
                                Rescode = appobj.Rescode;

                                if (Rescode == 200 && transrequ1 == "")
                                {
                                    NSEIPO reqtoken1 = new NSEIPO();
                                    //string NSEtoken1 = reqtoken1.validtoken();
                                    string NSEtoken1 = reqtoken1.GenerateToken();
                                    NSEIPOAPPNo resobj1 = postData2NSEAPPNO(ReqAppjson, NSEtoken1);

                                    transrequ1 = resobj1.result;
                                    Rescode = resobj1.Rescode;
                                }

                                if (transrequ1.Contains("reason"))
                                {
                                    EformResponse jsonmainobj1 = JsonConvert.DeserializeObject<EformResponse>(transrequ1);
                                    // AppNo = jsonmainobj1.applicationNumber.ToString().Trim();
                                    reason = jsonmainobj1.reason.ToString();
                                    AppNo = "";
                                    //if (reason.ToLower() == "market is not open")
                                    //{
                                    //    offlinemethod();
                                    //}


                                }
                                else
                                {
                                    EformResponse jsonmainobj1 = JsonConvert.DeserializeObject<EformResponse>(transrequ1);
                                    AppNo = jsonmainobj1.applicationNumber.ToString().Trim();
                                    nseapp = AppNo;
                                }
                                if (AppNo != "")
                                {
                                    #region nseapp

                                    #region Transaction bid
                                    //double maxamt1 = 0;
                                    //double maxamt2 = 0;
                                    //double maxamt3 = 0;

                                    // double dv = 0;

                                    NSEBidsReq[] NSEbidreq = new NSEBidsReq[bidcount];
                                    if (bidcount > 0)
                                    {
                                        NSEbidreq[0] = new NSEBidsReq();
                                        DiscountValue1 = Convert.ToDouble(discounthdn.Value);

                                        NSEbidreq[0].activityType = "new";
                                        NSEbidreq[0].quantity = quantity1;
                                        NSEbidreq[0].atCutOff = CutoffFlag1;
                                        NSEbidreq[0].price = Convert.ToDouble(Bprice1);

                                        // NetAmount1 = Convert.ToDouble(NSEbidreq[0].quantity * NSEbidreq[0].price);
                                        NetAmount1 = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price1.Value);
                                        if (discounttypehdn.Value == "P")
                                            DiscountValue1 = Convert.ToDouble(price1.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                                        DiscountAmount = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * DiscountValue1;
                                        calNetAmount1 = Convert.ToDouble(NetAmount1 - DiscountAmount);

                                        if (calNetAmount1 < 200000)
                                            discountcalAmount1 = calNetAmount1;
                                        else
                                            discountcalAmount1 = NetAmount1;

                                        NSEbidreq[0].amount = discountcalAmount1;
                                        NSEbidreq[0].remark = "";
                                        //maxamt1 = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price1.Value);
                                    }

                                    if (bidcount > 1)
                                    {
                                        NSEbidreq[1] = new NSEBidsReq();
                                        DiscountValue2 = Convert.ToDouble(discounthdn.Value);

                                        NSEbidreq[1].activityType = "new";
                                        NSEbidreq[1].quantity = quantity2;
                                        NSEbidreq[1].atCutOff = CutoffFlag2;
                                        NSEbidreq[1].price = Convert.ToDouble(Bprice2);

                                        //NetAmount2 = Convert.ToDouble(NSEbidreq[1].quantity * NSEbidreq[1].price);
                                        NetAmount2 = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price2.Value);
                                        if (discounttypehdn.Value == "P")
                                            DiscountValue2 = Convert.ToDouble(price2.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                                        DiscountAmount = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * DiscountValue2;
                                        calNetAmount2 = Convert.ToDouble(NetAmount2 - DiscountAmount);

                                        if (calNetAmount2 < 200000)
                                            discountcalAmount2 = calNetAmount2;
                                        else
                                            discountcalAmount2 = NetAmount2;


                                        //NSEbidreq[1].amount = NetAmount;
                                        NSEbidreq[1].amount = discountcalAmount2;
                                        NSEbidreq[1].remark = "";
                                        // maxamt2 = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price2.Value);
                                    }

                                    if (bidcount > 2)
                                    {
                                        NSEbidreq[2] = new NSEBidsReq();
                                        DiscountValue3 = Convert.ToDouble(discounthdn.Value);

                                        NSEbidreq[2].activityType = "new";
                                        NSEbidreq[2].quantity = quantity3;
                                        NSEbidreq[2].atCutOff = CutoffFlag3;
                                        NSEbidreq[2].price = Convert.ToDouble(Bprice3);

                                        //NetAmount = Convert.ToDouble(NSEbidreq[2].quantity * NSEbidreq[2].price);
                                        NetAmount3 = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price3.Value);
                                        if (discounttypehdn.Value == "P")
                                            DiscountValue3 = Convert.ToDouble(price3.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                                        DiscountAmount = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * DiscountValue3;
                                        calNetAmount3 = Convert.ToDouble(NetAmount3 - DiscountAmount);

                                        if (calNetAmount3 < 200000)
                                            discountcalAmount3 = calNetAmount3;
                                        else
                                            discountcalAmount3 = NetAmount3;

                                        //NSEbidreq[2].amount = NetAmount;
                                        NSEbidreq[2].amount = discountcalAmount3;
                                        NSEbidreq[2].remark = "";
                                        // maxamt3 = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price3.Value);
                                    }
                                    //if (maxamt1 > maxamt2 && maxamt1 > maxamt3) max = maxamt1;

                                    //else if (maxamt2 > maxamt3 && maxamt2 > maxamt1) max = maxamt2;

                                    //else if (maxamt3 > maxamt1 && maxamt3 > maxamt2) max = maxamt3;

                                    if (NetAmount1 > NetAmount2 && NetAmount1 > NetAmount3) max = NetAmount1;

                                    else if (NetAmount2 > NetAmount3 && NetAmount2 > NetAmount1) max = NetAmount2;

                                    else if (NetAmount3 > NetAmount1 && NetAmount3 > NetAmount2) max = NetAmount3;

                                    if (bidcount >= 1) BIDstatus = "Application Submited";

                                    #endregion bid
                                    NSEtransactionreq transreq = new NSEtransactionreq();
                                    transreq.symbol = symbol;
                                    transreq.applicationNumber = AppNo;
                                    transreq.category = CategoryName;
                                    transreq.clientName = Session["ClientFname"].ToString().Trim();
                                    transreq.depository = depository;
                                    transreq.dpId = dp1;
                                    transreq.clientBenId = dp2;
                                    transreq.nonASBA = false;
                                    transreq.pan = Session["Pan"].ToString().Trim();
                                    transreq.referenceNumber = ReferenceNo.ToString();
                                    transreq.allotmentMode = "demat";
                                    transreq.upiFlag = "Y";
                                    transreq.upi = Tupiid;
                                    transreq.bankCode = "";
                                    transreq.locationCode = "";
                                    transreq.timestamp = "";
                                    transreq.bids = NSEbidreq;
                                    string tranReqjson = (new JavaScriptSerializer()).Serialize(transreq);
                                    token = reqtoken.validtoken();
                                    //token error handled
                                    if (token.Contains("error") || token.Contains("login failed"))
                                    {
                                        string script = "alertify.alert('Login Failed');";
                                        ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "alertifyScript", script, true);
                                    }
                                    else
                                    {
                                        // string transrequ = postData2NSEIPOFetch(tranReqjson, token);// api-->method
                                        NSEIPOFetchRes resobj = postData2NSEIPOFetch(tranReqjson, token);

                                        string transrequ = "";
                                        transrequ = resobj.res;
                                        Rescode = resobj.Rescode;

                                        if (Rescode == 200 && transrequ == "")
                                        {
                                            NSEIPO reqtoken1 = new NSEIPO();
                                            string NSEtoken1 = reqtoken1.GenerateToken();
                                            NSEIPOFetchRes resobj1 = postData2NSEIPOFetch(tranReqjson, NSEtoken1);

                                            transrequ = resobj1.res;
                                            Rescode = resobj1.Rescode;
                                        }

                                        if (transrequ.Contains("reason"))
                                        {
                                            NSEtransactionresponse jsonmainobj1 = JsonConvert.DeserializeObject<NSEtransactionresponse>(transrequ);
                                            // AppNo = jsonmainobj1.applicationNumber.ToString().Trim();
                                            reason = jsonmainobj1.reason.ToString();

                                            if (reason.ToLower() == "market is not open")
                                            {
                                                offlinemethod();
                                            }
                                        }

                                        //else
                                        //{ 
                                        NSEtransactionresponse jsonmainobj = JsonConvert.DeserializeObject<NSEtransactionresponse>(transrequ);
                                        status = jsonmainobj.status;
                                        //}
                                        if (status == "success")
                                        {
                                            #region Transaction SUCCESS
                                            string dpVerStatusFlag = jsonmainobj.dpVerStatusFlag;
                                            string TraBidId1 = null; string TraBidId2 = null; string TraBidId3 = null;

                                            string sqlBidD = null, Trabidstatus1 = null; string Trabidstatus2 = null; string Trabidstatus3 = null, TraactivityType1 = null; string TraactivityType2 = null; string TraactivityType3 = null;

                                            bool Tracutoff1 = false; bool Tracutoff2 = false; bool Tracutoff3 = false;
                                            decimal Traamount1 = 0; decimal Traamount2 = 0; decimal Traamount3 = 0, Traprice1 = 0, Traprice2 = 0, Traprice3 = 0;
                                            int Traquantity1 = 0; int Traquantity2 = 0; int Traquantity3 = 0;
                                            bool BidStatusFlag1 = false, BidStatusFlag2 = false, BidStatusFlag3 = false;
                                            if (jsonmainobj.bids.Length > 0)
                                            {
                                                for (int i = 0; i < jsonmainobj.bids.Length; i++)
                                                {
                                                    if (jsonmainobj.bids[i].status.ToString() == "success")
                                                    {


                                                        if (i == 0)
                                                        {
                                                            Tracutoff1 = jsonmainobj.bids[0].atCutOff;
                                                            Traamount1 = jsonmainobj.bids[0].amount;
                                                            Traquantity1 = jsonmainobj.bids[0].quantity;
                                                            Traprice1 = jsonmainobj.bids[0].price;
                                                            TraBidId1 = jsonmainobj.bids[0].bidReferenceNumber;
                                                            Trabidstatus1 = jsonmainobj.bids[0].status;
                                                            TraactivityType1 = jsonmainobj.bids[0].activityType;

                                                            BidStatusFlag1 = true;
                                                        }
                                                        else if (i == 1)
                                                        {
                                                            Tracutoff2 = jsonmainobj.bids[1].atCutOff;
                                                            Traamount2 = jsonmainobj.bids[1].amount;
                                                            Traquantity2 = jsonmainobj.bids[1].quantity;
                                                            Traprice2 = jsonmainobj.bids[1].price;
                                                            TraBidId2 = jsonmainobj.bids[1].bidReferenceNumber;
                                                            Trabidstatus2 = jsonmainobj.bids[1].status;
                                                            TraactivityType2 = jsonmainobj.bids[1].activityType;
                                                            BidStatusFlag2 = true;
                                                        }
                                                        else if (i == 2)
                                                        {
                                                            Tracutoff3 = jsonmainobj.bids[2].atCutOff;
                                                            Traamount3 = jsonmainobj.bids[2].amount;
                                                            Traquantity3 = jsonmainobj.bids[2].quantity;
                                                            Traprice3 = jsonmainobj.bids[2].price;
                                                            TraBidId3 = jsonmainobj.bids[2].bidReferenceNumber;
                                                            Trabidstatus3 = jsonmainobj.bids[2].status;
                                                            TraactivityType3 = jsonmainobj.bids[2].activityType;
                                                            BidStatusFlag3 = true;
                                                        }
                                                    }
                                                }
                                                //query

                                                int Cutoffflag1 = 0, Cutoffflag2 = 0, Cutoffflag3 = 0;
                                                Cutoffflag1 = Convert.ToInt16(cutoff1.Checked == true ? 1 : 0);
                                                Cutoffflag2 = Convert.ToInt16(cutoff2.Checked == true ? 1 : 0);
                                                Cutoffflag3 = Convert.ToInt16(cutoff3.Checked == true ? 1 : 0);
                                                //SqlParameter[] param1 = { new SqlParameter("@clcode", clcode) };
                                                SqlParameter[] param1 = { new SqlParameter("@clcode", clcode),
                                                           new SqlParameter("@symbol", symbol),
                                                          new SqlParameter("@AppNo", AppNo) ,
                                                          new SqlParameter("@categoryhdn", CategoryName) ,
                                                           new SqlParameter("@ReferenceNo", ReferenceNo),
                                                          new SqlParameter("@ClientFname", Session["ClientFname"].ToString()) ,
                                                          new SqlParameter("@depository", depository) ,
                                                           new SqlParameter("@dp1", dp1),

                                                          new SqlParameter("@dp2", dp2) ,
                                                           new SqlParameter("@Traquantity1", Traquantity1),
                                                          new SqlParameter("@Cutoffflag1", Cutoffflag1) ,
                                                          //new SqlParameter("@Traprice1", Traprice1) ,
                                                              new SqlParameter("@Traprice1", Bprice1) ,
                                                           new SqlParameter("@max", max),

                                                          new SqlParameter("@Traamount1", Traamount1) ,
                                                          new SqlParameter("@ChqRecFlag",  ChqRecFlag) ,
                                                           new SqlParameter("@Pan",  Session["Pan"].ToString()) ,
                                                           new SqlParameter("@BankName",  BankName.ToString()),
                                                              new SqlParameter("@Location",  Location.ToString()),
                                                                  new SqlParameter("@AccNo",  AccNo.ToString()),
                                                                       new SqlParameter("@TraBidId1",  TraBidId1),
                                                                        new SqlParameter("@Trabidstatus1",  Trabidstatus1),
                                                                         new SqlParameter("@Traquantity2",  Traquantity2),
                                                                         new SqlParameter("@Cutoffflag2",  Cutoffflag2),
                                                                       //new SqlParameter("@Traprice2 ",Traprice2 ),
                                                                        new SqlParameter("@Traprice2 ",Bprice2 ),
                                                                      new SqlParameter("@Traamount2", Traamount2),
                                                                            new SqlParameter("@TraBidId2", TraBidId2),
                                                                             new SqlParameter("@Trabidstatus2", Trabidstatus2),
                                                                               new SqlParameter("@Traquantity3", Traquantity3),
                                                                               new SqlParameter("@Cutoffflag3", Cutoffflag3),
                                                                                  //new SqlParameter("@Traprice3", Traprice3),
                                                                                      new SqlParameter("@Traprice3", Bprice3),
                                                                                      new SqlParameter("@Traamount3", Traamount3),
                                                                                        new SqlParameter("@TraBidId3", TraBidId3),
                                                                                              new SqlParameter("@Trabidstatus3", Trabidstatus3),

                                                          new SqlParameter("@issuefromdatehdn", issuefromdatehdn.Value),
                                                                 new SqlParameter("@issuetodatehdn", issuetodatehdn.Value),
                                                                 new SqlParameter("@issuefromtimehdn", issuefromtimehdn.Value),
                                                                    new SqlParameter("@issuetotimehdn", issuetotimehdn.Value),
                                                                        new SqlParameter("@minprice", minprice.Value),
                                                                          new SqlParameter("@maxprice", maxprice.Value),
                                                            new SqlParameter("@minprice1", Convert.ToInt32(minqty.Value)),
                                                             new SqlParameter("@ticksizehdn", ticksizehdn.Value),
                                                                   new SqlParameter("@discounthdn", discounthdn.Value),
                                                                new SqlParameter("@PlacedBy", PlacedBy),
                                                                new SqlParameter("@OrderedBY", OrderedBY),
                                          };




                                                if (BidStatusFlag1 == true && BidStatusFlag2 == true && BidStatusFlag3 == true)
                                                {
                                                    sqlBidD = "insert into IPOBidFileDetailsNew(IPO_Code,Symbol,ApplicationNo,Category,OrderNo,ApplicantName,Depository,DpID,ClientId,Quantity,CutOffFlag,Rate,Amt_Payable,Amt_Payable1,chqRecFlag,chqAmount,ChqNo,PanNo,BankName,Location,AccNo,BidId,ActionCode,BidStatus1,Status,App_Date,OptQty2,OptCutOff2,OptPrice2,Amt_Payable2,BidID2,ActionCode2,BidStatus2,OptQty3,OptCutOff3,OptPrice3,Amt_Payable3,BidID3,ActionCode3,BidStatus3,Address,Email,Contact,BidType,SyndMem_Code,BrokCode,SubBrokCode,Referencefield,uccId,BankId,Bankbranch,IFSC,repartype,IssueStartDate,IssueEndDate,IssueStartTime,IssueEndTime,MinPrice,MaxPrice,MinBidQty,TickSize,Discount,PlacedBy,OrderedBy,Exchange)";
                                                    // sqlBidD += " values ('','" + symbolhdn.Value + "','" + AppNo + "','" + categoryhdn.Value + "','" + ReferenceNo + "','" + Session["ClientFname"].ToString() + "','" + depository + "','" + dp1 + "','" + dp2 + "','" + Traquantity1 + "','" + Cutoffflag1 + "','" + Traprice1 + "','" + max + "','" + Traamount1 + "','" + ChqRecFlag + "','" + Traamount1 + "','0','" + Session["Pan"].ToString() + "','" + BankName.ToString() + "','" + Location.ToString() + "','" + AccNo.ToString() + "','" + TraBidId1 + "','new','" + Trabidstatus1 + "','Application Submited',getdate(),'" + Traquantity2 + "','" + Cutoffflag2 + "','" + Traprice2 + "','" + Traamount2 + "','" + TraBidId2 + "','new','" + Trabidstatus2 + "','" + Traquantity3 + "','" + Cutoffflag3 + "','" + Traprice3 + "','" + Traamount3 + "','" + TraBidId3 + "','new','" + Trabidstatus3 + "','','','','2','','IBNSUAT','','CHECKER','" + clcode + "','','','','NR','" + issuefromdatehdn.Value + "','" + issuetodatehdn.Value + "','" + issuefromtimehdn.Value + "','" + issuetotimehdn.Value + "','" + minprice.Value + "','" + maxprice.Value + "'," + Convert.ToInt32(minprice.Value) + ",'" + ticksizehdn.Value + "','" + discounthdn.Value + "','" + PlacedBy + "','" + OrderedBY + "','NSE')";
                                                    sqlBidD += " values ('',@symbol,@AppNo,@categoryhdn,@ReferenceNo,@ClientFname,@depository,@dp1,@dp2,@Traquantity1,@Cutoffflag1,@Traprice1,@max,@Traamount1,@ChqRecFlag,@max,'0',@Pan,@BankName,@Location,@AccNo,@TraBidId1,'new',@Trabidstatus1,'Application Submited',getdate(),@Traquantity2,@Cutoffflag2,@Traprice2,@Traamount2,@TraBidId2,'new',@Trabidstatus2,@Traquantity3,@Cutoffflag3,@Traprice3,@Traamount3,@TraBidId3,'new',@Trabidstatus3,'','','','2','','IBNSUAT','','CHECKER',@clcode,'','','','NR',@issuefromdatehdn,@issuetodatehdn,@issuefromtimehdn,@issuetotimehdn,@minprice,@maxprice,@minprice1,@ticksizehdn,@discounthdn,@PlacedBy,@OrderedBY,'NSE')";

                                                }
                                                else if (BidStatusFlag1 == true && BidStatusFlag2 == true)
                                                {
                                                    sqlBidD = "insert into IPOBidFileDetailsNew(IPO_Code,Symbol,ApplicationNo,Category,OrderNo,ApplicantName,Depository,DpID,ClientId,Quantity,CutOffFlag,Rate,Amt_Payable,Amt_Payable1,chqRecFlag,chqAmount,ChqNo,PanNo,BankName,Location,AccNo,BidId,ActionCode,BidStatus1,Status,App_Date,OptQty2,OptCutOff2,OptPrice2,Amt_Payable2,BidID2,ActionCode2,BidStatus2,Address,Email,Contact,BidType,SyndMem_Code,BrokCode,SubBrokCode,Referencefield,uccId,BankId,Bankbranch,IFSC,repartype,IssueStartDate,IssueEndDate,IssueStartTime,IssueEndTime,MinPrice,MaxPrice,MinBidQty,TickSize,Discount,PlacedBy,OrderedBy,Exchange)";
                                                    //sqlBidD += " values ('','" + symbolhdn.Value + "','" + AppNo + "','" + categoryhdn.Value + "','" + ReferenceNo + "','" + Session["ClientFname"].ToString() + "','" + depository + "','" + dp1 + "','" + dp2 + "','" + Traquantity1 + "','" + Cutoffflag1 + "','" + Traprice1 + "','" + Traamount1 + "','" + ChqRecFlag + "','" + max + "','" + Traamount1 + "','0','" + Session["Pan"].ToString() + "','" + BankName.ToString() + "','" + Location.ToString() + "','" + AccNo.ToString() + "','" + TraBidId1 + "','new','" + Trabidstatus1 + "','Application Submited',getdate(),'" + Traquantity2 + "','" + Cutoffflag2 + "','" + Traprice2 + "','" + Traamount2 + "','" + TraBidId2 + "','new','" + Trabidstatus2 + "','','','','2','','IBNSUAT','','CHECKER','" + clcode + "','','','','NR','" + issuefromdatehdn.Value + "','" + issuetodatehdn.Value + "','" + issuefromtimehdn.Value + "','" + issuetotimehdn.Value + "','" + minprice.Value + "','" + maxprice.Value + "'," + Convert.ToInt32(minqty.Value) + ",'" + ticksizehdn.Value + "','" + discounthdn.Value + "','" + PlacedBy + "','" + OrderedBY + "','NSE')";
                                                    sqlBidD += " values ('',@symbol,@AppNo,@categoryhdn,@ReferenceNo,@ClientFname,@depository,@dp1,@dp2,@Traquantity1,@Cutoffflag1,@Traprice1,@max,@Traamount1,@ChqRecFlag,@max,'0',@Pan,@BankName,@Location,@AccNo,@TraBidId1,'new',@Trabidstatus1,'Application Submited',getdate(),@Traquantity2,@Cutoffflag2,@Traprice2,@Traamount2,@TraBidId2,'new',@Trabidstatus2,'','','','2','','IBNSUAT','','CHECKER',@clcode,'','','','NR',@issuefromdatehdn,@issuetodatehdn,@issuefromtimehdn,@issuetotimehdn,@minprice,@maxprice,@minprice1,@ticksizehdn,@discounthdn,@PlacedBy,@OrderedBY,'NSE')";

                                                }
                                                else
                                                {
                                                    //completed
                                                    sqlBidD = "insert into IPOBidFileDetailsNew(IPO_Code,Symbol,ApplicationNo,Category,OrderNo,ApplicantName,Depository,DpID,ClientId,Quantity,CutOffFlag,Rate,Amt_Payable,Amt_Payable1,chqRecFlag,chqAmount,ChqNo,PanNo,BankName,Location,AccNo,BidId,ActionCode,BidStatus1,Status,App_Date,Address,Email,Contact,BidType,SyndMem_Code,BrokCode,SubBrokCode,Referencefield,uccId,BankId,Bankbranch,IFSC,repartype,IssueStartDate,IssueEndDate,IssueStartTime,IssueEndTime,MinPrice,MaxPrice,MinBidQty,TickSize,Discount,PlacedBy,orderedby,Exchange)";
                                                    // sqlBidD += " values ('','" + symbolhdn.Value + "','" + AppNo + "','" + categoryhdn.Value + "','" + ReferenceNo + "','" + Session["ClientFname"].ToString() + "','" + depository + "','" + dp1 + "','" + dp2 + "','" + Traquantity1 + "','" + Cutoffflag1 + "','" + Traprice1 + "','" + max + "','" + Traamount1 + "','" + ChqRecFlag + "','" + Traamount1 + "','0','" + Session["Pan"].ToString() + "','" + BankName.ToString() + "','" + Location.ToString() + "','" + AccNo.ToString() + "','" + TraBidId1 + "','new','" + Trabidstatus1 + "','Application Submited',getdate(),'','','','2','','IBNSUAT','','CHECKER','" + clcode + "','','','','NR','" + issuefromdatehdn.Value + "','" + issuetodatehdn.Value + "','" + issuefromtimehdn.Value + "','" + issuetotimehdn.Value + "','" + minprice.Value + "','" + maxprice.Value + "'," + Convert.ToInt32(minqty.Value) + ",'" + ticksizehdn.Value + "','" + discounthdn.Value + "','" + PlacedBy + "','" + OrderedBY + "','NSE')";
                                                    sqlBidD += " values ('',@symbol,@AppNo,@categoryhdn,@ReferenceNo,@ClientFname,@depository,@dp1,@dp2,@Traquantity1,@Cutoffflag1,@Traprice1,@max,@Traamount1,@ChqRecFlag,@max,'0',@Pan,@BankName,@Location,@AccNo,@TraBidId1,'new',@Trabidstatus1,'Application Submited',getdate(),'','','','2','','IBNSUAT','','CHECKER',@clcode,'','','','NR',@issuefromdatehdn,@issuetodatehdn,@issuefromtimehdn,@issuetotimehdn,@minprice,@maxprice,@minprice1,@ticksizehdn,@discounthdn,@PlacedBy,@OrderedBY,'NSE')";

                                                }

                                                BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("Apply the IPO in online mode for NSE(insert into IPOBidFileDetailsNew Table): " + sqlBidD);
                                                BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("IPO order Placed successfully for NSE");
                                                //SqlHelper.ExecuteNonQuery(sqlcon, CommandType.Text, sqlBidD, param1);
                                                SqlHelper.ExecuteNonQuery(sqlcon, CommandType.Text, sqlBidD, param1);

                                                ScriptManager.RegisterStartupScript(this, this.GetType(), "success", "orderplace();", true);
                                                //ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('IPO order Placed successfully');", true);
                                            }
                                            else
                                            {
                                                BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("Transaction Added Error:bids.Length < 0: " + sqlBidD);
                                                string script = "alertify.alert('Please contact to administrator');";
                                                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "alertifyScript", script, true);
                                                //ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('Please contact to administrator');", true);
                                            }
                                            #endregion
                                        }
                                        else if (reason.ToLower() == "market is not open")
                                        {

                                            // string script = "alertify.alert('Your BID is being Processed,Order will place when IPO market is open!!');window.location='/orders.aspx';";
                                            BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText(" Applied the IPO in Offline for NSE Query(reason :market is not open) : ");

                                            ScriptManager.RegisterStartupScript(this, this.GetType(), "success", "nseoffline();", true);

                                            // ScriptManager.RegisterStartupScript(this, GetType(), "alertifyScript", "alertify.alert('Your message');window.location='/orders.aspx';", true);
                                            // ScriptManager.RegisterStartupScript(this, this.GetType(), "alertifyScript", "alertify.alert('Your BID is being Processed,Order will place when IPO market is open!!');window.location='/orders.aspx';", true);
                                        }
                                        else
                                        {
                                            #region transaction cancelled

                                            BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("Transaction Added Error Status: " + status);
                                            //ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('failed to apply');", true);

                                            string script = "alertify.alert('" + reason.ToString() + "');";
                                           ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "alertifyScript", script, true);
                                            //ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('" + reason.ToString() + "');", true);
                                            #endregion
                                        }
                                    }
                                    #endregion nseappno
                                }
                                else
                                {
                                    // reason = transrequ1.ToString();
                                    BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("Application Number is Empty: " + AppNo);
                                    string script = "alertify.alert('" + reason.ToString() + "');";
                                 ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "alertifyScript", script, true);


                                   
                                    //ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('" + reason.ToString() + "');", true);
                                }

                            }
                            #endregion
                        }
                        #endregion
                    }
                    else  //bse
                    {
                        #region BSE FLOW
                        SqlParameter[] param1 = { new SqlParameter("@clcode", clcode),
                        new SqlParameter("@symbolhdn", symbolhdn.Value),
                        new SqlParameter("@categoryhdn", categoryhdn.Value)};

                        //string sqlExist = "select * from (select Symbol,upistatus,status from IPObidfiledetailsNew  where Exchange='BSE' and uccId='" + clcode + "' and Symbol='" + symbolhdn.Value + "' and Category='" + categoryhdn.Value + "')a left join  UpiSatus_Master c on a.upistatus = c.Description where a.Status not in ('Cancelled','Rejected') and  c.status !='rejected'";
                        string sqlExist = "select * from (select Symbol,upistatus,status from IPObidfiledetailsNew  where Exchange='BSE' and uccId=@clcode and Symbol=@symbolhdn and Category=@categoryhdn)a left join  UpiSatus_Master c on a.upistatus = c.Description where a.Status not in ('Cancelled','Rejected') and  ( c.status !='rejected' or c.status is null)";
                        BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("Apply the IPO for BSE: " + sqlExist);
                        DataSet dsExist = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, sqlExist, param1);
                        // DataSet dsExist = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, sqlExist);
                        if (dsExist != null && dsExist.Tables[0].Rows.Count > 0)
                        {
                            BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("You have already applied for this BSE IPO: " + sqlExist);
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "success", "alreadyapplied();", true);
                            //ScriptManager.RegisterStartupScript(this, this.GetType(), "success", "alert('You have already applied for this IPO.');window.location='/ipo.aspx';", true);
                        }
                        else if (validateoffline())
                        {
                            #region offlinevalidation
                            //string sqlExistoff = "select * from IPOBidFileDetailsOffline where Exchange='BSE' and uccId='" + clcode + "' and Symbol='" + symbolhdn.Value + "' and Category='" + categoryhdn.Value + "' and Status='pending' ";
                            string sqlExistoff = "select * from IPOBidFileDetailsOffline where exchange='BSE' and uccId=@clcode and Symbol=@symbolhdn and Category=@categoryhdn and Status='pending' ";
                            BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText(" Apply the IPO in Offline for BSE Query : " + sqlExistoff);
                            DataSet dsExistoff = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, sqlExistoff, param1);
                            // DataSet dsExistoff = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, sqlExistoff);
                            if (dsExistoff != null && dsExistoff.Tables[0].Rows.Count > 0)
                            {
                                BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("You have already applied for this IPO in offline mode for BSE: " + sqlExistoff);
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "success", "offlinealreadyapplied();", true);


                                //ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('You have already applied for this IPO in offline mode.');window.location='/orders.aspx';", true);
   }
                            #region
                            else
                            {
                                int CutoffFlag, CutoffFlag2, CutoffFlag3;
                                CutoffFlag = cutoff1.Checked == true ? 1 : 0;
                                CutoffFlag2 = cutoff2.Checked == true ? 1 : 0;
                                CutoffFlag3 = cutoff3.Checked == true ? 1 : 0;

                                string ChqRecFlag = "";
                                if (CutoffFlag == 1 || CutoffFlag2 == 1 || CutoffFlag3 == 1)
                                {
                                    ChqRecFlag = "N";
                                }
                                else
                                {
                                    ChqRecFlag = "Y";
                                }

                                string depository = Session["Depository"].ToString();
                                string OrderedBY = Session["OrderedBY"].ToString();
                                string PlacedBy = Session["PlacedBY"].ToString();

                                string dp1 = "";
                                string dp2 = "";
                                if (depository == "CDSL")
                                {
                                    dp1 = "0";
                                    dp2 = DPId;
                                }
                                else if (depository == "NSDL")
                                {
                                    dp1 = DPId.Substring(0, 8);
                                    dp2 = DPId.Substring(8, 8);
                                }

                                string ReqJson = "";
                                Session["BankName"] = "8888".ToString().PadRight(6);
                                Session["Location"] = "UPIIDL".ToString().PadRight(6);
                                string accntpayer = txtupiid.Value.Trim();
                                Session["AccNo"] = accntpayer.Trim();
                                string bidjson = "";
                                double opt1 = 0;
                                double opt2 = 0;
                                double opt3 = 0;
                                double max = 0;
                                double dv = 0;
                                double disvalue1 = Convert.ToDouble(discounthdn.Value);
                                double disvalue2 = Convert.ToDouble(discounthdn.Value);
                                double disvalue3 = Convert.ToDouble(discounthdn.Value);
                                string symbol = symbolhdn.Value; string category = categoryhdn.Value;
                                if (lot1.Value != "" && price1.Value != "")
                                {
                                    bidjson += "{\"bidid\":\"\",\"quantity\":\"" + (Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value)).ToString() + "\",\"rate\":\"" + price1.Value + "\",\"cuttoffflag\":\"" + CutoffFlag.ToString() + "\",\"orderno\":\"YYYY\",\"actioncode\":\"N\"},";
                                    opt1 = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price1.Value);
                                    if (discounttypehdn.Value == "3")
                                    {
                                        disvalue1 = Convert.ToDouble(price1.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);
                                    }
                                }
                                if (lot2.Value != "" && price2.Value != "")
                                {
                                    bidjson += "{\"bidid\":\"\",\"quantity\":\"" + (Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value)).ToString() + "\",\"rate\":\"" + price2.Value + "\",\"cuttoffflag\":\"" + CutoffFlag2.ToString() + "\",\"orderno\":\"YYYY\",\"actioncode\":\"N\"},";
                                    opt2 = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price2.Value);
                                    if (discounttypehdn.Value == "3")
                                    {
                                        disvalue2 = Convert.ToDouble(price2.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);
                                    }
                                }
                                if (lot3.Value != "" && price3.Value != "")
                                {
                                    bidjson += "{\"bidid\":\"\",\"quantity\":\"" + (Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value)).ToString() + "\",\"rate\":\"" + price3.Value + "\",\"cuttoffflag\":\"" + CutoffFlag3.ToString() + "\",\"orderno\":\"YYYY\",\"actioncode\":\"N\"},";
                                    opt3 = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price3.Value);
                                    if (discounttypehdn.Value == "3")
                                    {
                                        disvalue3 = Convert.ToDouble(price3.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);
                                    }
                                }
                                //max = Math.Max(opt1, opt2, opt3);
                                if (opt1 > opt2 && opt1 > opt3)
                                {
                                    max = opt1;
                                    //dv = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(discounthdn.Value);
                                    dv = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * disvalue1;
                                }
                                else if (opt2 > opt3 && opt2 > opt1)
                                {
                                    max = opt2;
                                    //dv = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(discounthdn.Value);
                                    dv = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * disvalue2;
                                }
                                else if (opt3 > opt1 && opt3 > opt2)
                                {
                                    max = opt3;
                                    //dv = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(discounthdn.Value);
                                    dv = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * disvalue3;
                                }
                                string totamt = "";
                                Decimal totamtcal = Convert.ToDecimal(max - dv);

                                if (totamtcal < 200000)
                                {
                                    totamt = totamtcal.ToString();

                                }
                                else
                                {
                                    totamt = max.ToString();
                                }

                                bidjson = bidjson.TrimEnd(',');

                                //string reqmanjson = "{\"scripid\":\"" + BSECode + "\",\"applicationno\":\"" + AppNo + "\",\"category\":\"" + Category + "\",\"applicantname\":\"" + Session["ClientFname"].ToString().Trim() + "\",\"depository\":\"" + depository + "\",\"dpid\":\"0\",\"clientbenfid\":\"" + DPId.ToString() + "\",\"chequereceivedflag\":\"" + ChqRecFlag + "\",\"chequeamount\":\"" + TxtTot.Text + "\",\"panno\":\"" + Session["Pan"].ToString() + "\",\"bankname\":\"" + Session["BankName"].ToString().Trim() + "\",\"location\":\"" + Session["Location"].ToString().Trim() + "\",\"accountnumber_upiid\":\"" + Session["AccNo"].ToString().Trim() + "\",\"ifsccode\":\"\",\"referenceno\":\"\",\"asba_upiid\":\"1\",\"bids\":[{\"bidid\":\"\",\"quantity\":\"" + TxtQt1.Text + "\",\"rate\":\"760\",\"cuttoffflag\":\"" + CutoffFlag.ToString() + "\",\"orderno\":\"" + OrderNo.ToString() + "\",\"actioncode\":\"N\"},{\"bidid\":\"\",\"quantity\":\"38\",\"rate\":\"770\",\"cuttoffflag\":\"" + CutoffFlag.ToString() + "\",\"orderno\":\""+OrderNo.ToString()+"\",\"actioncode\":\"N\"},{\"bidid\":\"\",\"quantity\":\"57\",\"rate\":\"780\",\"cuttoffflag\":\"" + CutoffFlag.ToString() + "\",\"orderno\":\""+OrderNo.ToString()+"\",\"actioncode\":\"N\"}]}";
                                //string reqmanjson = "{\"scripid\":\"" + BSECode + "\",\"applicationno\":\"" + AppNo + "\",\"category\":\"" + Category + "\",\"applicantname\":\"" + Session["ClientFname"].ToString().Trim() + "\",\"depository\":\"" + depository + "\",\"dpid\":\"0\",\"clientbenfid\":\"" + DPId.ToString() + "\",\"chequereceivedflag\":\"" + ChqRecFlag + "\",\"chequeamount\":\"" + TxtTot.Text + "\",\"panno\":\"" + Session["Pan"].ToString() + "\",\"bankname\":\"" + Session["BankName"].ToString().Trim() + "\",\"location\":\"" + Session["Location"].ToString().Trim() + "\",\"accountnumber_upiid\":\"" + Session["AccNo"].ToString().Trim() + "\",\"ifsccode\":\"\",\"referenceno\":\"\",\"asba_upiid\":\"1\",\"bids\":[{\"bidid\":\"\",\"quantity\":\"" + TxtQt1.Text + "\",\"rate\":\""+TxtPr1.Text+"\",\"cuttoffflag\":\"" + CutoffFlag.ToString() + "\",\"orderno\":\"" + OrderNo.ToString() + "\",\"actioncode\":\"N\"}]}";
                                //string reqmanjson = "{\"scripid\":\"" + BSECode + "\",\"applicationno\":\"" + AppNo + "\",\"category\":\"" + Category + "\",\"applicantname\":\"" + Session["ClientFname"].ToString().Trim() + "\",\"depository\":\"" + depository + "\",\"dpid\":\"0\",\"clientbenfid\":\"" + DPId.ToString() + "\",\"chequereceivedflag\":\"" + ChqRecFlag + "\",\"chequeamount\":\"" + totamt + "\",\"panno\":\"" + Session["Pan"].ToString() + "\",\"bankname\":\"" + Session["BankName"].ToString().Trim() + "\",\"location\":\"" + Session["Location"].ToString().Trim() + "\",\"accountnumber_upiid\":\"" + Session["AccNo"].ToString().Trim() + "\",\"ifsccode\":\"\",\"referenceno\":\"\",\"asba_upiid\":\"1\",\"bids\":["+bidjson+"]}";
                                ReqJson = "{\"scripid\":\"" + symbolhdn.Value + "\",\"applicationno\":\"XXXXX\",\"category\":\"" + categoryhdn.Value + "\",\"applicantname\":\"" + Session["ClientFname"].ToString().Trim() + "\",\"depository\":\"" + depository + "\",\"dpid\":\"" + dp1 + "\",\"clientbenfid\":\"" + dp2 + "\",\"chequereceivedflag\":\"" + ChqRecFlag + "\",\"chequeamount\":\"" + totamt + "\",\"panno\":\"" + Session["Pan"].ToString() + "\",\"bankname\":\"" + Session["BankName"].ToString().Trim() + "\",\"location\":\"" + Session["Location"].ToString().Trim() + "\",\"accountnumber_upiid\":\"" + Session["AccNo"].ToString().Trim() + "\",\"ifsccode\":\"\",\"referenceno\":\"\",\"asba_upiid\":\"1\",\"bids\":[" + bidjson + "]}";

                                //string ReqJson = ""
                                string insertqry = "insert into IPOBidFileDetailsOffline(ReqJson,status,Symbol,Category,ApplicantName,Depository,DpID,ClientId,Quantity,CutOffFlag,Rate,Amt_Payable,chqRecFlag,PanNo,BankName,Location,AccNo,App_Date,OptQty2,OptPrice2,OptCutOff2,OptQty3,OptPrice3,OptCutOff3,SyndMem_Code,SubBrokCode,uccId,IssueStartDate,IssueEndDate,IssueStartTime,IssueEndTime,MinPrice,MaxPrice,MinBidQty,TickSize,Discount,PlacedBy,OrderedBy,exchange)";
                                string qty3 = lot3.Value != "" ? (Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value)).ToString() : "";
                                string qty2 = lot2.Value != "" ? (Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value)).ToString() : "";
                                //insertqry += " values ('" + ReqJson + "','pending','" + symbolhdn.Value + "','" + categoryhdn.Value + "','" + Session["ClientFname"].ToString() + "','" + Session["Depository"].ToString() + "','" + dp1 + "','" + dp2 + "','" + (Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value)).ToString() + "','" + CutoffFlag + "','" + price1.Value + "','" + totamt + "','" + ChqRecFlag + "','" + Session["Pan"].ToString() + "','" + Session["BankName"].ToString() + "','" + Session["Location"].ToString() + "','" + Session["AccNo"].ToString() + "',getdate(),'" + qty2 + "','" + price3.Value + "','" + CutoffFlag2 + "','" + qty3 + "','" + price3.Value + "','" + CutoffFlag3 + "',null,null,'" + clcode + "','" + issuefromdatehdn.Value + "','" + issuetodatehdn.Value + "','" + issuefromtimehdn.Value + "','" + issuetotimehdn.Value + "','" + minprice.Value + "','" + maxprice.Value + "'," + Convert.ToInt32(minqty.Value) + ",'" + ticksizehdn.Value + "','" + discounthdn.Value + "','" + Session["PlacedBY"].ToString() + "','" + Session["OrderedBY"].ToString() + "','BSE')";
                                insertqry += " values (@ReqJson,'pending',@symbolhdn,@categoryhdn,@ClientFname,@Depository,@dp1,@dp2,@lotmin,@CutoffFlag,@price1,@totamt,@ChqRecFlag,@Pan,@BankName,@Location,@AccNo,getdate(),@qty2,@price3,@CutoffFlag2,@qty3,@price33,@CutoffFlag3,null,null,@clcode,@issuefromdatehdn,@issuetodatehdn,@issuefromtimehdn,@issuetotimehdn,@minprice,@maxprice,@minqtyss,@ticksizehdn,@discounthdn,@PlacedBY,@OrderedBY,'BSE')";
                                SqlParameter[] param2 = { new SqlParameter("@clcode", clcode),
                                new SqlParameter("@ReqJson", ReqJson),
                                 new SqlParameter("@symbolhdn", symbol),
                                 new SqlParameter("@categoryhdn", category),
                                 new SqlParameter("@ClientFname", Session["ClientFname"].ToString()),
                                 new SqlParameter("@Depository",Session["Depository"].ToString()),
                                 new SqlParameter("@dp1",dp1),
                                 new SqlParameter("@dp2",dp2),
                                 new SqlParameter("@lotmin",(Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value)).ToString()),
                                   new SqlParameter("@CutoffFlag",CutoffFlag),
                                     new SqlParameter("@price1",price1.Value),
                                       new SqlParameter("@totamt",totamt),
                                        new SqlParameter("@ChqRecFlag",ChqRecFlag),
                                        new SqlParameter("@Pan",Session["Pan"].ToString()),
                                         new SqlParameter("@BankName",Session["BankName"].ToString()),
                                  new SqlParameter("@Location",Session["Location"].ToString()),
                                new SqlParameter("@AccNo",Session["AccNo"].ToString()),
                                   new SqlParameter("@qty2",qty2),
                                        new SqlParameter("@price3",price2.Value),
 new SqlParameter("@CutoffFlag2",CutoffFlag2),
  new SqlParameter("@qty3",qty3),
    new SqlParameter("@price33",price3.Value),
        new SqlParameter("@CutoffFlag3",CutoffFlag3),
                new SqlParameter("@issuefromdatehdn",issuefromdatehdn.Value),
                                new SqlParameter("@issuetodatehdn", issuetodatehdn.Value),
                                  new SqlParameter("@issuefromtimehdn", issuefromtimehdn.Value),
                                      new SqlParameter("@issuetotimehdn", issuetotimehdn.Value),
                                         new SqlParameter("@minprice", minprice.Value),
                                           new SqlParameter("@maxprice",maxprice.Value),
                                                     new SqlParameter("@minqtyss",Convert.ToInt32(minqty.Value)),
                                                         new SqlParameter("@ticksizehdn",ticksizehdn.Value),
                                                               new SqlParameter("@discounthdn",discounthdn.Value),
                                       new SqlParameter("@PlacedBY",Session["PlacedBY"].ToString()),
                                                                new SqlParameter("@OrderedBY",Session["OrderedBY"].ToString()),
                                };
                                BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText(" Applied the IPO in Offline for BSE Query : " + insertqry);
                                BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("Your BID is being Processed,We will place the order on next working day!!");
                                SqlHelper.ExecuteNonQuery(sqlcon, CommandType.Text, insertqry, param2);
                                //SqlHelper.ExecuteNonQuery(sqlcon, CommandType.Text, insertqry);


                                // ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('Your BID is being Processed,We will place the order on next working day!!');window.location='/orders.aspx';", true);

                                // ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('Your BID is being Processed,Order will place when IPO market is open!!');window.location='/orders.aspx';", true);
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "success", "nseoffline();", true);
                            }
                            #endregion
                            #endregion
                        }
                        else
                        {

                            #region BSE online
                            string message = "", errormes = "";
                            IPOAppno ipoapp = new IPOAppno();
                            bidreqApp bidapp = new bidreqApp();
                            string WSEmail = "", WSMobile = "", Address = "";
                            int CutoffFlag, CutoffFlag2, CutoffFlag3;
                            CutoffFlag = cutoff1.Checked == true ? 1 : 0;
                            CutoffFlag2 = cutoff2.Checked == true ? 1 : 0;
                            CutoffFlag3 = cutoff3.Checked == true ? 1 : 0;

                            string ChqRecFlag = "";
                            if (CutoffFlag == 1 || CutoffFlag2 == 1 || CutoffFlag3 == 1)
                            {
                                ChqRecFlag = "N";
                            }
                            else
                            {
                                ChqRecFlag = "Y";
                            }

                            string depository = Session["Depository"].ToString();
                            string OrderedBY = Session["OrderedBY"].ToString();
                            string PlacedBy = Session["PlacedBY"].ToString();

                            string dp1 = "";
                            string dp2 = "";
                            if (depository == "CDSL")
                            {
                                dp1 = "0";
                                dp2 = DPId;
                            }
                            else if (depository == "NSDL")
                            {
                                dp1 = DPId.Substring(0, 8);
                                dp2 = DPId.Substring(8, 8);
                            }

                            Random rn = new Random();
                            int OrderNo = rn.Next(99999999);
                            //string depository = "CDSL";
                            string symbol = symbolhdn.Value; string category = categoryhdn.Value;
                            Session["BankName"] = "8888".ToString().PadRight(6);
                            Session["Location"] = "UPIIDL".ToString().PadRight(6);
                            string accntpayer = txtupiid.Value;
                            Session["AccNo"] = accntpayer;
                            ipoapp.scripid = symbol;
                            ipoapp.clientname = "";
                            ipoapp.panno = "";
                            ipoapp.depository = "";
                            ipoapp.dpid = "";
                            ipoapp.clientbenfid = "";
                            ipoapp.bankname = "";
                            ipoapp.bankbranch = "";
                            ipoapp.bankcode = "";
                            ipoapp.location = "";
                            ipoapp.ifsccode = "";
                            ipoapp.accountnumber = "";
                            ipoapp.filler1 = "";
                            ipoapp.category = category;
                            ipoapp.address = "";
                            ipoapp.email = "";
                            ipoapp.contact = "";
                            ipoapp.bidtype = "2";
                            ipoapp.filler2 = "";
                            ipoapp.syndicatemembercode = "";
                            ipoapp.brokercode = "";
                            ipoapp.subbrokercode = "";
                            ipoapp.referencefield = "";
                            ipoapp.repartitiontype = "NR";
                            ipoapp.orderno = OrderNo.ToString();
                            bidapp.quantity = "";
                            bidapp.rate = "";
                            bidapp.cuttoffflag = "";
                            ipoapp.bids = bidapp;
                            string reqAppjson = (new JavaScriptSerializer()).Serialize(ipoapp);
                            //postData2BSE("app");
                            BSEIPO reqtoken = new BSEIPO();
                            //string token = (Session["IPOtoken"] == null ? "" : Session["IPOtoken"].ToString());
                            string token = reqtoken.validtoken();
                            string AppNo = "";
                            string strIssueType = "REI";

                            if (strIssueType == "REIT")
                            {
                                AppNo = "";
                            }
                            else
                            {
                                //string mainres = postData2BSEAPPNO(reqAppjson, token);// api--->eform


                                BSEIPOAPPNo appobj = postData2BSEAPPNO(reqAppjson, token);// api--->eform
                                string transrequ1 = ""; int Rescode = 0;
                                transrequ1 = appobj.result;
                                Rescode = appobj.Rescode;

                                if (Rescode == 200 && transrequ1 == "")
                                {
                                    BSEIPO reqtoken1 = new BSEIPO();
                                    string token1 = reqtoken1.GenerateToken("order");
                                    BSEIPOAPPNo resobj1 = postData2BSEAPPNO(reqAppjson, token1);// api--->eform

                                    transrequ1 = resobj1.result;
                                    Rescode = resobj1.Rescode;
                                }




                                //if (.ToLower() == "market is not open")
                                //{
                                //    offlinemethod();
                                //}

                                //ExceptionLogging.SendErrorToText(reqAppjson, mainres, "");

                                //IPOAppNoOP jsonmainobj1 = JsonConvert.DeserializeObject<IPOAppNoOP>(mainres);
                                IPOAppNoOP jsonmainobj1 = JsonConvert.DeserializeObject<IPOAppNoOP>(transrequ1);
                                string errocode = jsonmainobj1.errorcode;

                                if (Convert.ToInt32(errocode) == 0)
                                {

                                    AppNo = jsonmainobj1.applicationno.ToString().Trim();
                                }

                            }
                            #region comment
                            //string appres = postData2BSEApp(reqAppjson, token, "eforms");
                            ////var jsonobj = new JavaScriptSerializer().Deserialize<Dictionary<string, string>>(appres);
                            //IPOAppnoOP jsonobj = JsonConvert.DeserializeObject<IPOAppnoOP>(appres);
                            //string AppNo = jsonobj.applicationno;


                            //xmlstr += "<ORDERINFO>6002" + BSECode.PadRight(10) + finalAppNo.ToString().PadRight(16) + 
                            //Category.ToString().PadRight(5) + Session["ClientFname"].ToString().PadRight(50) + 
                            //"CDSL" + "0".ToString().PadRight(8) + DPId.ToString().Trim().PadRight(16) + 
                            //TxtQt1.Text.PadRight(11) + TxtPr1.Text.PadRight(7) + 
                            //ChqRecFlag.PadRight(1) + CutoffFlag.ToString().PadRight(1) + 
                            //TxtTot.Text.PadRight(12) + Session["Pan"].ToString().PadRight(10) + 
                            //Session["BankName"].ToString().PadRight(6) + Session["Location"].ToString().PadRight(6) + 
                            //Session["AccNo"].ToString().PadRight(45) + "                           " + 
                            //OrderNo.ToString().PadRight(16) + "6635      PROSTOCKSIPO   999999    [SESSION]                                                         N1</ORDERINFO></ORDER>";//" + ASBA.Trim().PadRight(1) + "
                            //AppNo = DateTime.Now.ToString("ddyyyyHHmmss");
                            //AppNo = "1";
                            #endregion
                            #region reit
                            if (strIssueType == "REIT")
                            {

                                //string reqmanjson = "{\"scripid\":\"" + symbolhdn.Value + "\",\"applicationno\":\"" + AppNo + "\",\"category\":\"" + categoryhdn.Value + "\",\"applicantname\":\"" + Session["ClientFname"].ToString().Trim() + "\",\"depository\":\"" + depository + "\",\"dpid\":\"" + dp1 + "\",\"clientbenfid\":\"" + dp2 + "\",\"chequereceivedflag\":\"" + ChqRecFlag + "\",\"chequeamount\":\"" + TxtTot.Text + "\",\"panno\":\"" + Session["Pan"].ToString() + "\",\"bankname\":\"" + Session["BankName"].ToString().Trim() + "\",\"location\":\"" + Session["Location"].ToString().Trim() + "\",\"accountnumber_upiid\":\"" + Session["AccNo"].ToString().Trim() + "\",\"ifsccode\":\"\",\"referenceno\":\"\",\"asba_upiid\":\"1\",\"bids\":[{\"bidid\":\"\",\"quantity\":\"" + TxtQt1.Text + "\",\"rate\":\"" + TxtPr1.Text + "\",\"cuttoffflag\":\"" + CutoffFlag.ToString() + "\",\"orderno\":\"" + OrderNo.ToString() + "\",\"actioncode\":\"N\"}]}";
                                //postData2BSE("order");
                                //token = (Session["IPOtoken"] == null ? "" : Session["IPOtoken"].ToString());
                                //string mainres = postData2BSEApp(reqmanjson, token, "ipoorder");
                                ////var jsonmainobj = new JavaScriptSerializer().Deserialize<Dictionary<string, string>>(mainres);
                                ////var errocode= jsonmainobj["errorcode"];
                                //IPOAddreqOP jsonmainobj = JsonConvert.DeserializeObject<IPOAddreqOP>(mainres);
                                ////string errocode = jsonmainobj.bids[0].errorcode;
                                //string errocode = "97";

                                //if (Convert.ToInt32(errocode) == 0)
                                //{
                                //    BidId = jsonmainobj.bids[0].bidid;
                                //    //Response.Write(BidId);
                                //    sqlBidD = "insert into IPOBidFileDetailsNew(IPO_Code,Symbol,ApplicationNo,Category,OrderNo,ApplicantName,Depository,DpID,ClientId,Quantity,CutOffFlag,Rate,Amt_Payable,chqRecFlag,chqAmount,ChqNo,PanNo,BankName,Location,AccNo,BidId,ActionCode,Status,App_Date,OptQty2,OptPrice2,OptCutOff2,OptQty3,OptPrice3,OptCutOff3,Address,Email,Contact,BidType,SyndMem_Code,BrokCode,SubBrokCode,Referencefield,uccId,BankId,Bankbranch,IFSC,repartype,IssueStartDate,IssueEndDate,IssueStartTime,IssueEndTime,MinPrice,MaxPrice,MinBidQty,TickSize,Discount,PlacedBy)";
                                //    sqlBidD += " values ('','" + BSECode + "','" + AppNo + "','" + Category + "','" + OrderNo + "','" + Session["ClientFname"].ToString() + "','CDSL','0','" + Session["DPClientId"].ToString() + "','" + TxtQt1.Text + "','" + CutoffFlag + "','" + TxtPr1.Text + "','" + TxtTot.Text + "','" + ChqRecFlag + "','" + TxtTot.Text + "','0','" + Session["Pan"].ToString() + "','" + Session["BankName"].ToString() + "','" + Session["Location"].ToString() + "','" + Session["AccNo"].ToString() + "','" + BidId + "','N','Application Submited',getdate(),'" + TxtQt1.Text + "','" + TxtPr1.Text + "','" + CutoffFlag2 + "','" + TxtQt1.Text + "','" + TxtPr1.Text + "','" + CutoffFlag3 + "','" + Address + "','" + WSEmail + "','" + WSMobile + "','2','" + SyndMemCode + "','IBBSUAT','" + SubBrokCode + "','CHECKER','" + clcode + "','','','','NR','" + LblSD.Text + "','" + LblED.Text + "','" + LblST.Text + "','" + LblET.Text + "','" + LblPMin.Text + "','" + LblPMax.Text + "'," + Convert.ToInt32(LblBMin.Text) + ",'" + LblTick.Text + "','" + LblDiscount.Text + "','Client')";
                                //    // Response.Write(BidId);
                                //    // Response.Write(sqlBidD);
                                //    ExceptionLogging.SendErrorToText("", "", sqlBidD);
                                //    //Response.End();
                                //    if (SqlHelper.ExecuteNonQuery(SqlCon, CommandType.Text, sqlBidD) > 0)
                                //    {
                                //        //ScriptManager.RegisterStartupScript(this, this.GetType(), "success", "alert('IPO order Placed successfully.');", true)

                                //        if (WSMobile != "")
                                //        {
                                //            string MobileNo = WSMobile;
                                //            string SMSText = "";

                                //            DataSet dsSMS = BusinessData.CommonFunction.SMSEmailContent("IPOSMS1");

                                //            if (dsSMS != null && dsSMS.Tables[0].Rows.Count > 0)
                                //            {
                                //                if (TxtQt1.Text.ToString() != "")
                                //                {
                                //                    SMSText = dsSMS.Tables[0].Rows[0]["SEText"].ToString();

                                //                    SMSText = SMSText.Replace("{CompanyName}", LblCompN.Text.Trim());
                                //                    SMSText = SMSText.Replace("{Qty1}", TxtQt1.Text.Trim());
                                //                    SMSText = SMSText.Replace("{Price1}", TxtPr1.Text.Trim());
                                //                }


                                //            }
                                //        }

                                //        if (WSEmail != "")
                                //        {
                                //            msglblstr = "IPO order Placed successfully.";
                                //            Response.Redirect("/CurrentIndex.aspx?id=2");
                                //        }
                                //        else
                                //        {
                                //            msglblstr = "IPO order Placed successfully.";
                                //            Response.Redirect("/CurrentIndex.aspx?id=2");
                                //        }
                                //    }
                                //}
                                //else
                                //{
                                //    string erromsg = jsonmainobj.bids[0].message;
                                //    ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('" + erromsg + "');", true);
                                //}
                            }
                            #endregion
                            #region appno
                            else
                            {

                                #region appon!=""
                                if (AppNo != "")
                                {
                                    string bidjson = "";

                                    //if (chk1.Checked == true)
                                    //{
                                    //    qty1 = TxtQt1.Text;
                                    //    pr1 = TxtPr1.Text;
                                    //}
                                    //if (chk2.Checked == true)
                                    //{
                                    //    qty1 = TxtQt2.Text;
                                    //    pr2 = TxtPr2.Text;
                                    //}
                                    //if (chk3.Checked == true)
                                    //{
                                    //    qty3 = TxtQt3.Text;
                                    //    pr3 = TxtPr3.Text;
                                    //}
                                    //totamt calculation
                                    double opt1 = 0;
                                    double opt2 = 0;
                                    double opt3 = 0;
                                    double max = 0;
                                    double dv = 0;
                                    double disvalue1 = Convert.ToDouble(discounthdn.Value);
                                    double disvalue2 = Convert.ToDouble(discounthdn.Value);
                                    double disvalue3 = Convert.ToDouble(discounthdn.Value);


                                    if (lot1.Value != "" && price1.Value != "")
                                    {
                                        bidjson += "{\"bidid\":\"\",\"quantity\":\"" + (Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value)).ToString() + "\",\"rate\":\"" + price1.Value + "\",\"cuttoffflag\":\"" + CutoffFlag.ToString() + "\",\"orderno\":\"" + OrderNo.ToString() + "\",\"actioncode\":\"N\"},";
                                        opt1 = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price1.Value);
                                        if (discounttypehdn.Value == "3")
                                        {
                                            disvalue1 = Convert.ToDouble(price1.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);
                                        }
                                    }
                                    if (lot2.Value != "" && price2.Value != "")
                                    {
                                        bidjson += "{\"bidid\":\"\",\"quantity\":\"" + (Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value)).ToString() + "\",\"rate\":\"" + price2.Value + "\",\"cuttoffflag\":\"" + CutoffFlag2.ToString() + "\",\"orderno\":\"" + OrderNo.ToString() + "\",\"actioncode\":\"N\"},";
                                        opt2 = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price2.Value);
                                        if (discounttypehdn.Value == "3")
                                        {
                                            disvalue2 = Convert.ToDouble(price2.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);
                                        }
                                    }
                                    if (lot3.Value != "" && price3.Value != "")
                                    {
                                        bidjson += "{\"bidid\":\"\",\"quantity\":\"" + (Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value)).ToString() + "\",\"rate\":\"" + price3.Value + "\",\"cuttoffflag\":\"" + CutoffFlag3.ToString() + "\",\"orderno\":\"" + OrderNo.ToString() + "\",\"actioncode\":\"N\"},";
                                        opt3 = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price3.Value);
                                        if (discounttypehdn.Value == "3")
                                        {
                                            disvalue3 = Convert.ToDouble(price3.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);
                                        }
                                    }
                                    //max = Math.Max(opt1, opt2, opt3);
                                    if (opt1 > opt2 && opt1 > opt3)
                                    {
                                        max = opt1;
                                        dv = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * disvalue1;

                                        //dv = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(discounthdn.Value);
                                    }
                                    else if (opt2 > opt3 && opt2 > opt1)
                                    {
                                        max = opt2;
                                        //dv = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(discounthdn.Value);
                                        dv = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * disvalue2;

                                    }
                                    else if (opt3 > opt1 && opt3 > opt2)
                                    {
                                        max = opt3;
                                        //dv = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(discounthdn.Value);
                                        dv = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * disvalue3;

                                    }
                                    // string totamt = (max - dv).ToString();

                                    string totamt = "";
                                    Decimal totamtcal = Convert.ToDecimal(max - dv);

                                    if (totamtcal < 200000)
                                    {
                                        totamt = totamtcal.ToString();

                                    }
                                    else
                                    {
                                        totamt = max.ToString();
                                    }

                                    bidjson = bidjson.TrimEnd(',');


                                    //string reqmanjson = "{\"scripid\":\"" + BSECode + "\",\"applicationno\":\"" + AppNo + "\",\"category\":\"" + Category + "\",\"applicantname\":\"" + Session["ClientFname"].ToString().Trim() + "\",\"depository\":\"" + depository + "\",\"dpid\":\"0\",\"clientbenfid\":\"" + DPId.ToString() + "\",\"chequereceivedflag\":\"" + ChqRecFlag + "\",\"chequeamount\":\"" + TxtTot.Text + "\",\"panno\":\"" + Session["Pan"].ToString() + "\",\"bankname\":\"" + Session["BankName"].ToString().Trim() + "\",\"location\":\"" + Session["Location"].ToString().Trim() + "\",\"accountnumber_upiid\":\"" + Session["AccNo"].ToString().Trim() + "\",\"ifsccode\":\"\",\"referenceno\":\"\",\"asba_upiid\":\"1\",\"bids\":[{\"bidid\":\"\",\"quantity\":\"" + TxtQt1.Text + "\",\"rate\":\"760\",\"cuttoffflag\":\"" + CutoffFlag.ToString() + "\",\"orderno\":\"" + OrderNo.ToString() + "\",\"actioncode\":\"N\"},{\"bidid\":\"\",\"quantity\":\"38\",\"rate\":\"770\",\"cuttoffflag\":\"" + CutoffFlag.ToString() + "\",\"orderno\":\""+OrderNo.ToString()+"\",\"actioncode\":\"N\"},{\"bidid\":\"\",\"quantity\":\"57\",\"rate\":\"780\",\"cuttoffflag\":\"" + CutoffFlag.ToString() + "\",\"orderno\":\""+OrderNo.ToString()+"\",\"actioncode\":\"N\"}]}";
                                    //string reqmanjson = "{\"scripid\":\"" + BSECode + "\",\"applicationno\":\"" + AppNo + "\",\"category\":\"" + Category + "\",\"applicantname\":\"" + Session["ClientFname"].ToString().Trim() + "\",\"depository\":\"" + depository + "\",\"dpid\":\"0\",\"clientbenfid\":\"" + DPId.ToString() + "\",\"chequereceivedflag\":\"" + ChqRecFlag + "\",\"chequeamount\":\"" + TxtTot.Text + "\",\"panno\":\"" + Session["Pan"].ToString() + "\",\"bankname\":\"" + Session["BankName"].ToString().Trim() + "\",\"location\":\"" + Session["Location"].ToString().Trim() + "\",\"accountnumber_upiid\":\"" + Session["AccNo"].ToString().Trim() + "\",\"ifsccode\":\"\",\"referenceno\":\"\",\"asba_upiid\":\"1\",\"bids\":[{\"bidid\":\"\",\"quantity\":\"" + TxtQt1.Text + "\",\"rate\":\""+TxtPr1.Text+"\",\"cuttoffflag\":\"" + CutoffFlag.ToString() + "\",\"orderno\":\"" + OrderNo.ToString() + "\",\"actioncode\":\"N\"}]}";
                                    //string reqmanjson = "{\"scripid\":\"" + BSECode + "\",\"applicationno\":\"" + AppNo + "\",\"category\":\"" + Category + "\",\"applicantname\":\"" + Session["ClientFname"].ToString().Trim() + "\",\"depository\":\"" + depository + "\",\"dpid\":\"0\",\"clientbenfid\":\"" + DPId.ToString() + "\",\"chequereceivedflag\":\"" + ChqRecFlag + "\",\"chequeamount\":\"" + totamt + "\",\"panno\":\"" + Session["Pan"].ToString() + "\",\"bankname\":\"" + Session["BankName"].ToString().Trim() + "\",\"location\":\"" + Session["Location"].ToString().Trim() + "\",\"accountnumber_upiid\":\"" + Session["AccNo"].ToString().Trim() + "\",\"ifsccode\":\"\",\"referenceno\":\"\",\"asba_upiid\":\"1\",\"bids\":["+bidjson+"]}";
                                    string reqmanjson = "{\"scripid\":\"" + symbolhdn.Value + "\",\"applicationno\":\"" + AppNo + "\",\"category\":\"" + categoryhdn.Value + "\",\"applicantname\":\"" + Session["ClientFname"].ToString().Trim() + "\",\"depository\":\"" + depository + "\",\"dpid\":\"" + dp1 + "\",\"clientbenfid\":\"" + dp2 + "\",\"chequereceivedflag\":\"" + ChqRecFlag + "\",\"chequeamount\":\"" + totamt + "\",\"panno\":\"" + Session["Pan"].ToString() + "\",\"bankname\":\"" + Session["BankName"].ToString().Trim() + "\",\"location\":\"" + Session["Location"].ToString().Trim() + "\",\"accountnumber_upiid\":\"" + Session["AccNo"].ToString().Trim() + "\",\"ifsccode\":\"\",\"referenceno\":\"\",\"asba_upiid\":\"1\",\"bids\":[" + bidjson + "]}";
                                    //postData2BSE("order");




                                    //bidjson = bidjson.TrimEnd(',');


                                    //string reqmanjson = "{\"scripid\":\"" + BSECode + "\",\"applicationno\":\"" + AppNo + "\",\"category\":\"" + Category + "\",\"applicantname\":\"" + Session["ClientFname"].ToString().Trim() + "\",\"depository\":\"" + depository + "\",\"dpid\":\"0\",\"clientbenfid\":\"" + DPId.ToString() + "\",\"chequereceivedflag\":\"" + ChqRecFlag + "\",\"chequeamount\":\"" + TxtTot.Text + "\",\"panno\":\"" + Session["Pan"].ToString() + "\",\"bankname\":\"" + Session["BankName"].ToString().Trim() + "\",\"location\":\"" + Session["Location"].ToString().Trim() + "\",\"accountnumber_upiid\":\"" + Session["AccNo"].ToString().Trim() + "\",\"ifsccode\":\"\",\"referenceno\":\"\",\"asba_upiid\":\"1\",\"bids\":[{\"bidid\":\"\",\"quantity\":\"" + TxtQt1.Text + "\",\"rate\":\"760\",\"cuttoffflag\":\"" + CutoffFlag.ToString() + "\",\"orderno\":\"" + OrderNo.ToString() + "\",\"actioncode\":\"N\"},{\"bidid\":\"\",\"quantity\":\"38\",\"rate\":\"770\",\"cuttoffflag\":\"" + CutoffFlag.ToString() + "\",\"orderno\":\""+OrderNo.ToString()+"\",\"actioncode\":\"N\"},{\"bidid\":\"\",\"quantity\":\"57\",\"rate\":\"780\",\"cuttoffflag\":\"" + CutoffFlag.ToString() + "\",\"orderno\":\""+OrderNo.ToString()+"\",\"actioncode\":\"N\"}]}";
                                    //string reqmanjson = "{\"scripid\":\"" + BSECode + "\",\"applicationno\":\"" + AppNo + "\",\"category\":\"" + Category + "\",\"applicantname\":\"" + Session["ClientFname"].ToString().Trim() + "\",\"depository\":\"" + depository + "\",\"dpid\":\"0\",\"clientbenfid\":\"" + DPId.ToString() + "\",\"chequereceivedflag\":\"" + ChqRecFlag + "\",\"chequeamount\":\"" + TxtTot.Text + "\",\"panno\":\"" + Session["Pan"].ToString() + "\",\"bankname\":\"" + Session["BankName"].ToString().Trim() + "\",\"location\":\"" + Session["Location"].ToString().Trim() + "\",\"accountnumber_upiid\":\"" + Session["AccNo"].ToString().Trim() + "\",\"ifsccode\":\"\",\"referenceno\":\"\",\"asba_upiid\":\"1\",\"bids\":[{\"bidid\":\"\",\"quantity\":\"" + TxtQt1.Text + "\",\"rate\":\""+TxtPr1.Text+"\",\"cuttoffflag\":\"" + CutoffFlag.ToString() + "\",\"orderno\":\"" + OrderNo.ToString() + "\",\"actioncode\":\"N\"}]}";
                                    //string reqmanjson = "{\"scripid\":\"" + BSECode + "\",\"applicationno\":\"" + AppNo + "\",\"category\":\"" + Category + "\",\"applicantname\":\"" + Session["ClientFname"].ToString().Trim() + "\",\"depository\":\"" + depository + "\",\"dpid\":\"0\",\"clientbenfid\":\"" + DPId.ToString() + "\",\"chequereceivedflag\":\"" + ChqRecFlag + "\",\"chequeamount\":\"" + totamt + "\",\"panno\":\"" + Session["Pan"].ToString() + "\",\"bankname\":\"" + Session["BankName"].ToString().Trim() + "\",\"location\":\"" + Session["Location"].ToString().Trim() + "\",\"accountnumber_upiid\":\"" + Session["AccNo"].ToString().Trim() + "\",\"ifsccode\":\"\",\"referenceno\":\"\",\"asba_upiid\":\"1\",\"bids\":["+bidjson+"]}";
                                    //string reqmanjson = "{\"scripid\":\"" + BSECode + "\",\"applicationno\":\"" + AppNo + "\",\"category\":\"" + Category + "\",\"applicantname\":\"" + Session["ClientFname"].ToString().Trim() + "\",\"depository\":\"" + depository + "\",\"dpid\":\"" + dp1 + "\",\"clientbenfid\":\"" + dp2 + "\",\"chequereceivedflag\":\"" + ChqRecFlag + "\",\"chequeamount\":\"" + totamt + "\",\"panno\":\"" + Session["Pan"].ToString() + "\",\"bankname\":\"" + Session["BankName"].ToString().Trim() + "\",\"location\":\"" + Session["Location"].ToString().Trim() + "\",\"accountnumber_upiid\":\"" + Session["AccNo"].ToString().Trim() + "\",\"ifsccode\":\"\",\"referenceno\":\"\",\"asba_upiid\":\"1\",\"bids\":[" + bidjson + "]}";
                                    //postData2BSE("order");
                                    //token = (Session["IPOtoken"] == null ? "" : Session["IPOtoken"].ToString());
                                    token = reqtoken.validtoken();
                                    //string mainres = postData2BSEApp(reqmanjson, token, "ipoorder");// api-->method
                                    //var jsonmainobj = new JavaScriptSerializer().Deserialize<Dictionary<string, string>>(mainres);
                                    //var errocode= jsonmainobj["errorcode"];

                                    BSEIPOFetchRes resobj = postData2BSEApp(reqmanjson, token, "ipoorder");

                                    string transrequ = ""; int Rescode = 0;
                                    transrequ = resobj.res;
                                    Rescode = resobj.Rescode;

                                    if (Rescode == 200 && transrequ == "")
                                    {
                                        BSEIPO reqtoken1 = new BSEIPO();
                                        string token1 = reqtoken1.GenerateToken("order");
                                        BSEIPOFetchRes resobj1 = postData2BSEApp(reqmanjson, token1, "ipoorder");

                                        transrequ = resobj1.res;
                                        Rescode = resobj1.Rescode;
                                    }

                                    if (transrequ.Contains("NOT ALLOWED ON"))
                                    {

                                        //IPOAddreqOP jsonmainobj1 = JsonConvert.DeserializeObject<IPOAddreqOP>(transrequ);
                                        //// AppNo = jsonmainobj1.applicationNumber.ToString().Trim();
                                        //message = jsonmainobj1.bids[0].message.ToString();
                                        ////errormes = message.ToUpper().Substring(0, 45);
                                        //if (message.ToUpper().IndexOf("FAILED: BID ENTRY/MODIFICATION NOT ALLOWED ON") != -1 || message.ToLower() == "market is not open")
                                        //{
                                            offlinemethod();
                                        //}
                                    }

                                    //IPOAddreqOP jsonmainobj = JsonConvert.DeserializeObject<IPOAddreqOP>(mainres);
                                    IPOAddreqOP jsonmainobj = JsonConvert.DeserializeObject<IPOAddreqOP>(transrequ);
                                   // errormes = message.ToUpper().Substring(0, 45);
                                    string statuscode = jsonmainobj.statuscode;

                                    if (statuscode == "0")
                                    {
                                        #region statuscode0

                                        string errocode = jsonmainobj.bids[0].errorcode;//Errorcode is a bid > 0
                                        if (jsonmainobj.bids.Count > 1)
                                        {
                                            for (int i = 0; i < jsonmainobj.bids.Count; i++)
                                            {
                                                if (jsonmainobj.bids[i].errorcode.ToString() == "0")
                                                {
                                                    errocode = "0";
                                                }
                                            }
                                        }

                                        if (errocode == "0")
                                        {
                                            #region errcode0
                                            string BidId = null, bidid2 = null, bidid3 = null, sqlBidD = null, SyndMemCode = "", SubBrokCode = "";


                                            BidId = jsonmainobj.bids[0].bidid;
                                            //Response.Write(BidId);
                                            string qty1 = null, qty2 = null, qty3 = null;
                                            string pr1 = null, pr2 = null, pr3 = null;
                                            //string cu1 = "", cu2 = "", cu3 = "";
                                            bool hit = false;
                                            bool hit2 = false;
                                            bool hit3 = false;


                                            if (jsonmainobj.bids.Count > 1)
                                            {
                                                #region bit
                                                for (int i = 0; i < jsonmainobj.bids.Count; i++)
                                                {
                                                    if (i == 0)
                                                    {
                                                        BidId = jsonmainobj.bids[0].bidid;
                                                        qty1 = jsonmainobj.bids[0].quantity;
                                                        pr1 = jsonmainobj.bids[0].rate;
                                                        hit = true;
                                                        // cu2 = jsonmainobj.bids[1].cuttoffflag; ;

                                                    }

                                                    if (i == 1)
                                                    {
                                                        bidid2 = jsonmainobj.bids[1].bidid;
                                                        qty2 = jsonmainobj.bids[1].quantity;
                                                        pr2 = jsonmainobj.bids[1].rate;
                                                        hit2 = true;

                                                        // cu2 = jsonmainobj.bids[1].cuttoffflag;                                                ;
                                                    }
                                                    if (i == 2)
                                                    {
                                                        bidid3 = jsonmainobj.bids[2].bidid;
                                                        qty3 = jsonmainobj.bids[2].quantity;
                                                        pr3 = jsonmainobj.bids[2].rate;
                                                        hit3 = true;

                                                        // cu3 = jsonmainobj.bids[2].cuttoffflag; ;

                                                    }
                                                }


                                                if (hit == true && hit2 == true && hit3 == true)
                                                {
                                                    sqlBidD = "insert into IPOBidFileDetailsNew(IPO_Code,Symbol,ApplicationNo,Category,OrderNo,ApplicantName,Depository,DpID,ClientId,Quantity,CutOffFlag,Rate,Amt_Payable,chqRecFlag,chqAmount,ChqNo,PanNo,BankName,Location,AccNo,BidId,ActionCode,Status,App_Date,BidId2,OptQty2,OptPrice2,OptCutOff2,BidId3,OptQty3,OptPrice3,OptCutOff3,Address,Email,Contact,BidType,SyndMem_Code,BrokCode,SubBrokCode,Referencefield,uccId,BankId,Bankbranch,IFSC,repartype,IssueStartDate,IssueEndDate,IssueStartTime,IssueEndTime,MinPrice,MaxPrice,MinBidQty,TickSize,Discount,PlacedBy,OrderedBy,Exchange)";
                                                    // sqlBidD += " values ('','" + symbolhdn.Value + "','" + AppNo + "','" + categoryhdn.Value + "','" + OrderNo + "','" + Session["ClientFname"].ToString() + "','" + depository + "','" + dp1 + "','" + dp2 + "','" + qty1 + "','" + CutoffFlag + "','" + pr1 + "','" + totamt + "','" + ChqRecFlag + "','" + totamt + "','0','" + Session["Pan"].ToString() + "','" + Session["BankName"].ToString() + "','" + Session["Location"].ToString() + "','" + Session["AccNo"].ToString() + "','" + BidId + "','N','Application Submited',getdate(),'" + bidid2 + "','" + qty2 + "','" + pr2 + "','" + CutoffFlag2 + "','" + bidid3 + "','" + qty3 + "','" + pr3 + "','" + CutoffFlag3 + "','" + Address + "','" + WSEmail + "','" + WSMobile + "','2','" + SyndMemCode + "','IBBSUAT','" + SubBrokCode + "','CHECKER','" + clcode + "','','','','NR','" + issuefromdatehdn.Value + "','" + issuetodatehdn.Value + "','" + issuefromtimehdn.Value + "','" + issuetotimehdn.Value + "','" + minprice.Value + "','" + maxprice.Value + "'," + Convert.ToInt32(minprice.Value) + ",'" + ticksizehdn.Value + "','" + discounthdn.Value + "','" + PlacedBy + "','" + OrderedBY + "','BSE')";
                                                    sqlBidD += " values ('',@symbolhdn,@AppNo,@categoryhdn,@OrderNo,@ClientFname,@depository,@dp1,@dp2,@qty1,@CutoffFlag,@pr1,@totamt,@ChqRecFlag,@totamt,'0',@Pan,@BankName,@Location,@AccNo,@BidId,'N','Application Submited',getdate(),@bidid2,@qty2,@pr2,@CutoffFlag2,@bidid3,@qty3,@pr3,@CutoffFlag3,@Address,@WSEmail,@WSMobile,'2',@SyndMemCode,'IBBSUAT',@SubBrokCode,'CHECKER',@clcode,'','','','NR',@issuefromdatehdn,@issuetodatehdn,@issuefromtimehdn,@issuetotimehdn,@minprice,@maxprice,@minqtys,@ticksizehdn,@discounthdn,@PlacedBy,@OrderedBY,'BSE')";

                                                }
                                                else if (hit == true && hit2 == true)
                                                {
                                                    sqlBidD = "insert into IPOBidFileDetailsNew(IPO_Code,Symbol,ApplicationNo,Category,OrderNo,ApplicantName,Depository,DpID,ClientId,Quantity,CutOffFlag,Rate,Amt_Payable,chqRecFlag,chqAmount,ChqNo,PanNo,BankName,Location,AccNo,BidId,ActionCode,Status,App_Date,BidId2,OptQty2,OptPrice2,OptCutOff2,Address,Email,Contact,BidType,SyndMem_Code,BrokCode,SubBrokCode,Referencefield,uccId,BankId,Bankbranch,IFSC,repartype,IssueStartDate,IssueEndDate,IssueStartTime,IssueEndTime,MinPrice,MaxPrice,MinBidQty,TickSize,Discount,PlacedBy,OrderedBy,Exchange)";
                                                    //sqlBidD += " values ('','" + symbolhdn.Value + "','" + AppNo + "','" + categoryhdn.Value + "','" + OrderNo + "','" + Session["ClientFname"].ToString() + "','" + depository + "','" + dp1 + "','" + dp2 + "','" + qty1 + "','" + CutoffFlag + "','" + pr1 + "','" + totamt + "','" + ChqRecFlag + "','" + totamt + "','0','" + Session["Pan"].ToString() + "','" + Session["BankName"].ToString() + "','" + Session["Location"].ToString() + "','" + Session["AccNo"].ToString() + "','" + BidId + "','N','Application Submited',getdate(),'" + bidid2 + "','" + qty2 + "','" + pr2 + "','" + CutoffFlag2 + "','" + Address + "','" + WSEmail + "','" + WSMobile + "','2','" + SyndMemCode + "','IBBSUAT','" + SubBrokCode + "','CHECKER','" + clcode + "','','','','NR','" + issuefromdatehdn.Value + "','" + issuetodatehdn.Value + "','" + issuefromtimehdn.Value + "','" + issuetotimehdn.Value + "','" + minprice.Value + "','" + maxprice.Value + "'," + Convert.ToInt32(minqty.Value) + ",'" + ticksizehdn.Value + "','" + discounthdn.Value + "','" + PlacedBy + "','" + OrderedBY + "','BSE')";
                                                    sqlBidD += " values ('',@symbolhdn,@AppNo,@categoryhdn,@OrderNo,@ClientFname,@depository,@dp1,@dp2,@qty1,@CutoffFlag,@pr1,@totamt,@ChqRecFlag,@totamt,'0',@Pan,@BankName,@Location,@AccNo,@BidId,'N','Application Submited',getdate(),@bidid2,@qty2,@pr2,@CutoffFlag2,@Address,@WSEmail,@WSMobile,'2',@SyndMemCode,'IBBSUAT',@SubBrokCode,'CHECKER',@clcode,'','','','NR',@issuefromdatehdn,@issuetodatehdn,@issuefromtimehdn,@issuetotimehdn,@minprice,@maxprice,@minqtys,@ticksizehdn,@discounthdn,@PlacedBy,@OrderedBY,'BSE')";

                                                }

                                                #endregion
                                            }
                                            else
                                            {
                                                BidId = jsonmainobj.bids[0].bidid;
                                                qty1 = jsonmainobj.bids[0].quantity;
                                                pr1 = jsonmainobj.bids[0].rate;
                                                sqlBidD = "insert into IPOBidFileDetailsNew(IPO_Code,Symbol,ApplicationNo,Category,OrderNo,ApplicantName,Depository,DpID,ClientId,Quantity,CutOffFlag,Rate,Amt_Payable,chqRecFlag,chqAmount,ChqNo,PanNo,BankName,Location,AccNo,BidId,ActionCode,Status,App_Date,Address,Email,Contact,BidType,SyndMem_Code,BrokCode,SubBrokCode,Referencefield,uccId,BankId,Bankbranch,IFSC,repartype,IssueStartDate,IssueEndDate,IssueStartTime,IssueEndTime,MinPrice,MaxPrice,MinBidQty,TickSize,Discount,PlacedBy,orderedby,Exchange)";
                                                // sqlBidD += " values ('','" + symbolhdn.Value + "','" + AppNo + "','" + categoryhdn.Value + "','" + OrderNo + "','" + Session["ClientFname"].ToString() + "','" + depository + "','" + dp1 + "','" + dp2 + "','" + qty1 + "','" + CutoffFlag + "','" + pr1 + "','" + totamt + "','" + ChqRecFlag + "','" + totamt + "','0','" + Session["Pan"].ToString() + "','" + Session["BankName"].ToString() + "','" + Session["Location"].ToString() + "','" + Session["AccNo"].ToString() + "','" + BidId + "','N','Application Submited',getdate(),'" + Address + "','" + WSEmail + "','" + WSMobile + "','2','" + SyndMemCode + "','IBBSUAT','" + SubBrokCode + "','CHECKER','" + clcode + "','','','','NR','" + issuefromdatehdn.Value + "','" + issuetodatehdn.Value + "','" + issuefromtimehdn.Value + "','" + issuetotimehdn.Value + "','" + minprice.Value + "','" + maxprice.Value + "'," + Convert.ToInt32(minqty.Value) + ",'" + ticksizehdn.Value + "','" + discounthdn.Value + "','" + PlacedBy + "','" + OrderedBY + "','BSE')";
                                                sqlBidD += " values ('',@symbolhdn,@AppNo,@categoryhdn,@OrderNo,@ClientFname,@depository,@dp1,@dp2,@qty1,@CutoffFlag,@pr1,@totamt,@ChqRecFlag,@totamt,'0',@Pan,@BankName,@Location,@AccNo,@BidId,'N','Application Submited',getdate(),@Address,@WSEmail,@WSMobile,'2',@SyndMemCode,'IBBSUAT',@SubBrokCode,'CHECKER',@clcode,'','','','NR',@issuefromdatehdn,@issuetodatehdn,@issuefromtimehdn,@issuetotimehdn,@minprice,@maxprice,@minqtys,@ticksizehdn,@discounthdn,@PlacedBy,@OrderedBY,'BSE')";

                                            }
                                            BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("Applied the IPO in online mode for BSE: " + sqlBidD);

                                            ExceptionLogging.SendErrorToText("", "", sqlBidD);
                                            //Response.End();

                                            SqlParameter[] param3 = { new SqlParameter("@clcode", clcode),
                                                new SqlParameter("@symbolhdn", symbol),
                                                new SqlParameter("@AppNo", AppNo),
                                                new SqlParameter("@categoryhdn", category),
                                                new SqlParameter("@OrderNo", OrderNo),
                                                new SqlParameter("@ClientFname", Session["ClientFname"].ToString()),
                                                new SqlParameter("@depository", depository),
                                                new SqlParameter("@dp1", dp1),
                                                new SqlParameter("@dp2", dp2),
                                                new SqlParameter("@qty1", qty1),
                                                new SqlParameter("@CutoffFlag", CutoffFlag),
                                                new SqlParameter("@pr1", pr1),
                                                new SqlParameter("@totamt", totamt),
                                                new SqlParameter("@ChqRecFlag", ChqRecFlag),
                                                new SqlParameter("@Pan", Session["Pan"].ToString()),
                                                new SqlParameter("@BankName", Session["BankName"].ToString()),
                                                new SqlParameter("@Location", Session["Location"].ToString()),
                                                new SqlParameter("@AccNo", Session["AccNo"].ToString()),
                                                new SqlParameter("@BidId", BidId),
                                                new SqlParameter("@Address", Address),
                                                new SqlParameter("@WSEmail", WSEmail),
                                                new SqlParameter("@WSMobile", WSMobile),
                                                new SqlParameter("@SyndMemCode", SyndMemCode),
                                                new SqlParameter("@SubBrokCode", SubBrokCode),
                                                new SqlParameter("@issuefromdatehdn", issuefromdatehdn.Value),
                                                new SqlParameter("@issuetodatehdn", issuetodatehdn.Value),
                                              new SqlParameter("@issuefromtimehdn", issuefromtimehdn.Value),
                                              new SqlParameter("@issuetotimehdn",  issuetotimehdn.Value),
                                              new SqlParameter("@minprice",  minprice.Value),
                                               new SqlParameter("@maxprice", maxprice.Value),
                                                new SqlParameter("@minqtys",  Convert.ToInt32(minqty.Value) ),
                                                 new SqlParameter("@ticksizehdn", ticksizehdn.Value),
                                                  new SqlParameter("@discounthdn", discounthdn.Value),
                                                new SqlParameter("@PlacedBy", PlacedBy),
                                                 new SqlParameter("@OrderedBY", OrderedBY),


                                                 new SqlParameter("@bidid2", bidid2),
                                                 new SqlParameter("@qty2", qty2),
                                                 new SqlParameter("@pr2", pr2),
                                                 new SqlParameter("@CutoffFlag2", CutoffFlag2),
                                                 new SqlParameter("@bidid3", bidid3),
                                                 new SqlParameter("@qty3", qty3),
                                                 new SqlParameter("@pr3", pr3),
                                                 new SqlParameter("@CutoffFlag3", CutoffFlag3),



 };
                                            if (SqlHelper.ExecuteNonQuery(sqlcon, CommandType.Text, sqlBidD, param3) > 0)
                                            // if (SqlHelper.ExecuteNonQuery(sqlcon, CommandType.Text, sqlBidD) > 0)

                                            {

                                                //ScriptManager.RegisterStartupScript(this, this.GetType(), "success", "finalresp();", true);
                                                ScriptManager.RegisterStartupScript(this, this.GetType(), "success", "bseorder();", true);
                                            }
                                            #endregion
                                        }
                                        else if (transrequ.Contains("NOT ALLOWED ON"))
                                        {
                                            BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText(" Applied the IPO in Offline for BSE Query(reason :market is not open) : ");

                                            ScriptManager.RegisterStartupScript(this, this.GetType(), "success", "nseoffline();", true);

                                            // ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('Your BID is being Processed,Order will place when IPO market is open!!');window.location='/orders.aspx';", true);
                                        }
                                        else
                                        {

                                            string erromsg = jsonmainobj.bids[0].message;
                                            if (erromsg == "")
                                            {

                                            }
                                            BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("Error Message for BSE IPO" + erromsg);
                                            ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('" + erromsg + "');", true);
                                        }


                                        #endregion
                                    }
                                    //else if (message.ToLower() == "market is not open" || errormes == "FAILED: BID ENTRY/MODIFICATION NOT ALLOWED ON")
                                    else if (transrequ.Contains("NOT ALLOWED ON"))
                                    {
                                        BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText(" Applied the IPO in Offline for BSE Query(reason :market is not open) : ");
                                        ScriptManager.RegisterStartupScript(this, this.GetType(), "success", "nseoffline();", true);
                                        //ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('Your BID is being Processed,Order will place when IPO market is open!!');window.location='/orders.aspx';", true);
                                    }
                                    else
                                    {
                                        string erromsg = jsonmainobj.statusmessage;
                                        BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("StatusError Message for BSE IPO" + erromsg);
                                        string script = "alertify.alert('" + erromsg + "');";
                                       ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "alertifyScript", script, true);
                                        // ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('" + erromsg + "');", true);
                                    }
                                }
                                #endregion
                                else
                                {
                                    BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("Application No n't yet  for BSE IPO");
                                    string script = "alertify.alert('Please contact to administrator');";
                                     ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "alertifyScript", script, true);
                                    //ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('Please contact to administrator');", true);
                                }
                            }
                            #endregion

                            //end
                            #endregion
                        }
                        #endregion
                    }
                }
            }
            catch (Exception ex)
            {
                ExceptionLogging.SendErrorToText("", "", ex.Message.ToString());
                BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("Transaction added Error: " + ex.Message.ToString());

                string script = "alertify.alert('Please contact to administrator');";
                 ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "alertifyScript", script, true);
                // ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('Please contact to administrator');", true);
            }
        }
        //public bool  validateoffline()
        //{
        //    return false;
        //}

        public bool validateoffline()
        {
            //return true;
            try
            {

                //string testt = Convert.ToDateTime(issuefromdatehdn.Value).ToShortDateString();
                //ExceptionLogging.SendErrorToText("T1", "", "");

                if (offtrigger.Value.ToString() == "Y")
                {
                    if (Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy")) < Convert.ToDateTime(issuefromdatehdn.Value))
                    {
                        return true;
                    }
                    else if ((Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy")) >= Convert.ToDateTime(issuefromdatehdn.Value)) && (Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy")) <= Convert.ToDateTime(issuetodatehdn.Value)))
                    {
                        if (Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy")) == Convert.ToDateTime(issuetodatehdn.Value))
                        {
                            if (Convert.ToDateTime(DateTime.Now.ToString("hh:mm tt")) < Convert.ToDateTime(issuefromtimehdn.Value))
                            {
                                return true;
                            }
                            else if (Convert.ToDateTime(DateTime.Now.ToString("hh:mm tt")) > Convert.ToDateTime(issuetotimehdn.Value))
                            {
                                return false;
                            }

                        }
                        //else if (Convert.ToDateTime(DateTime.Now.ToString("hh:mm tt")) < Convert.ToDateTime(LblST.Text) || Convert.ToDateTime(DateTime.Now.ToString("hh:mm tt")) > Convert.ToDateTime(Convert.ToDateTime("10:00 AM").ToShortTimeString()))
                        else if (Convert.ToDateTime(DateTime.Now.ToString("hh:mm tt")) < Convert.ToDateTime(issuefromtimehdn.Value) || Convert.ToDateTime(DateTime.Now.ToString("hh:mm tt")) > Convert.ToDateTime(issuetotimehdn.Value))
                        {
                            return true;
                        }

                    }
                }
                else
                {
                    return false;
                }

                //if (Convert.ToDateTime(DateTime.Now.ToString("hh:mm tt")) < Convert.ToDateTime(LblST.Text) && Convert.ToDateTime(DateTime.Now.ToString("hh:mm tt")) > Convert.ToDateTime(LblET.Text))
                //{
                //    return true;
                //}
            }
            catch (Exception ex)
            {
                BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText(" IPOBidFileDetailsOffline try catch: " + ex);
                ExceptionLogging.SendErrorToText("T", "", ex.Message.ToString());


            }
            BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("Check the Condition either Apply Online Or Offline mode:validateoffline");
            return false;

        }
        public static string Encrypt(X509Certificate2 x509, string stringToEncrypt)
        {
            if (x509 == null || string.IsNullOrEmpty(stringToEncrypt))
                throw new Exception("A x509 certificate and string for encryption must be provided");

            RSACryptoServiceProvider rsa = (RSACryptoServiceProvider)x509.PublicKey.Key;
            byte[] bytestoEncrypt = ASCIIEncoding.ASCII.GetBytes(stringToEncrypt);
            byte[] encryptedBytes = rsa.Encrypt(bytestoEncrypt, false);
            return Convert.ToBase64String(encryptedBytes);
        }
        public string Decryptfile(string stringTodecrypt)
        {
            try
            {
                RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(512);
                TextReader readerPublic = File.OpenText(HttpContext.Current.Server.MapPath("/PaymentGateway/tradeplus4096Pe.xml"));
                rsa.FromXmlString(readerPublic.ReadToEnd());
                readerPublic.Close();

                byte[] getData = Convert.FromBase64String(stringTodecrypt);
                byte[] plain = rsa.Decrypt(getData, false);
                string decryptedData = System.Text.Encoding.UTF8.GetString(plain);
                return decryptedData;
            }
            catch (Exception ex)
            {
                return ex.Message.ToString();
            }
        }
        public class BSEIPOFetchRes
        {
            public string res { get; set; }
            public int Rescode { get; set; }
        }
        public BSEIPOFetchRes postData2BSEApp(string pRequestJson, string token, string method)
        {
            BSEIPOFetchRes obj = new BSEIPOFetchRes();
            HttpWebRequest lhttpRequest = null;
            string lServiceUrl = "";
            string reqjson = "";
            string checksum = "";
            if (method == "ipoorder")
            {
                lServiceUrl = ConfigurationManager.AppSettings["IPOURL"].ToString() + "ibbsapi/iBBSAPIService.svc/v1/" + method;
                //reqjson = (new JavaScriptSerializer()).Serialize(pRequestJson);

                // checksum = EncryptText(pRequestJson, ConfigurationManager.AppSettings["IBBSKEY"].ToString());
            }
            else
            {
                lServiceUrl = ConfigurationManager.AppSettings["IPOURL"].ToString() + "ibbsmsgapi/iBBSWebBroadcastApi.svc/v1/" + method;
            }
            //string lServiceUrl = "https://uat.bseindia.in/ibbsapi/iBBSAPIService.svc/v1/"+ method;
            //string lServiceUrl = "https://uat.bseindia.in/ibbsmsgapi/iBBSWebBroadcastApi.svc/v1/login";
            string loutpout_Response = "";
            //IPOAddreqOP jsonmainobj = JsonConvert.DeserializeObject<IPOAddreqOP>(mainres);
            string res = ""; int rescode = 0;
            try
            {
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls | SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                //ServicePointManager.SecurityProtocol = (SecurityProtocolType)768 | (SecurityProtocolType)3072;
                //System.Net.ServicePointManager.ServerCertificateValidationCallback = Function(Object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);

                ServicePointManager.ServerCertificateValidationCallback = delegate (object sender, System.Security.Cryptography.X509Certificates.X509Certificate pCertificate, System.Security.Cryptography.X509Certificates.X509Chain pChain, System.Net.Security.SslPolicyErrors pSSLPolicyErrors) { return true; };

                //lhttpRequest = DirectCast(WebRequest.Create(new Uri(lServiceUrl)), HttpWebRequest);
                lhttpRequest = (HttpWebRequest)WebRequest.Create(new Uri(lServiceUrl));
                lhttpRequest.Accept = "application/json";
                lhttpRequest.ContentType = "application/json";
                lhttpRequest.KeepAlive = false;
                lhttpRequest.Method = "POST";
                lhttpRequest.Headers.Add("Membercode", ConfigurationManager.AppSettings["membercode"].ToString());
                lhttpRequest.Headers.Add("Login", ConfigurationManager.AppSettings["loginid"].ToString());
                lhttpRequest.Headers.Add("Token", token);
                if (method == "ipoorder")
                {
                    lhttpRequest.Headers.Add("Checksum", checksum);

                }
                //IWebProxy proxy = lhttpRequest.Proxy;
                //if (proxy != null)
                //{
                //    string proxyuri = "http://proxy.bseltd.domain:8080/";
                //    lhttpRequest.UseDefaultCredentials = true;
                //    lhttpRequest.Proxy = new WebProxy(proxyuri, false);
                //    lhttpRequest.Proxy.Credentials = System.Net.CredentialCache.DefaultCredentials;
                //}

                byte[] bytes1 = Encoding.UTF8.GetBytes(pRequestJson);
                using (Stream stream = lhttpRequest.GetRequestStream())
                {
                    stream.Write(bytes1, 0, bytes1.Length);
                    stream.Close();
                }

            }
            catch (Exception ex)
            {
                //using (HttpWebResponse httpResponse= DirectCast(lhttpRequest.GetResponse(), HttpWebResponse))
                //lblresult.Text = ex.Message.ToString();
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            try
            {
                using (HttpWebResponse httpResponse = (HttpWebResponse)lhttpRequest.GetResponse())
                {
                    using (Stream strm = httpResponse.GetResponseStream())
                    {
                        rescode = Convert.ToInt32(httpResponse.StatusCode);
                        loutpout_Response = (new StreamReader(strm)).ReadToEnd();
                        string str = "Request:- " + pRequestJson + " \n Response:-" + loutpout_Response.ToString();

                        res = loutpout_Response;
                        obj.res = res;
                        obj.Rescode = rescode;
                        ExceptionLogging.SendErrorToText(pRequestJson, res, lServiceUrl);


                    }
                }
            }
            catch (Exception ex)
            {
                ExceptionLogging.SendErrorToText(pRequestJson, loutpout_Response, ex.Message.ToString() + "||" + lServiceUrl);
                //lblresult.Text = ex.Message.ToString();
            }
            return obj;
        }

        protected void rep_recentlyclosed_ItemDataBound(object sender, RepeaterItemEventArgs e)
        {
            try
            {
                System.Web.UI.HtmlControls.HtmlGenericControl gaindiv = (System.Web.UI.HtmlControls.HtmlGenericControl)e.Item.FindControl("Gaindiv");
                if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
                {
                    DataRowView dr = e.Item.DataItem as DataRowView;
                    if (dr["AllotmentPrice"].ToString() != "" && dr["AllotmentPrice"].ToString() != null && dr["ListingPrice"].ToString() != "" && dr["ListingPrice"].ToString() != null)
                    {
                        decimal allotmentprice = Convert.ToDecimal(dr["AllotmentPrice"].ToString());
                        decimal listprice = Convert.ToDecimal(dr["ListingPrice"].ToString());
                        decimal gain = ((listprice - allotmentprice) / listprice) * 100;
                        gaindiv.InnerHtml = FormatFunctions.C_Format.M_FormatNumber(gain.ToString(), "2", "0") + "%" + "<p class='show-head-mobile'>Listing Day Gains</p>";
                    }
                    else
                    {
                        gaindiv.InnerHtml = "N.A <p class='show-head-mobile'>Listing Day Gains</p>";
                    }

                }
            }
            catch (Exception ex)

            {
                BusinessData.ExceptionLogging.SendErrorToText("", "", ex.Message.ToString());

            }

        }

        protected void rep_open_ItemDataBound(object sender, RepeaterItemEventArgs e)
        {
            System.Web.UI.HtmlControls.HtmlGenericControl btnopenapply = (System.Web.UI.HtmlControls.HtmlGenericControl)e.Item.FindControl("dvbtnn");
            //System.Web.UI.HtmlControls.HtmlButton btnCancel = (System.Web.UI.HtmlControls.HtmlButton)e.Item.FindControl("btncancel");
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                DataRowView dr = e.Item.DataItem as DataRowView;
                if (dr["UploadType"].ToString().Trim().ToLower() == "manual")
                {
                    if (dr["ApplyStatus"].ToString().Trim().ToLower() == "t")
                    {
                        btnopenapply.Visible = true;
                    }
                    else
                    {
                        //btnopenapply.Visible = false;
                        btnopenapply.InnerHtml = "";
                    }
                }
            }
        }

        public void category_dropdown()
        {
            SqlParameter[] param = { new SqlParameter("@symbolhdn", symbolhdn.Value) };
            //string sqlcat = "select DISTINCT A.CStatus,A.Category from IPOCategoryMaster a inner join ipomaster b on a.CStatus=b.IPO_cat WHERE B.IPO_SymBse='" + symbolhdn.Value + "'";
            string sqlcat = "select DISTINCT A.CStatus,A.Category from IPOCategoryMaster a inner join ipomaster b on a.CStatus=b.IPO_cat WHERE B.IPO_SymBse=@symbolhdn";
            DataSet catds = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, sqlcat, param);
            if (catds != null && catds.Tables[0].Rows.Count > 0)
            {
                category_drp.DataSource = catds;
                category_drp.DataValueField = "Category";
                category_drp.DataTextField = "CStatus";
                category_drp.DataBind();
            }
        }

        protected void rep_upcoming_ItemDataBound(object sender, RepeaterItemEventArgs e)
        {
            System.Web.UI.HtmlControls.HtmlGenericControl upbtnopenapply = (System.Web.UI.HtmlControls.HtmlGenericControl)e.Item.FindControl("upbtn_apply");
            //System.Web.UI.HtmlControls.HtmlButton btnCancel = (System.Web.UI.HtmlControls.HtmlButton)e.Item.FindControl("btncancel");
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                DataRowView dr = e.Item.DataItem as DataRowView;
                if (dr["UploadType"].ToString().Trim().ToLower() == "manual")
                {
                    if (dr["ApplyStatus"].ToString().Trim().ToLower() == "t" && dr["ipo_issuefrm"].ToString() != "" && dr["ipo_issueto"].ToString() != "" && dr["ipo_mtimfrm"].ToString() != "" && dr["ipo_mtimto"].ToString() != "")
                    {
                        upbtnopenapply.Visible = true;
                    }
                    else
                    {
                        //btnopenapply.Visible = false;
                        upbtnopenapply.InnerHtml = "";
                    }
                }
            }
        }

        protected void cancelbtn_ServerClick(object sender, EventArgs e)
        {
            BusinessData.NSE_ExceptionLogging.uservalidationcancel_log(Applicantname, panno, DPId, txtupiid.Value,"applycancel");
        }

        [WebMethod]
        public static string fillipocategory_discount(string Category, string Symbol, string exc)
        {

            string sqlcon = ConfigurationManager.ConnectionStrings["IPOOnline"].ToString();
            string strsql = "";
            if (exc == "NSE")
            {
                // strsql = "select ipo_discount,ipo_discount_type from nse_ipomaster where ipo_symbse ='" + Symbol + "'  and cast(ipo_cat as varchar(50))  = '" + Category + "'";
                strsql = "select ipo_discount,ipo_discount_type from nse_ipomaster where ipo_symbse =@Symbol  and cast(ipo_cat as varchar(50))  = @Category";
            }
            else
            {
                //strsql = "select ipo_discount,ipo_discount_type from ipomaster where ipo_symbse ='" + Symbol + "'  and cast(ipo_cat as varchar(50))  = '" + Category + "'";
                strsql = "select ipo_discount,ipo_discount_type from ipomaster where ipo_symbse =@Symbol  and cast(ipo_cat as varchar(50))  = @Category";
            }
            SqlParameter[] param = { new SqlParameter("@Symbol", Symbol),
                              new SqlParameter("@Category", Category) };
            DataSet ds = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, strsql, param);
            string result = null;
            if (ds != null && ds.Tables[0].Rows.Count > 0)
            {

                if (ds.Tables[0].Rows[0]["ipo_discount_type"].ToString() == "3" || ds.Tables[0].Rows[0]["ipo_discount_type"].ToString() == "P")
                {
                    result = "(in %) :";
                }
                else
                {
                    result = "(in ₹ ) :";
                }
                result += '|' + (ds.Tables[0].Rows[0]["ipo_discount"].ToString().Trim());

            }

            return result;
        }
        //public void postData2BSE(string method)
        //{
        //    string pRequestJson = "";
        //    string pChecksum = "";
        //    loginrequest req = new loginrequest();
        //    //req.membercode = "6635";
        //    //req.loginid = "PROSTOCKSUAT";
        //    //req.password = "Pro@1234"; //Ram@2016 //123456 //Pro@1234
        //    //req.ibbsid = "3H815YDMU9";//3H815YDMU9   //36CQZDROHE //V5ON4MSE2K
        //    BSEIPO bseipo = new BSEIPO();
        //    req.membercode = ConfigurationManager.AppSettings["membercode"].ToString();
        //    req.loginid = ConfigurationManager.AppSettings["loginid"].ToString();
        //    //req.password = ConfigurationManager.AppSettings["password"].ToString(); //Ram@2016 //123456 //Pro@1234
        //    req.password = bseipo.oldpassword();

        //    req.ibbsid = ConfigurationManager.AppSettings["IBBSID"].ToString();//3H815YDMU9   //36CQZDROHE

        //    string reqjson = "";
        //    reqjson = (new JavaScriptSerializer()).Serialize(req);
        //    //string checksum = EncryptText(reqjson, ConfigurationManager.AppSettings["IBBSKEY"].ToString());
        //    string checksum = "";
        //    pRequestJson = reqjson;
        //    pChecksum = checksum;

        //    HttpWebRequest lhttpRequest = null;
        //    string lServiceUrl = "";
        //    if (method == "order")
        //    {
        //        lServiceUrl = ConfigurationManager.AppSettings["IPOURL"].ToString() + "ibbsapi/iBBSAPIService.svc/v1/login";
        //    }
        //    else
        //    {
        //        lServiceUrl = ConfigurationManager.AppSettings["IPOURL"].ToString() + "ibbsmsgapi/iBBSWebBroadcastApi.svc/v1/login";

        //    }

        //    //string lServiceUrl = "https://uat.bseindia.in/ibbsapi/iBBSAPIService.svc/v1/login";
        //    //string lServiceUrl = "https://uat.bseindia.in/ibbsmsgapi/iBBSWebBroadcastApi.svc/v1/login";
        //    string loutpout_Response = "";
        //    try
        //    {
        //        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls | SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
        //        //ServicePointManager.SecurityProtocol = (SecurityProtocolType)768 | (SecurityProtocolType)3072;
        //        //System.Net.ServicePointManager.ServerCertificateValidationCallback = Function(Object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);

        //        ServicePointManager.ServerCertificateValidationCallback = delegate (object sender, System.Security.Cryptography.X509Certificates.X509Certificate pCertificate, System.Security.Cryptography.X509Certificates.X509Chain pChain, System.Net.Security.SslPolicyErrors pSSLPolicyErrors) { return true; };

        //        //lhttpRequest = DirectCast(WebRequest.Create(new Uri(lServiceUrl)), HttpWebRequest);
        //        lhttpRequest = (HttpWebRequest)WebRequest.Create(new Uri(lServiceUrl));
        //        lhttpRequest.Accept = "application/json";
        //        lhttpRequest.ContentType = "application/json";
        //        lhttpRequest.KeepAlive = false;
        //        lhttpRequest.Method = "POST";
        //        lhttpRequest.Headers.Add("Checksum", pChecksum);
        //        //IWebProxy proxy = lhttpRequest.Proxy;
        //        //if (proxy != null)
        //        //{
        //        //    string proxyuri = "http://proxy.bseltd.domain:8080/";
        //        //    lhttpRequest.UseDefaultCredentials = true;
        //        //    lhttpRequest.Proxy = new WebProxy(proxyuri, false);
        //        //    lhttpRequest.Proxy.Credentials = System.Net.CredentialCache.DefaultCredentials;
        //        //}

        //        byte[] bytes1 = Encoding.UTF8.GetBytes(pRequestJson);
        //        using (Stream stream = lhttpRequest.GetRequestStream())
        //        {
        //            stream.Write(bytes1, 0, bytes1.Length);
        //            stream.Close();
        //        }

        //    }
        //    catch (Exception ex)
        //    {
        //        //using (HttpWebResponse httpResponse= DirectCast(lhttpRequest.GetResponse(), HttpWebResponse))
        //        //lblresult.Text = ex.Message.ToString();
        //    }
        //    JavaScriptSerializer serializer = new JavaScriptSerializer();
        //    try
        //    {
        //        using (HttpWebResponse httpResponse = (HttpWebResponse)lhttpRequest.GetResponse())
        //        {
        //            using (Stream strm = httpResponse.GetResponseStream())
        //            {
        //                loutpout_Response = (new StreamReader(strm)).ReadToEnd();
        //                string str = "Request:- " + pRequestJson + " \n Response:-" + loutpout_Response.ToString();
        //                var jsonobj = new JavaScriptSerializer().Deserialize<Dictionary<string, string>>(loutpout_Response);
        //                string errorcode = jsonobj["errorcode"];
        //                string token = jsonobj["token"];
        //                Session["IPOtoken"] = token;
        //                string errormsg = jsonobj["message"];
        //                ExceptionLogging.SendErrorToText(pRequestJson, loutpout_Response, lServiceUrl);
        //                if (errorcode == "0")
        //                {
        //                    //lblresult.Text = str + "|| Token :" + token;

        //                }
        //                else
        //                {
        //                    //lblresult.Text = str + "|| Error msg :" + errormsg;
        //                }

        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        ExceptionLogging.SendErrorToText(pRequestJson, loutpout_Response, ex.Message.ToString() + "||" + lServiceUrl);
        //        //lblresult.Text = ex.Message.ToString();
        //    }
        //}

        public class BSEIPOAPPNo
        {
            public string result { get; set; }
            public int Rescode { get; set; }
        }

        public BSEIPOAPPNo postData2BSEAPPNO(string pRequestJson, string token)
        {
            BSEIPOAPPNo obj = new BSEIPOAPPNo();
            HttpWebRequest lhttpRequest = null;
            string lServiceUrl = ConfigurationManager.AppSettings["IPOURL"].ToString() + "ibbsmsgapi/iBBSWebBroadcastApi.svc/v1/eforms";
            string loutpout_Response = "";
            try
            {
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls | SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                //ServicePointManager.SecurityProtocol = (SecurityProtocolType)768 | (SecurityProtocolType)3072;
                //System.Net.ServicePointManager.ServerCertificateValidationCallback = Function(Object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);

                ServicePointManager.ServerCertificateValidationCallback = delegate (object sender, System.Security.Cryptography.X509Certificates.X509Certificate pCertificate, System.Security.Cryptography.X509Certificates.X509Chain pChain, System.Net.Security.SslPolicyErrors pSSLPolicyErrors) { return true; };

                //string checksum = "";
                //checksum = EncryptText(pRequestJson, ConfigurationManager.AppSettings["IBBSKEY"].ToString());

                //lhttpRequest = DirectCast(WebRequest.Create(new Uri(lServiceUrl)), HttpWebRequest);
                lhttpRequest = (HttpWebRequest)WebRequest.Create(new Uri(lServiceUrl));
                lhttpRequest.Accept = "application/json";
                lhttpRequest.ContentType = "application/json";
                lhttpRequest.KeepAlive = false;
                lhttpRequest.Method = "POST";
                lhttpRequest.Headers.Add("Membercode", ConfigurationManager.AppSettings["membercode"].ToString());
                lhttpRequest.Headers.Add("Login", ConfigurationManager.AppSettings["loginid"].ToString());
                lhttpRequest.Headers.Add("Token", token);
                //lhttpRequest.Headers.Add("Checksum", checksum);

                //IWebProxy proxy = lhttpRequest.Proxy;
                //if (proxy != null)
                //{
                //    string proxyuri = "http://proxy.bseltd.domain:8080/";
                //    lhttpRequest.UseDefaultCredentials = true;
                //    lhttpRequest.Proxy = new WebProxy(proxyuri, false);
                //    lhttpRequest.Proxy.Credentials = System.Net.CredentialCache.DefaultCredentials;
                //}

                if (pRequestJson != "")
                {
                    byte[] bytes1 = Encoding.UTF8.GetBytes(pRequestJson);
                    using (Stream stream = lhttpRequest.GetRequestStream())
                    {
                        stream.Write(bytes1, 0, bytes1.Length);
                        stream.Close();
                    }
                }

            }
            catch (Exception ex)
            {
                BusinessData.ExceptionLogging.SendErrorToText("", "", ex.Message.ToString());
                //using (HttpWebResponse httpResponse= DirectCast(lhttpRequest.GetResponse(), HttpWebResponse))
                //lblresult.Text = ex.Message.ToString();
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string res = ""; int rescode = 0;
            try
            {
                using (HttpWebResponse httpResponse = (HttpWebResponse)lhttpRequest.GetResponse())
                {
                    using (Stream strm = httpResponse.GetResponseStream())
                    {
                        rescode = Convert.ToInt32(httpResponse.StatusCode);
                        loutpout_Response = (new StreamReader(strm)).ReadToEnd();
                        string str = "Request:- " + pRequestJson + " \n Response:-" + loutpout_Response.ToString();
                        BusinessData.ExceptionLogging.SendErrorToText(pRequestJson, loutpout_Response, lServiceUrl);
                        res = loutpout_Response;
                        obj.result = res;
                        obj.Rescode = rescode;

                        //lblopen.Text = str;
                        //var jsonobj = new JavaScriptSerializer().Deserialize<Dictionary<string, string>>(loutpout_Response);
                        //string errorcode = jsonobj["errorcode"];
                        //if (errorcode == "0")
                        //{
                        //DataTable dt = new DataTable();
                        //dt = (DataTable)JsonConvert.DeserializeObject(loutpout_Response, (typeof(DataTable)));
                        // insertOpenIPO(dt);
                        //}
                        //else
                        //{

                        //}

                    }
                }
            }
            catch (Exception ex)
            {
                BusinessData.ExceptionLogging.SendErrorToText(pRequestJson, loutpout_Response, ex.Message.ToString());
                //lblresult.Text = ex.Message.ToString();
            }
            return obj;
        }

        public string calculategain(string ap, string lp)
        {
            if (ap != "" && ap != null && lp != "" && lp != null)
            {
                double allotmentprice = Convert.ToDouble(ap);
                double listprice = Convert.ToDouble(ap);
                double gain = ((listprice - allotmentprice) / listprice) * 100;
                return gain.ToString();
            }
            else
            {
                return "N.A";
            }
        }

        //protected void pdfdownloader(object sender, RepeaterItemEventArgs e)
        //{
        //    Response.ContentType = "Application/pdf";
        //    Response.AppendHeader("Content-Disposition", "attachment; filename=abc.pdf");
        //    Response.TransmitFile(Server.MapPath("~/doc/help.pdf"));
        //    Response.End();
        //}
        [WebMethod]
        public static string Retrievecategory(string catsymbol, string exc)
        {
            string sqlcon = ConfigurationManager.ConnectionStrings["IPOOnline"].ToString();
            string sqlcat = "";
            if (exc == "NSE")
            {
                //sqlcat = "select DISTINCT A.CStatus,A.Category from IPOCategoryMaster a inner join nse_ipomaster b on a.CStatus=b.IPO_cat WHERE B.IPO_SymBse='" + catsymbol + "'";
                sqlcat = "select DISTINCT A.CStatus,A.Category from IPOCategoryMaster a inner join nse_ipomaster b on a.CStatus=b.IPO_cat WHERE B.IPO_SymBse=@catsymbol";
            }
            else
            {
                //sqlcat = "select DISTINCT A.CStatus,A.Category from IPOCategoryMaster a inner join ipomaster b on a.CStatus=b.IPO_cat WHERE B.IPO_SymBse='" + catsymbol + "'";
                sqlcat = "select DISTINCT A.CStatus,A.Category from IPOCategoryMaster a inner join ipomaster b on a.CStatus=b.IPO_cat WHERE B.IPO_SymBse=@catsymbol";
            }
            SqlParameter[] param = { new SqlParameter("@catsymbol", catsymbol) };
            DataSet catds = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, sqlcat, param);
            string result = null;

            if (catds != null)
            {
                if (catds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < catds.Tables[0].Rows.Count; i++)
                    {
                        result += catds.Tables[0].Rows[i]["Category"].ToString().Trim() + "~" + catds.Tables[0].Rows[i]["CStatus"].ToString().Trim() + "|";
                    }
                    result = result.TrimEnd('|');
                }
            }
            return result;
        }
        public class NSEIPOAPPNo
        {
            public string result { get; set; }
            public string response { get; set; }
            public int Rescode { get; set; }
        }
        public NSEIPOAPPNo postData2NSEAPPNO(string pRequestJson, string token)
        {
            NSEIPOAPPNo obj = new NSEIPOAPPNo();
            HttpWebRequest lhttpRequest = null;
            string lServiceUrl = ConfigurationManager.AppSettings["NSE_IPOURL_LIVE"].ToString() + "eipo/v1/eforms/add";

            BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("Eforms Url For NSE:" + lServiceUrl);//log url
            string loutpout_Response = "";
            string res = ""; int rescode = 0;
            try
            {
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls | SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;

                lhttpRequest = (HttpWebRequest)WebRequest.Create(new Uri(lServiceUrl));
                lhttpRequest.Accept = "application/json";
                lhttpRequest.ContentType = "application/json";
                lhttpRequest.KeepAlive = false;
                lhttpRequest.Method = "POST";
                lhttpRequest.Headers.Add("Access-Token", token);

                if (pRequestJson != "")
                {
                    byte[] bytes1 = Encoding.UTF8.GetBytes(pRequestJson);
                    using (Stream stream = lhttpRequest.GetRequestStream())
                    {
                        stream.Write(bytes1, 0, bytes1.Length);
                        stream.Close();
                    }
                }
                BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("Eforms Request For NSE:" + pRequestJson);//req log
                using (HttpWebResponse httpResponse = (HttpWebResponse)lhttpRequest.GetResponse())
                {
                    using (Stream strm = httpResponse.GetResponseStream())
                    {
                        rescode = Convert.ToInt32(httpResponse.StatusCode);
                        loutpout_Response = (new StreamReader(strm)).ReadToEnd();
                        string str = "Request:- " + pRequestJson + " \n Response:-" + loutpout_Response.ToString();
                        BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("Eforms Response For NSE:" + loutpout_Response.ToString());//res logg
                        res = loutpout_Response;
                        obj.result = res;
                        // obj.response = loutpout_Response.Contains("reason").ToString();
                        obj.Rescode = rescode;
                    }
                }
            }
            catch (Exception ex)
            {
                BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("Eforms Error For NSE:" + ex.Message.ToString());

            }
            return obj;
        }


        public class NSEIPOFetchRes
        {
            public string res { get; set; }
            public int Rescode { get; set; }
        }
        public NSEIPOFetchRes postData2NSEIPOFetch(string pRequestJson, string token)
        {
            NSEIPOFetchRes obj = new NSEIPOFetchRes();
            HttpWebRequest lhttpRequest = null;
            string lServiceUrl = "";


            lServiceUrl = ConfigurationManager.AppSettings["NSE_IPOURL_LIVE"].ToString() + "eipo/v1/transactions/add";

            BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("IPO Added Url For NSE:" + lServiceUrl);//log url
            string loutpout_Response = "";

            string res = ""; int rescode = 0;
            try
            {
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls | SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                lhttpRequest = (HttpWebRequest)WebRequest.Create(new Uri(lServiceUrl));
                lhttpRequest.Accept = "application/json";
                lhttpRequest.ContentType = "application/json";
                lhttpRequest.KeepAlive = false;
                lhttpRequest.Method = "POST";
                lhttpRequest.Headers.Add("Access-Token", token);



                byte[] bytes1 = Encoding.UTF8.GetBytes(pRequestJson);
                using (Stream stream = lhttpRequest.GetRequestStream())
                {
                    stream.Write(bytes1, 0, bytes1.Length);
                    stream.Close();
                }
                BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("IPO Added Request For NSE:" + pRequestJson);//log req
                using (HttpWebResponse httpResponse = (HttpWebResponse)lhttpRequest.GetResponse())
                {
                    using (Stream strm = httpResponse.GetResponseStream())
                    {
                        rescode = Convert.ToInt32(httpResponse.StatusCode);
                        loutpout_Response = (new StreamReader(strm)).ReadToEnd();
                        string str = "Request:- " + pRequestJson + " \n Response:-" + loutpout_Response.ToString();

                        res = loutpout_Response;
                        NSE_ExceptionLogging.NSE_SendErrorToText("IPO Added Response For NSE:" + loutpout_Response);//log res
                        obj.res = res;
                        obj.Rescode = rescode;

                    }
                }
            }
            catch (Exception ex)
            {
                NSE_ExceptionLogging.NSE_SendErrorToText("IPO Added Error For NSE:" + ex.Message.ToString());

            }
            return obj;
        }


        public void offlinemethod()
        {
            BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText(" Apply the IPO in Offline for (Reason :market is not open) : ");
            if (exchanges.Value == "NSE")
            {
                BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText(" Apply the IPO in Offline for NSE Query (Reason :market is not open): ");
                #region offlinevalidation NSE
                SqlParameter[] param = { new SqlParameter("@txtupiid", txtupiid.Value.Trim()),
                                                     new SqlParameter("@clcode", clcode),
                                        new SqlParameter("@symbolhdn", symbolhdn.Value),
                                        new SqlParameter("@categoryhdn", categoryhdn.Value)};

                // string sqlExistoff = "select * from IPOBidFileDetailsOffline where Exchange='NSE' and uccId='" + clcode + "' and Symbol='" + symbolhdn.Value + "' and Category='" + categoryhdn.Value + "' and Status='pending' ";
                string sqlExistoff = "select * from IPOBidFileDetailsOffline where Exchange='NSE' and uccId=@clcode and Symbol=@symbolhdn and Category=@categoryhdn and Status='pending' ";
                BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText(" Apply the IPO in Offline for NSE Query : " + sqlExistoff);
                DataSet dsExistoff = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, sqlExistoff, param);
                // DataSet dsExistoff = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, sqlExistoff);
                if (dsExistoff != null && dsExistoff.Tables[0].Rows.Count > 0)
                {
                    BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("You have already applied for this IPO in offline mode for NSE: " + sqlExistoff);
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "success", "offlinealreadyapplied();", true);
                    //ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('You have already applied for this IPO in offline mode.');window.location='/orders.aspx';", true);
                }
                #region
                else
                {
                    #region Get values
                    bool CutoffFlag1, CutoffFlag2, CutoffFlag3;
                    string ChqRecFlag = "", OrderedBY = "", PlacedBy = "", depository = "", dp1 = "", dp2 = "", CategoryName = "", Tupiid = "", symbol = "", discounttype = "", AppNo = "";
                    int bidcount = 0, quantity1 = 0, quantity2 = 0, quantity3 = 0;
                    decimal Bprice1 = 0, Bprice2 = 0, Bprice3 = 0, amount1 = 0, amount2 = 0, amount3 = 0;
                    double calNetAmount1 = 0, calNetAmount2 = 0, calNetAmount3 = 0, DiscountValue1 = 0, DiscountValue2 = 0, DiscountValue3 = 0;
                    double NetAmount1 = 0, NetAmount2 = 0, NetAmount3 = 0;
                    double discountcalAmount1 = 0, discountcalAmount2 = 0, discountcalAmount3 = 0;
                    string insertqry1 = ""; int formType = 1;
                    CutoffFlag1 = cutoff1.Checked == true ? true : false;
                    CutoffFlag2 = cutoff2.Checked == true ? true : false;
                    CutoffFlag3 = cutoff3.Checked == true ? true : false;

                    if (CutoffFlag1 == true || CutoffFlag2 == true || CutoffFlag3 == true)
                        ChqRecFlag = "N";
                    else
                        ChqRecFlag = "Y";

                    CategoryName = categoryhdn.Value.ToString().ToUpper();
                    Tupiid = txtupiid.Value.Trim();
                    symbol = symbolhdn.Value;
                    discounttype = discounttypehdn.Value;
                    OrderedBY = Session["OrderedBY"].ToString();
                    PlacedBy = Session["PlacedBY"].ToString();
                    Session["BankName"] = "8888".ToString().PadRight(6);
                    Session["Location"] = "UPIIDL".ToString().PadRight(6);
                    depository = Session["Depository"].ToString();
                    string accntpayer = txtupiid.Value.Trim();
                    Session["AccNo"] = accntpayer.Trim();
                    Random rn = new Random();
                    int ReferenceNo = rn.Next(99999999);
                    if (depository == "CDSL")
                    {
                        dp1 = "0";
                        dp2 = DPId;
                    }
                    else if (depository == "NSDL")
                    {
                        dp1 = DPId.Substring(0, 8);
                        dp2 = DPId.Substring(8, 8);
                    }

                    if (lot1.Value != "" && price1.Value != "") { bidcount += 1; }
                    if (lot2.Value != "" && price2.Value != "") { bidcount += 1; }
                    if (lot3.Value != "" && price3.Value != "") { bidcount += 1; }


                    if (CategoryName == "EMP" || CategoryName == "SHA")
                        formType = 3;



                    #region eformoffline
                    if (bidcount.ToString() != "")
                    {
                        if (bidcount > 0)
                        {
                            double DiscountAmount = 0;
                            DiscountValue1 = Convert.ToDouble(discounthdn.Value);
                            quantity1 = (Convert.ToInt32(lot1.Value) * Convert.ToInt32(minqty.Value));
                            Bprice1 = Convert.ToDecimal(price1.Value);


                            NetAmount1 = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price1.Value);
                            if (discounttypehdn.Value == "P")
                                DiscountValue1 = Convert.ToDouble(price1.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                            DiscountAmount = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * DiscountValue1;
                            calNetAmount1 = Convert.ToDouble(NetAmount1 - DiscountAmount);



                            if (calNetAmount1 < 200000)
                                discountcalAmount1 = calNetAmount1;
                            else
                                discountcalAmount1 = NetAmount1;

                            //amount1 = quantity1 * Bprice1;
                            amount1 = Convert.ToDecimal(discountcalAmount1);
                        }
                        if (bidcount > 1)
                        {
                            double DiscountAmount = 0;
                            DiscountValue2 = Convert.ToDouble(discounthdn.Value);
                            quantity2 = (Convert.ToInt32(lot2.Value) * Convert.ToInt32(minqty.Value));
                            Bprice2 = Convert.ToDecimal(price2.Value);

                            NetAmount2 = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price2.Value);
                            if (discounttypehdn.Value == "P")
                                DiscountValue2 = Convert.ToDouble(price2.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                            DiscountAmount = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * DiscountValue2;
                            calNetAmount2 = Convert.ToDouble(NetAmount2 - DiscountAmount);


                            if (calNetAmount2 < 200000)
                                discountcalAmount2 = calNetAmount2;
                            else
                                discountcalAmount2 = NetAmount2;

                            // amount2 = quantity2 * Bprice2;
                            amount2 = Convert.ToDecimal(discountcalAmount2);
                        }
                        if (bidcount > 2)
                        {
                            double DiscountAmount = 0;
                            DiscountValue3 = Convert.ToDouble(discounthdn.Value);
                            quantity3 = (Convert.ToInt32(lot3.Value) * Convert.ToInt32(minqty.Value));
                            Bprice3 = Convert.ToDecimal(price3.Value);


                            NetAmount3 = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price3.Value);
                            if (discounttypehdn.Value == "P")
                                DiscountValue3 = Convert.ToDouble(price3.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                            DiscountAmount = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * DiscountValue3;
                            calNetAmount3 = Convert.ToDouble(NetAmount3 - DiscountAmount);

                            if (calNetAmount3 < 200000)
                                discountcalAmount3 = calNetAmount3;
                            else
                                discountcalAmount3 = NetAmount3;
                            //amount3 = quantity3 * Bprice3;
                            amount3 = Convert.ToDecimal(discountcalAmount3);
                        }

                    }

                    ApplicationBid[] NSEappbid = new ApplicationBid[bidcount];
                    if (bidcount > 0)
                    {
                        double DiscountAmount = 0;
                        DiscountValue1 = Convert.ToDouble(discounthdn.Value);
                        NSEappbid[0] = new ApplicationBid();
                        NSEappbid[0].quantity = quantity1;
                        NSEappbid[0].atCutOff = CutoffFlag1;
                        NSEappbid[0].price = Bprice1;

                        NetAmount1 = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price1.Value);
                        if (discounttypehdn.Value == "P")
                            DiscountValue1 = Convert.ToDouble(price1.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                        DiscountAmount = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * DiscountValue1;
                        calNetAmount1 = Convert.ToDouble(NetAmount1 - DiscountAmount);



                        if (calNetAmount1 < 200000)
                            discountcalAmount1 = calNetAmount1;
                        else
                            discountcalAmount1 = NetAmount1;


                        NSEappbid[0].amount = Convert.ToDecimal(discountcalAmount1);
                    }

                    if (bidcount > 1)
                    {
                        double DiscountAmount = 0;
                        DiscountValue2 = Convert.ToDouble(discounthdn.Value);
                        NSEappbid[1] = new ApplicationBid();
                        NSEappbid[1].quantity = quantity2;
                        NSEappbid[1].atCutOff = CutoffFlag2;
                        NSEappbid[1].price = Bprice2;

                        NetAmount2 = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price2.Value);
                        if (discounttypehdn.Value == "P")
                            DiscountValue2 = Convert.ToDouble(price2.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                        DiscountAmount = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * DiscountValue2;
                        calNetAmount2 = Convert.ToDouble(NetAmount2 - DiscountAmount);


                        if (calNetAmount2 < 200000)
                            discountcalAmount2 = calNetAmount2;
                        else
                            discountcalAmount2 = NetAmount2;


                        NSEappbid[1].amount = Convert.ToDecimal(discountcalAmount2);
                    }

                    if (bidcount > 2)
                    {
                        double DiscountAmount = 0;
                        DiscountValue3 = Convert.ToDouble(discounthdn.Value);
                        NSEappbid[2] = new ApplicationBid();
                        NSEappbid[2].quantity = quantity3;
                        NSEappbid[2].atCutOff = CutoffFlag3;
                        NSEappbid[2].price = Bprice3;

                        NetAmount3 = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price3.Value);
                        if (discounttypehdn.Value == "P")
                            DiscountValue3 = Convert.ToDouble(price3.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                        DiscountAmount = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * DiscountValue3;
                        calNetAmount3 = Convert.ToDouble(NetAmount3 - DiscountAmount);

                        if (calNetAmount3 < 200000)
                            discountcalAmount3 = calNetAmount3;
                        else
                            discountcalAmount3 = NetAmount3;

                        NSEappbid[2].amount = Convert.ToDecimal(discountcalAmount3);
                    }

                    applicationNo NSEappno = new applicationNo();
                    NSEappno.symbol = symbol;
                    NSEappno.depository = depository;
                    NSEappno.dpId = dp1;
                    NSEappno.clientBenId = dp2;
                    NSEappno.pan = Session["Pan"].ToString().Trim();
                    NSEappno.category = CategoryName;
                    NSEappno.bankReferenceNo = "";
                    NSEappno.bankAccountNo = "";
                    NSEappno.bankNameBranch = "";
                    NSEappno.clientName = Session["ClientFname"].ToString().Trim();
                    NSEappno.clientAddress = "";
                    NSEappno.clientEmail = "";
                    NSEappno.clientTelephone = "";
                    NSEappno.formType = formType;
                    NSEappno.paymentType = "FULL";
                    NSEappno.nonASBA = false;
                    NSEappno.upiFlag = "Y";
                    NSEappno.upi = Tupiid;
                    NSEappno.bankCode = "";
                    NSEappno.locationCode = "";
                    NSEappno.syndMemCode = "";
                    NSEappno.brokerCode = "";
                    NSEappno.subBrokerCode = "";
                    NSEappno.bids = NSEappbid;
                    string EformReqJson = (new JavaScriptSerializer()).Serialize(NSEappno);

                    #endregion
                    if (bidcount > 0)
                    {
                        double DiscountAmount = 0;
                        DiscountValue1 = Convert.ToDouble(discounthdn.Value);
                        quantity1 = (Convert.ToInt32(lot1.Value) * Convert.ToInt32(minqty.Value));
                        Bprice1 = Convert.ToDecimal(price1.Value);

                        NetAmount1 = Convert.ToDouble(quantity1 * Bprice1);

                        if (discounttype == "P")
                            DiscountValue1 = Convert.ToDouble(Bprice1) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                        DiscountAmount = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * DiscountValue1;
                        calNetAmount1 = Convert.ToDouble(NetAmount1 - DiscountAmount);

                        if (calNetAmount1 < 200000)
                            discountcalAmount1 = calNetAmount1;
                        else
                            discountcalAmount1 = NetAmount1;

                        //amount1 = quantity1 * Bprice1;
                        amount1 = Convert.ToDecimal(discountcalAmount1);
                    }
                    if (bidcount > 1)
                    {
                        double DiscountAmount = 0;
                        DiscountValue2 = Convert.ToDouble(discounthdn.Value);
                        quantity2 = (Convert.ToInt32(lot2.Value) * Convert.ToInt32(minqty.Value));
                        Bprice2 = Convert.ToDecimal(price2.Value);

                        NetAmount2 = Convert.ToDouble(quantity2 * Bprice2);

                        if (discounttype == "P")
                            DiscountValue2 = Convert.ToDouble(Bprice2) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                        DiscountAmount = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * DiscountValue2;
                        calNetAmount2 = Convert.ToDouble(NetAmount2 - DiscountAmount);

                        if (calNetAmount2 < 200000)
                            discountcalAmount2 = calNetAmount2;
                        else
                            discountcalAmount2 = NetAmount2;

                        // amount2 = quantity2 * Bprice2;
                        amount2 = Convert.ToDecimal(discountcalAmount2);
                    }
                    if (bidcount > 2)
                    {
                        double DiscountAmount = 0;
                        DiscountValue3 = Convert.ToDouble(discounthdn.Value);
                        quantity3 = (Convert.ToInt32(lot3.Value) * Convert.ToInt32(minqty.Value));
                        Bprice3 = Convert.ToDecimal(price3.Value);

                        NetAmount3 = Convert.ToDouble(quantity3 * Bprice3);
                        if (discounttype == "P")
                            DiscountValue3 = Convert.ToDouble(Bprice3) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                        DiscountAmount = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * DiscountValue3;
                        calNetAmount3 = Convert.ToDouble(NetAmount3 - DiscountAmount);


                        if (calNetAmount3 < 200000)
                            discountcalAmount3 = calNetAmount3;
                        else
                            discountcalAmount3 = NetAmount3;

                        //amount3 = quantity3 * Bprice3;
                        amount3 = Convert.ToDecimal(discountcalAmount3);
                    }
                    #endregion


                    #region Transaction bid
                    //double maxamt1 = 0;
                    //double maxamt2 = 0;
                    //double maxamt3 = 0;


                    double max = 0;
                    //double dv = 0;
                    NSEBidsReq[] NSEbidreq = new NSEBidsReq[bidcount];
                    if (bidcount > 0)
                    {
                        double DiscountAmount = 0;
                        DiscountValue1 = Convert.ToDouble(discounthdn.Value);

                        NSEbidreq[0] = new NSEBidsReq();
                        NSEbidreq[0].activityType = "new";
                        NSEbidreq[0].quantity = quantity1;
                        NSEbidreq[0].atCutOff = CutoffFlag1;
                        NSEbidreq[0].price = Convert.ToDouble(Bprice1);

                        // NetAmount = Convert.ToDouble(NSEbidreq[0].quantity * NSEbidreq[0].price);
                        NetAmount1 = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price1.Value);
                        if (discounttypehdn.Value == "P")
                            DiscountValue1 = Convert.ToDouble(price1.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                        DiscountAmount = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * DiscountValue1;
                        calNetAmount1 = Convert.ToDouble(NetAmount1 - DiscountAmount);



                        if (calNetAmount1 < 200000)
                            discountcalAmount1 = calNetAmount1;
                        else
                            discountcalAmount1 = NetAmount1;

                        NSEbidreq[0].amount = discountcalAmount1;
                        NSEbidreq[0].remark = "";

                    }

                    if (bidcount > 1)
                    {
                        double DiscountAmount = 0;
                        DiscountValue2 = Convert.ToDouble(discounthdn.Value);
                        NSEbidreq[1] = new NSEBidsReq();
                        NSEbidreq[1].activityType = "new";
                        NSEbidreq[1].quantity = quantity2;
                        NSEbidreq[1].atCutOff = CutoffFlag2;
                        NSEbidreq[1].price = Convert.ToDouble(Bprice2);


                        NetAmount2 = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price2.Value);
                        if (discounttypehdn.Value == "P")
                            DiscountValue2 = Convert.ToDouble(price2.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                        DiscountAmount = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * DiscountValue2;
                        calNetAmount2 = Convert.ToDouble(NetAmount2 - DiscountAmount);


                        if (calNetAmount2 < 200000)
                            discountcalAmount2 = calNetAmount2;
                        else
                            discountcalAmount2 = NetAmount2;

                        NSEbidreq[1].amount = discountcalAmount2;
                        NSEbidreq[1].remark = "";

                    }

                    if (bidcount > 2)
                    {
                        double DiscountAmount = 0;
                        DiscountValue3 = Convert.ToDouble(discounthdn.Value);
                        NSEbidreq[2] = new NSEBidsReq();
                        NSEbidreq[2].activityType = "new";
                        NSEbidreq[2].quantity = quantity3;
                        NSEbidreq[2].atCutOff = CutoffFlag3;
                        NSEbidreq[2].price = Convert.ToDouble(Bprice3);


                        NetAmount3 = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price3.Value);
                        if (discounttypehdn.Value == "P")
                            DiscountValue3 = Convert.ToDouble(price3.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);

                        DiscountAmount = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * DiscountValue3;
                        calNetAmount3 = Convert.ToDouble(NetAmount3 - DiscountAmount);

                        if (calNetAmount3 < 200000)
                            discountcalAmount3 = calNetAmount3;
                        else
                            discountcalAmount3 = NetAmount3;

                        NSEbidreq[2].amount = discountcalAmount3;
                        NSEbidreq[2].remark = "";

                    }

                    if (NetAmount1 > NetAmount2 && NetAmount1 > NetAmount3) max = NetAmount1;

                    else if (NetAmount2 > NetAmount3 && NetAmount2 > NetAmount1) max = NetAmount2;

                    else if (NetAmount3 > NetAmount1 && NetAmount3 > NetAmount2) max = NetAmount3;


                    #endregion bid
                    NSEtransactionreq transreq = new NSEtransactionreq();
                    transreq.symbol = symbol;
                    transreq.applicationNumber = "XXXXX";
                    transreq.category = CategoryName;
                    transreq.clientName = Session["ClientFname"].ToString().Trim();
                    transreq.depository = depository;
                    transreq.dpId = dp1;
                    transreq.clientBenId = dp2;
                    transreq.nonASBA = false;
                    transreq.pan = Session["Pan"].ToString().Trim();
                    transreq.referenceNumber = ReferenceNo.ToString();
                    transreq.allotmentMode = "demat";
                    transreq.upiFlag = "Y";
                    transreq.upi = Tupiid;
                    transreq.bankCode = "";
                    transreq.locationCode = "";
                    transreq.timestamp = "";
                    transreq.bids = NSEbidreq;
                    string ReqJson = (new JavaScriptSerializer()).Serialize(transreq);
                    int transCutoffflag1 = 0, transCutoffflag2 = 0, transCutoffflag3 = 0;
                    transCutoffflag1 = Convert.ToInt16(cutoff1.Checked == true ? 1 : 0);
                    transCutoffflag2 = Convert.ToInt16(cutoff2.Checked == true ? 1 : 0);
                    transCutoffflag3 = Convert.ToInt16(cutoff3.Checked == true ? 1 : 0);
                    SqlParameter[] param1 = {new SqlParameter("@clcode", clcode) ,
                                                         new SqlParameter("@ReqJson", ReqJson) ,
                                                          new SqlParameter("@EformReqJson", EformReqJson) ,
                                                           new SqlParameter("@symbol", symbol),
                                                          new SqlParameter("@CategoryName", CategoryName) ,
                                                          new SqlParameter("@ClientFname", Session["ClientFname"].ToString()) ,
                                                           new SqlParameter("@Depository", Session["Depository"].ToString()),
                                                          new SqlParameter("@dp1", dp1) ,
                                                          new SqlParameter("@dp2", dp2) ,
                                                           new SqlParameter("@quantity1", quantity1),
                                                         new SqlParameter("@transCutoffflag1", transCutoffflag1) ,
                                                          new SqlParameter("@Bprice1", Bprice1) ,
                                                           new SqlParameter("@max", max),
                                                          new SqlParameter("@amount1", amount1) ,
                                                          new SqlParameter("@ChqRecFlag", ChqRecFlag) ,
                                                           new SqlParameter("@Pan", Session["Pan"].ToString()),

                                                          new SqlParameter("@BankName", Session["BankName"].ToString()) ,
                                                          new SqlParameter("@Location",  Session["Location"].ToString()) ,
                                                           new SqlParameter("@AccNo", Session["AccNo"].ToString()),
                                                          new SqlParameter("@quantity2", quantity2) ,
                                                          new SqlParameter("@Bprice2", Bprice2) ,
                                                           new SqlParameter("@transCutoffflag2", transCutoffflag2),
                                                          new SqlParameter("@amount2", amount2) ,
                                                          new SqlParameter("@quantity3", quantity3) ,
                                                           new SqlParameter("@Bprice3", Bprice3),
                                                         new SqlParameter("@transCutoffflag3", transCutoffflag3) ,
                                                          new SqlParameter("@amount3", amount3) ,
                                                           new SqlParameter("@issuefromdatehdn", issuefromdatehdn.Value),
                                                          new SqlParameter("@issuetodatehdn", issuetodatehdn.Value) ,
                                                          new SqlParameter("@issuefromtimehdn", issuefromtimehdn.Value) ,
                                                           new SqlParameter("@issuetotimehdn", issuetotimehdn.Value),


                                new SqlParameter("@minprice", minprice.Value),
                                                         new SqlParameter("@maxprice", maxprice.Value) ,
                                                          new SqlParameter("@minqty", Convert.ToInt32(minqty.Value)) ,
                                                           new SqlParameter("@ticksizehdn", ticksizehdn.Value),
                                                          new SqlParameter("@discounthdn", discounthdn.Value) ,
                                                          new SqlParameter("@PlacedBY", Session["PlacedBY"].ToString()) ,
                                                           new SqlParameter("@OrderedBY", Session["OrderedBY"].ToString())};

                    insertqry1 = "insert into IPOBidFileDetailsOffline(ReqJson,EformReqJson,status,Symbol,Category,ApplicantName,Depository,DpID,ClientId,Quantity,CutOffFlag,Rate,Amt_Payable,Amt_Payable1,ActionCode,chqRecFlag,PanNo,BankName,Location,AccNo,App_Date,OptQty2,OptPrice2,OptCutOff2,Amt_Payable2,ActionCode2,OptQty3,OptPrice3,OptCutOff3,Amt_Payable3,ActionCode3,SyndMem_Code,SubBrokCode,uccId,IssueStartDate,IssueEndDate,IssueStartTime,IssueEndTime,MinPrice,MaxPrice,MinBidQty,TickSize,Discount,PlacedBy,OrderedBy,Exchange)";
                    //insertqry1 += " values ('" + ReqJson + "','"+ EformReqJson + "','pending','" + symbol + "','" + CategoryName + "','" + Session["ClientFname"].ToString() + "','" + Session["Depository"].ToString() + "','" + dp1 + "','" + dp2 + "','" + quantity1 + "','" + transCutoffflag1 + "','" + Bprice1 + "','" + max + "','" + amount1 + "','new','" + ChqRecFlag + "','" + Session["Pan"].ToString() + "','" + Session["BankName"].ToString() + "','" + Session["Location"].ToString() + "','" + Session["AccNo"].ToString() + "',getdate(),'" + quantity2 + "','" + Bprice2 + "','" + transCutoffflag2 + "','" + amount2 + "','new','" + quantity3 + "','" + Bprice3 + "','" + transCutoffflag3 + "','" + amount3 + "','new',null,null,'" + clcode + "','" + issuefromdatehdn.Value + "','" + issuetodatehdn.Value + "','" + issuefromtimehdn.Value + "','" + issuetotimehdn.Value + "','" + minprice.Value + "','" + maxprice.Value + "'," + Convert.ToInt32(minqty.Value) + ",'" + ticksizehdn.Value + "','" + discounthdn.Value + "','" + Session["PlacedBY"].ToString() + "','" + Session["OrderedBY"].ToString() + "','NSE')";
                    insertqry1 += " values (@ReqJson,@EformReqJson,'pending',@symbol,@CategoryName,@ClientFname,@Depository,@dp1,@dp2,@quantity1,@transCutoffflag1,@Bprice1,@max,@amount1,'new',@ChqRecFlag,@Pan,@BankName,@Location,@AccNo,getdate(),@quantity2,@Bprice2,@transCutoffflag2,@amount2,'new',@quantity3,@Bprice3,@transCutoffflag3,@amount3,'new',null,null,@clcode,@issuefromdatehdn,@issuetodatehdn,@issuefromtimehdn,@issuetotimehdn,@minprice,@maxprice,@minqty,@ticksizehdn,@discounthdn,@PlacedBY,@OrderedBY,'NSE')";

                    BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText(" Applied the IPO in Offline for NSE Query : " + insertqry1);

                    SqlHelper.ExecuteNonQuery(sqlcon, CommandType.Text, insertqry1, param1);
                    // ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('Your BID is being Processed,Order will place when IPO market is open!!');window.location='/orders.aspx';", true);
                }
                #endregion
                #endregion

            }
            else
            {
                BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText(" Apply the IPO in Offline for BSE Query (Reason :market is not open): ");
                #region offlinevalidation

                SqlParameter[] param1 = { new SqlParameter("@clcode", clcode),
                        new SqlParameter("@symbolhdn", symbolhdn.Value),
                        new SqlParameter("@categoryhdn", categoryhdn.Value)};


                //string sqlExistoff = "select * from IPOBidFileDetailsOffline where Exchange='BSE' and uccId='" + clcode + "' and Symbol='" + symbolhdn.Value + "' and Category='" + categoryhdn.Value + "' and Status='pending' ";
                string sqlExistoff = "select * from IPOBidFileDetailsOffline where exchange='BSE' and uccId=@clcode and Symbol=@symbolhdn and Category=@categoryhdn and Status='pending' ";
                BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText(" Apply the IPO in Offline for BSE Query : " + sqlExistoff);
                DataSet dsExistoff = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, sqlExistoff, param1);
                // DataSet dsExistoff = SqlHelper.ExecuteDataset(sqlcon, CommandType.Text, sqlExistoff);
                if (dsExistoff != null && dsExistoff.Tables[0].Rows.Count > 0)
                {
                    BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("You have already applied for this IPO in offline mode for BSE: " + sqlExistoff);
                    // ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('You have already applied for this IPO in offline mode.');window.location='/orders.aspx';", true);
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "success", "offlinealreadyapplied();", true);
                    //msglblstr = "You have already applied for this IPO in offline mode.";
                    //ScriptManager.RegisterStartupScript(this, this.GetType(), "success", "alert('You have already applied for this IPO.');window.location='CurrentIndex.aspx?id=1';", true);
                }
                #region
                else
                {
                    int CutoffFlag, CutoffFlag2, CutoffFlag3;
                    CutoffFlag = cutoff1.Checked == true ? 1 : 0;
                    CutoffFlag2 = cutoff2.Checked == true ? 1 : 0;
                    CutoffFlag3 = cutoff3.Checked == true ? 1 : 0;

                    string ChqRecFlag = "";
                    if (CutoffFlag == 1 || CutoffFlag2 == 1 || CutoffFlag3 == 1)
                    {
                        ChqRecFlag = "N";
                    }
                    else
                    {
                        ChqRecFlag = "Y";
                    }

                    string depository = Session["Depository"].ToString();
                    string OrderedBY = Session["OrderedBY"].ToString();
                    string PlacedBy = Session["PlacedBY"].ToString();

                    string dp1 = "";
                    string dp2 = "";
                    if (depository == "CDSL")
                    {
                        dp1 = "0";
                        dp2 = DPId;
                    }
                    else if (depository == "NSDL")
                    {
                        dp1 = DPId.Substring(0, 8);
                        dp2 = DPId.Substring(8, 8);
                    }

                    string ReqJson = "";
                    Session["BankName"] = "8888".ToString().PadRight(6);
                    Session["Location"] = "UPIIDL".ToString().PadRight(6);
                    string accntpayer = txtupiid.Value.Trim();
                    Session["AccNo"] = accntpayer.Trim();
                    string bidjson = "";
                    double opt1 = 0;
                    double opt2 = 0;
                    double opt3 = 0;
                    double max = 0;
                    double dv = 0;
                    double disvalue1 = Convert.ToDouble(discounthdn.Value);
                    double disvalue2 = Convert.ToDouble(discounthdn.Value);
                    double disvalue3 = Convert.ToDouble(discounthdn.Value);
                    string symbol = symbolhdn.Value; string category = categoryhdn.Value;
                    if (lot1.Value != "" && price1.Value != "")
                    {
                        bidjson += "{\"bidid\":\"\",\"quantity\":\"" + (Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value)).ToString() + "\",\"rate\":\"" + price1.Value + "\",\"cuttoffflag\":\"" + CutoffFlag.ToString() + "\",\"orderno\":\"YYYY\",\"actioncode\":\"N\"},";
                        opt1 = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price1.Value);
                        if (discounttypehdn.Value == "3")
                        {
                            disvalue1 = Convert.ToDouble(price1.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);
                        }
                    }
                    if (lot2.Value != "" && price2.Value != "")
                    {
                        bidjson += "{\"bidid\":\"\",\"quantity\":\"" + (Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value)).ToString() + "\",\"rate\":\"" + price2.Value + "\",\"cuttoffflag\":\"" + CutoffFlag2.ToString() + "\",\"orderno\":\"YYYY\",\"actioncode\":\"N\"},";
                        opt2 = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price2.Value);
                        if (discounttypehdn.Value == "3")
                        {
                            disvalue2 = Convert.ToDouble(price2.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);
                        }
                    }
                    if (lot3.Value != "" && price3.Value != "")
                    {
                        bidjson += "{\"bidid\":\"\",\"quantity\":\"" + (Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value)).ToString() + "\",\"rate\":\"" + price3.Value + "\",\"cuttoffflag\":\"" + CutoffFlag3.ToString() + "\",\"orderno\":\"YYYY\",\"actioncode\":\"N\"},";
                        opt3 = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(price3.Value);
                        if (discounttypehdn.Value == "3")
                        {
                            disvalue3 = Convert.ToDouble(price3.Value) * (Convert.ToDouble(discounthdn.Value) / 100.0);
                        }
                    }
                    //max = Math.Max(opt1, opt2, opt3);
                    if (opt1 > opt2 && opt1 > opt3)
                    {
                        max = opt1;
                        //dv = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(discounthdn.Value);
                        dv = Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value) * disvalue1;
                    }
                    else if (opt2 > opt3 && opt2 > opt1)
                    {
                        max = opt2;
                        //dv = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(discounthdn.Value);
                        dv = Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value) * disvalue2;
                    }
                    else if (opt3 > opt1 && opt3 > opt2)
                    {
                        max = opt3;
                        //dv = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * Convert.ToDouble(discounthdn.Value);
                        dv = Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value) * disvalue3;
                    }
                    string totamt = "";
                    Decimal totamtcal = Convert.ToDecimal(max - dv);

                    if (totamtcal < 200000)
                    {
                        totamt = totamtcal.ToString();

                    }
                    else
                    {
                        totamt = max.ToString();
                    }

                    bidjson = bidjson.TrimEnd(',');

                    //string reqmanjson = "{\"scripid\":\"" + BSECode + "\",\"applicationno\":\"" + AppNo + "\",\"category\":\"" + Category + "\",\"applicantname\":\"" + Session["ClientFname"].ToString().Trim() + "\",\"depository\":\"" + depository + "\",\"dpid\":\"0\",\"clientbenfid\":\"" + DPId.ToString() + "\",\"chequereceivedflag\":\"" + ChqRecFlag + "\",\"chequeamount\":\"" + TxtTot.Text + "\",\"panno\":\"" + Session["Pan"].ToString() + "\",\"bankname\":\"" + Session["BankName"].ToString().Trim() + "\",\"location\":\"" + Session["Location"].ToString().Trim() + "\",\"accountnumber_upiid\":\"" + Session["AccNo"].ToString().Trim() + "\",\"ifsccode\":\"\",\"referenceno\":\"\",\"asba_upiid\":\"1\",\"bids\":[{\"bidid\":\"\",\"quantity\":\"" + TxtQt1.Text + "\",\"rate\":\"760\",\"cuttoffflag\":\"" + CutoffFlag.ToString() + "\",\"orderno\":\"" + OrderNo.ToString() + "\",\"actioncode\":\"N\"},{\"bidid\":\"\",\"quantity\":\"38\",\"rate\":\"770\",\"cuttoffflag\":\"" + CutoffFlag.ToString() + "\",\"orderno\":\""+OrderNo.ToString()+"\",\"actioncode\":\"N\"},{\"bidid\":\"\",\"quantity\":\"57\",\"rate\":\"780\",\"cuttoffflag\":\"" + CutoffFlag.ToString() + "\",\"orderno\":\""+OrderNo.ToString()+"\",\"actioncode\":\"N\"}]}";
                    //string reqmanjson = "{\"scripid\":\"" + BSECode + "\",\"applicationno\":\"" + AppNo + "\",\"category\":\"" + Category + "\",\"applicantname\":\"" + Session["ClientFname"].ToString().Trim() + "\",\"depository\":\"" + depository + "\",\"dpid\":\"0\",\"clientbenfid\":\"" + DPId.ToString() + "\",\"chequereceivedflag\":\"" + ChqRecFlag + "\",\"chequeamount\":\"" + TxtTot.Text + "\",\"panno\":\"" + Session["Pan"].ToString() + "\",\"bankname\":\"" + Session["BankName"].ToString().Trim() + "\",\"location\":\"" + Session["Location"].ToString().Trim() + "\",\"accountnumber_upiid\":\"" + Session["AccNo"].ToString().Trim() + "\",\"ifsccode\":\"\",\"referenceno\":\"\",\"asba_upiid\":\"1\",\"bids\":[{\"bidid\":\"\",\"quantity\":\"" + TxtQt1.Text + "\",\"rate\":\""+TxtPr1.Text+"\",\"cuttoffflag\":\"" + CutoffFlag.ToString() + "\",\"orderno\":\"" + OrderNo.ToString() + "\",\"actioncode\":\"N\"}]}";
                    //string reqmanjson = "{\"scripid\":\"" + BSECode + "\",\"applicationno\":\"" + AppNo + "\",\"category\":\"" + Category + "\",\"applicantname\":\"" + Session["ClientFname"].ToString().Trim() + "\",\"depository\":\"" + depository + "\",\"dpid\":\"0\",\"clientbenfid\":\"" + DPId.ToString() + "\",\"chequereceivedflag\":\"" + ChqRecFlag + "\",\"chequeamount\":\"" + totamt + "\",\"panno\":\"" + Session["Pan"].ToString() + "\",\"bankname\":\"" + Session["BankName"].ToString().Trim() + "\",\"location\":\"" + Session["Location"].ToString().Trim() + "\",\"accountnumber_upiid\":\"" + Session["AccNo"].ToString().Trim() + "\",\"ifsccode\":\"\",\"referenceno\":\"\",\"asba_upiid\":\"1\",\"bids\":["+bidjson+"]}";
                    ReqJson = "{\"scripid\":\"" + symbolhdn.Value + "\",\"applicationno\":\"XXXXX\",\"category\":\"" + categoryhdn.Value + "\",\"applicantname\":\"" + Session["ClientFname"].ToString().Trim() + "\",\"depository\":\"" + depository + "\",\"dpid\":\"" + dp1 + "\",\"clientbenfid\":\"" + dp2 + "\",\"chequereceivedflag\":\"" + ChqRecFlag + "\",\"chequeamount\":\"" + totamt + "\",\"panno\":\"" + Session["Pan"].ToString() + "\",\"bankname\":\"" + Session["BankName"].ToString().Trim() + "\",\"location\":\"" + Session["Location"].ToString().Trim() + "\",\"accountnumber_upiid\":\"" + Session["AccNo"].ToString().Trim() + "\",\"ifsccode\":\"\",\"referenceno\":\"\",\"asba_upiid\":\"1\",\"bids\":[" + bidjson + "]}";

                    //string ReqJson = ""
                    string insertqry = "insert into IPOBidFileDetailsOffline(ReqJson,status,Symbol,Category,ApplicantName,Depository,DpID,ClientId,Quantity,CutOffFlag,Rate,Amt_Payable,chqRecFlag,PanNo,BankName,Location,AccNo,App_Date,OptQty2,OptPrice2,OptCutOff2,OptQty3,OptPrice3,OptCutOff3,SyndMem_Code,SubBrokCode,uccId,IssueStartDate,IssueEndDate,IssueStartTime,IssueEndTime,MinPrice,MaxPrice,MinBidQty,TickSize,Discount,PlacedBy,OrderedBy,exchange)";
                    string qty3 = lot3.Value != "" ? (Convert.ToDouble(lot3.Value) * Convert.ToDouble(minqty.Value)).ToString() : "";
                    string qty2 = lot2.Value != "" ? (Convert.ToDouble(lot2.Value) * Convert.ToDouble(minqty.Value)).ToString() : "";
                    //insertqry += " values ('" + ReqJson + "','pending','" + symbolhdn.Value + "','" + categoryhdn.Value + "','" + Session["ClientFname"].ToString() + "','" + Session["Depository"].ToString() + "','" + dp1 + "','" + dp2 + "','" + (Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value)).ToString() + "','" + CutoffFlag + "','" + price1.Value + "','" + totamt + "','" + ChqRecFlag + "','" + Session["Pan"].ToString() + "','" + Session["BankName"].ToString() + "','" + Session["Location"].ToString() + "','" + Session["AccNo"].ToString() + "',getdate(),'" + qty2 + "','" + price3.Value + "','" + CutoffFlag2 + "','" + qty3 + "','" + price3.Value + "','" + CutoffFlag3 + "',null,null,'" + clcode + "','" + issuefromdatehdn.Value + "','" + issuetodatehdn.Value + "','" + issuefromtimehdn.Value + "','" + issuetotimehdn.Value + "','" + minprice.Value + "','" + maxprice.Value + "'," + Convert.ToInt32(minqty.Value) + ",'" + ticksizehdn.Value + "','" + discounthdn.Value + "','" + Session["PlacedBY"].ToString() + "','" + Session["OrderedBY"].ToString() + "','BSE')";
                    insertqry += " values (@ReqJson,'pending',@symbolhdn,@categoryhdn,@ClientFname,@Depository,@dp1,@dp2,@lotmin,@CutoffFlag,@price1,@totamt,@ChqRecFlag,@Pan,@BankName,@Location,@AccNo,getdate(),@qty2,@price3,@CutoffFlag2,@qty3,@price33,@CutoffFlag3,null,null,@clcode,@issuefromdatehdn,@issuetodatehdn,@issuefromtimehdn,@issuetotimehdn,@minprice,@maxprice,@minqtyss,@ticksizehdn,@discounthdn,@PlacedBY,@OrderedBY,'BSE')";
                    SqlParameter[] param2 = { new SqlParameter("@clcode", clcode),
                                new SqlParameter("@ReqJson", ReqJson),
                                 new SqlParameter("@symbolhdn", symbol),
                                 new SqlParameter("@categoryhdn", category),
                                 new SqlParameter("@ClientFname", Session["ClientFname"].ToString()),
                                 new SqlParameter("@Depository",Session["Depository"].ToString()),
                                 new SqlParameter("@dp1",dp1),
                                 new SqlParameter("@dp2",dp2),
                                 new SqlParameter("@lotmin",(Convert.ToDouble(lot1.Value) * Convert.ToDouble(minqty.Value)).ToString()),
                                   new SqlParameter("@CutoffFlag",CutoffFlag),
                                     new SqlParameter("@price1",price1.Value),
                                       new SqlParameter("@totamt",totamt),
                                        new SqlParameter("@ChqRecFlag",ChqRecFlag),
                                        new SqlParameter("@Pan",Session["Pan"].ToString()),
                                         new SqlParameter("@BankName",Session["BankName"].ToString()),
                                  new SqlParameter("@Location",Session["Location"].ToString()),
                                new SqlParameter("@AccNo",Session["AccNo"].ToString()),
                                   new SqlParameter("@qty2",qty2),
                                        new SqlParameter("@price3",price2.Value),
 new SqlParameter("@CutoffFlag2",CutoffFlag2),
  new SqlParameter("@qty3",qty3),
    new SqlParameter("@price33",price3.Value),
        new SqlParameter("@CutoffFlag3",CutoffFlag3),
                new SqlParameter("@issuefromdatehdn",issuefromdatehdn.Value),
                                new SqlParameter("@issuetodatehdn", issuetodatehdn.Value),
                                  new SqlParameter("@issuefromtimehdn", issuefromtimehdn.Value),
                                      new SqlParameter("@issuetotimehdn", issuetotimehdn.Value),
                                         new SqlParameter("@minprice", minprice.Value),
                                           new SqlParameter("@maxprice",maxprice.Value),
                                                     new SqlParameter("@minqtyss",Convert.ToInt32(minqty.Value)),
                                                         new SqlParameter("@ticksizehdn",ticksizehdn.Value),
                                                               new SqlParameter("@discounthdn",discounthdn.Value),
                                       new SqlParameter("@PlacedBY",Session["PlacedBY"].ToString()),
                                                                new SqlParameter("@OrderedBY",Session["OrderedBY"].ToString()),
                                };
                    BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText(" Applied the IPO in Offline for BSE Query : " + insertqry);
                    BusinessData.NSE_ExceptionLogging.NSE_SendErrorToText("Your BID is being Processed,We will place the order on next working day!!");
                    SqlHelper.ExecuteNonQuery(sqlcon, CommandType.Text, insertqry, param2);
                    //SqlHelper.ExecuteNonQuery(sqlcon, CommandType.Text, insertqry);


                    // ScriptManager.RegisterStartupScript(this, this.GetType(), "error", "alert('Your BID is being Processed,We will place the order on next working day!!');window.location='/orders.aspx';", true);

                }
                #endregion
                #endregion
            }
        }

        
    }
}









------------------------------------------------------HTML CONTENT--------------------------------------------------------


<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="ipo.aspx.cs" Inherits="ABCIPO.ipo" EnableEventValidation="false" %>

<!DOCTYPE html>

<html lang="en">
<head>
    <title>ABC IPO</title>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=11; IE=10; IE=9; IE=8; IE=7" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/font-awesome.min.css">
    <link rel="stylesheet" href="/fonts/stylesheet.css">
    <link rel="stylesheet" href="/css/ipo.css">
    <link rel="stylesheet" href="/css/modify-cancel.css">
        <link rel="stylesheet" type="text/css" href="/ipo/css/alertify.css" />
      <script type="text/javascript" src="/ipo/js/alertify.js"></script>
    <%--<script src="/Scripts/jquery-1.11.2.min.js"></script>
    <script src="/Scripts/kendo.all.min.js"></script>
    <script src="/Scripts/kendo.aspnetmvc.min.js"></script>--%>
    <script src="/js/jquery.min.js"></script>
    <script src="/js/popper.min.js"></script>
    <script src="/js/bootstrap.min.js"></script>
<%--    <link href="/css/select2.min.css" rel="stylesheet" />
    <script src="/js/select2.min.js"></script>--%>

    <script>
        function togglecheck(t) {
            //debugger;
            $('.nav-tabs a[href="#' + t + '"]').tab('show');
            $("#recentlyclosed").show();
        }
        function finalresp() {
            alertify.alert('Application placed successfully. UPI payment approval is pending. \n You will receive an approval request from the exchange within 15 – 20 minutes.Please approve it to confirm your application.');
            window.location = ' /orders.aspx';
        }

        function bseorder() {

            alertify.alert("Application placed successfully. UPI payment approval is pending . You will receive an approval request from the exchange within 15 – 20 minutes.Please approve it to confirm your application.",
                    function (e) {
                        if (e) {
                            window.location = '/orders.aspx';
                        } else {
                            window.location = '/ipo.aspx';
                        }
                    });

        }
        
        function nseoffline() {
         
          alertify.alert(" Your BID is being Processed  Order will place when IPO market is open!!",
                  function(e){
                      if(e){
                          window.location = '/orders.aspx';
                      } else {
                          window.location = '/ipo.aspx';
                      }
                  });
           
        }
        function orderplace() {
            debugger;
               var nseappno = "<%=nseapp%>";
           // alert(nseappno);
            var symbol = document.getElementById("symbolhdn").value;
         
            alertify.alert("Your application for " + symbol + " has been submitted successfully.  IPO application number  : "  +    nseappno,
                    function (e) {
                        if (e) {
                            window.location = '/orders.aspx';
                        } else {
                            window.location = '/ipo.aspx';
                        }
                    });

        }

        function Dpidvalidation() {

            alertify.alert("Your DPID is invalid  Please contact Customer Support!!",
                    function (e) {
                        if (e) {
                            window.location = '/ipo.aspx';
                        } else {
                            window.location = '/ipo.aspx';
                        }
                    });

        }
        function alreadyapplied() {

            alertify.alert("You have already applied for this IPO.",
                    function (e) {
                        if (e) {
                            window.location = '/ipo.aspx';
                        } else {
                            window.location = '/ipo.aspx';
                        }
                    });

        }
        function offlinealreadyapplied() {

            alertify.alert("You have already applied for this IPO in offline mode.",
                    function (e) {
                        if (e) {
                            window.location = '/orders.aspx';
                        } else {
                            window.location = '/ipo.aspx';
                        }
                    });

        }


       


        //setTimeout(togglecheck('recentlyclosed'), 9000);

        //togglecheck('recentlyclosed');
    </script>
    <style>
        #conform_txtbx{
            color:red;
            text-align: center;
        }
        .modal-footer {
            display: flex;
    justify-content: center;
            border-top: 2px solid #3e593c;
            border-bottom: 2px solid #3e593c;
        }
        .modal-title{
              display: block;
    width: 100%;
   
    text-align: center;
        }
        #conformModalpopup{
             font-family: 'SegoeUI-Bold';
        }
        .verificationpopup{
            display: block;
    /*width: 100%;*/
    padding: 10px;
    /*text-align: center;*/
    background-color: #3E593C;
    color: #fff;
    font-size: 22px;
    font-family: 'SegoeUI-Bold';
        }
        .separetetotal{
                font-size: 24px!important;
                font-family: 'SegoeUI-Bold';
        }
        .totallbl{
            width:45%;
        }
        #bidamount1{
            width:40%;
        }
        .bid-amount {
            display:flex;
            justify-content:space-between;
        
        }
        .blue {
    color: #fff !important;
}
         .F210 {
            font-size: 15px;
        }
        .tab-heading-bg {
            background: #DADFC1C4;
        }

        .headactive {
            font-family: 'SegoeUI-Bold';
        }

        .manualbreak::after {
            content: '/A';
            white-space: pre;
        }
        @media (min-width: 330px) and (max-width:575.99px) {
                .separetetotal {
    font-size: 17px !important;
    font-family: 'SegoeUI-Bold';
}
        }
        @media (min-width: 576px) and (max-width:767.99px) {

            .separetetotal {
    font-size: 18px !important;
    font-family: 'SegoeUI-Bold';
}

        } 

        @media (min-width: 300px) and (max-width:991.99px) {
        
            .mobile-white-bg {
                background: #fff;
            }

            .open-tab-border {
                border-bottom: #919387 2px solid;
            }
        }

        @media (min-width: 300px) and (max-width:767.99px) {
            .My-Application-Mobile-View {
                position: fixed;
                width: 100%;
                left: 0%;
                bottom: 0;
            }

            .flex1 {
                flex: 1;
            }

            .pad0 {
                padding: 0 !important;
            }

            .dnowrap {
                white-space: nowrap !important;
            }
        }


        @media (min-width: 601px) and (max-width:3600px) {
            .width16 {
                width: 14% !important;
            }

            .width17 {
                width: 25% !important;
            }
        }
    </style>
</head>
<body class="tab-heading-bg">
    <form id="test" runat="server">
        <header>
            <div class="red-bg d-none d-md-block">
                <div class="container">
                    <div class="row">
                        <div class="col-12">

                              <div class="col-xs-5 col-lg-3 col-md-3" style="float: left;">
                            <a href="#">
                                <img src="images/ABM-Logo.png" alt="ABM-Logo" class="img-fluid"></a>
                                  </div>

                             <div class="col-xs-7 col-lg-9 col-md-9 FR" style="float: left; text-align: right; margin-top: 20px;">
                    <span class=" blue F20  ">WELCOME
                    </span>
                    <span class="blue F20">
                        <%=UserName%>
                    </span>&nbsp;&nbsp;
                    <span class="blue F210" id="lbltym"></span>
                </div>

                        </div>
                    </div>
                </div>
            </div>
        </header>

        <section class="container-fluid open-tab-border">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col-lg-9 col-md-8 col-sm-12 col-12">
                        <div class="invest-sc">
                            <h3>Invest in IPO's</h3>
                            <p>Apply to IPO using Aditya Birla Demat account via UPI in few clicks</p>

                        </div>
                    </div>
                    <div class="col-lg-3 col-md-4 col-sm-12 col-12">
                        <div class="app-sc text-right">
                            <a href="/orders.aspx" class="app-btn">My Applications</a>
                        </div>
                    </div>
                    <div class="col-12 abm-tabs pad0">
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="nav-item flex1">
                                <a class="nav-link active" data-toggle="tab" href="#open">Open</a>
                            </li>
                            <li class="nav-item flex1 ">
                                <a class="nav-link" id="upcomeid" data-toggle="tab" href="#Upcoming">Upcoming</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="tetsta" data-toggle="tab" href="#recentlyclosed">Recently Closed</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </section>
        <section class="w-100 mobile-white-bg">
            <div class="container">
                <div class="row">
                    <div class="col-12">
                        <div class="w-100">
                            <!-- Tab panes -->
                            <div class="tab-content">
                                <%-- open start--%>
                                <div id="open" class="tab-pane active">

                                    <div class="main-box">
                                        <p class="box-head">Open Now <span id="opencount" runat="server">(2)</span></p>
                                        <div class="table-head">
                                            <div class="box-1">Company</div>
                                            <div class="box-2 text-center biddata">Bid date</div>
                                            <div class="box-3 text-center">Price Range</div>
                                            <%--   <div class="box-4 text-center">Category</div>--%>
                                            <div class="box-5 text-center"></div>
                                            <div class="box-6 text-right"></div>
                                        </div>
                                        <asp:Repeater ID="rep_open" runat="server" OnItemDataBound="rep_open_ItemDataBound">
                                            <ItemTemplate>
                                                <div class="table-body buttonalgin">
                                                    <div class="box-1">
                                                        <div class="logo-company">
                                                            <img src="admin/files/<%#DataBinder.Eval(Container.DataItem, "filename").ToString()!=""?DataBinder.Eval(Container.DataItem, "filename").ToString():"noimage.png"%>" class="img-fluid" style="width: 49px; height: 49px;">
                                                            <span title="<%#DataBinder.Eval(Container.DataItem, "Ipo_Name")%>"><%#DataBinder.Eval(Container.DataItem, "Ipo_Name")%>
                                                                <div class="SMEalgin"><%#DataBinder.Eval(Container.DataItem, "SUBTYPE")%></div>
                                                            </span>
                                                        </div>

                                                        <%--<div class="logo-company"><img src="admin/files/<%#DataBinder.Eval(Container.DataItem, "filename")%>" alt="Zomato-Logo" class="img-fluid"><span > <%#DataBinder.Eval(Container.DataItem, "ipo_symbse")%> </span></div>--%>
                                                        <%--<a href="company-info.html" class="show-head-mobile arrow-angle"><i class="fa fa-angle-right" aria-hidden="true"></i></a>--%>
                                                    </div>
                                                    <div class="box-2 text-center issuefrm">
                                                        <%#FormatFunctions.C_Format.M_FormatDate(DataBinder.Eval(Container.DataItem, "ipo_issuefrm").ToString(), "dd MMM yy")%> - <%#FormatFunctions.C_Format.M_FormatDate(DataBinder.Eval(Container.DataItem, "ipo_issueto").ToString(), "dd MMM yy ")%><p class="show-head-mobile">Bidding Dates</p>
                                                    </div>
                                                    <div class="box-3 text-center">
                                                        ₹ <%#DataBinder.Eval(Container.DataItem, "ipo_prfrm")%> - ₹ <%#DataBinder.Eval(Container.DataItem, "ipo_prto")%><p class="show-head-mobile">Price Range</p>
                                                    </div>
                                                    <%--<div class="box-3 text-center">₹ 72 - ₹ 76<p class="show-head-mobile">Price Range</p></div>--%>
                                                    <%-- <div class="box-4 text-center"> <%#DataBinder.Eval(Container.DataItem, "category")%><p class="show-head-mobile">Category</p></div>--%>
                                                    <div class="box-5 text-right" id="dvbtnn" runat="server">
                                                        <a href="#" id="applyanchor1" class="apply-btn" data-toggle="modal"
                                                            onclick="return filldata('<%#DataBinder.Eval(Container.DataItem, "ipo_prfrm")%>','<%#DataBinder.Eval(Container.DataItem, "ipo_prto")%>','<%#DataBinder.Eval(Container.DataItem, "ipo_minord")%>','<%#DataBinder.Eval(Container.DataItem, "ipo_symbse")%>','<%#DataBinder.Eval(Container.DataItem, "filename")%>','','<%#FormatFunctions.C_Format.M_FormatDate(DataBinder.Eval(Container.DataItem, "ipo_issuefrm").ToString(), "dd/MMM/yyyy")%>','<%#FormatFunctions.C_Format.M_FormatDate(DataBinder.Eval(Container.DataItem, "ipo_issueto").ToString(), "dd/MMM/yyyy")%>','<%#FormatFunctions.C_Format.M_FormatDate(DataBinder.Eval(Container.DataItem, "IPO_MTimFrm").ToString(), "hh:mm tt")%>','<%#FormatFunctions.C_Format.M_FormatDate(DataBinder.Eval(Container.DataItem, "IPO_MTimTo").ToString(), "hh:mm tt")%>','<%#DataBinder.Eval(Container.DataItem, "ipo_discount_type")%>','<%#DataBinder.Eval(Container.DataItem, "IPO_Discount")%>','<%#DataBinder.Eval(Container.DataItem, "ipo_tick")%>','<%#DataBinder.Eval(Container.DataItem, "ExTypeNew")%>','<%#DataBinder.Eval(Container.DataItem, "ipo_name")%>');" data-target="#apply">APPLY</a><a style="display: none;" href="companyinfo.aspx"><i class="fa fa-angle-right" aria-hidden="true"></i></a>
                                                    </div>
                                                    <%-- <div class="box-6 text-right" id="details_btn" runat="server"><a  href="#" class="apply-btn">Details</a></div>--%>
                                                </div>

                                            </ItemTemplate>

                                        </asp:Repeater>

                                        <div id="nodatadivopen" runat="server" class="table-body" align="center">
                                            <asp:Label ID="lblnodatadivopen" runat="server" Style="color: red">No Data Available</asp:Label>
                                        </div>

                                    </div>

                                    <div>
                                        <span class="preapply">Click on upcoming section to find IPO available for Pre-Apply</span>
                                    </div>
                                    <br />
                                    <div class="botm_link d-flex">
                                        <div class="d-flex whatsappcls col-lg-3">
                                            <div>
                                                <img src="images/IPO-icon.png" />
                                            </div>
                                            <a href="https://stocksandsecurities.adityabirlacapital.com/video-inner/How-to-apply-IPO-from-AB-Trade/50" target="_blank" class="botm_link_ipo">
                                                <p class="whatspara col-lg-11">How to apply IPO from AB Trade</p>
                                            </a>
                                        </div>
                                        <div class="d-flex whatsappcls col-lg-3">
                                            <div>
                                                <img src="images/Whatsapp-icon.png" />
                                            </div>
                                            <a href=" https://stocksandsecurities.adityabirlacapital.com/video-inner/How-to-apply-for-an-IPO-on-WhatsApp!/30" target="_blank" class="botm_link_whatap">
                                                <p class="whatspara col-lg-11">How to apply for an IPO on WhatsApp</p>
                                            </a>
                                        </div>
                                        <div class="d-flex whatsappcls col-lg-3">
                                            <div>
                                                <img src="images/mobile-app-icon.png" />
                                            </div>
                                            <a href="https://stocksandsecurities.adityabirlacapital.com/video-inner/How-to-apply-for-an-IPO-through-your-Mobile-Invest-App/89" target="_blank" class="botm_link_mobile">
                                                <p class="whatspara col-lg-12">How to apply for an IPO through your Mobile Invest App</p>
                                            </a>
                                        </div>
                                        <div class="d-flex  col-lg-3">
                                            <div>
                                                <img src="images/UPI-icons.png" />
                                            </div>
                                            <a href="https://stocksandsecurities.adityabirlacapital.com/video-inner/UPI-Mandate-for-IPO/83" target="_blank" class="botm_link_upi">
                                                <p class="whatspara col-lg-12">UPI Mandate for IPO </p>
                                            </a>
                                        </div>
                                    </div>
                                    <br />
                                </div>
                                <%--   open end--%>
                                <div class="w-100">
                                    <br />
                                </div>
                                <%--  upcoming start--%>
                                <div id="Upcoming" class="tab-pane ">
                                    <div class="main-box">
                                        <p class="box-head">Upcoming <span id="upcomingcount" runat="server">(0)</span></p>
                                        <div class="table-head">
                                            <div class="box-1">Company</div>
                                            <div class="box-2 text-center">Bid date</div>
                                            <div class="box-3 text-center">Price Range</div>
                                            <%--   <div class="box-4 text-center">Category</div>--%>
                                            <div class="box-5"></div>
                                            <div class="box-6"></div>

                                        </div>
                                        <asp:Repeater ID="rep_upcoming" runat="server" OnItemDataBound="rep_upcoming_ItemDataBound">
                                            <ItemTemplate>
                                                <div class="table-body buttonalgin">
                                                    <div class="box-1">
                                                        <div class="logo-company">
                                                            <%-- <img src="admin/files/<%#DataBinder.Eval(Container.DataItem, "filename").ToString()!=""?DataBinder.Eval(Container.DataItem, "filename").ToString():"noimage.png"%>" class="img-fluid" style="width: 49px; height: 49px;"><span><%#DataBinder.Eval(Container.DataItem, "ipo_symbse")%></span>--%>
                                                            <img src="admin/files/<%#DataBinder.Eval(Container.DataItem, "filename").ToString()!=""?DataBinder.Eval(Container.DataItem, "filename").ToString():"noimage.png"%>" class="img-fluid" style="width: 49px; height: 49px;">
                                                            <span title="<%#DataBinder.Eval(Container.DataItem, "Ipo_Name")%>"><%#DataBinder.Eval(Container.DataItem, "Ipo_Name")%><div class="SMEalgin"><%#DataBinder.Eval(Container.DataItem, "SUBTYPE")%></div>
                                                            </span>
                                                        </div>

                                                        <%--<div class="logo-company"><img src="images/<%#DataBinder.Eval(Container.DataItem, "filename")%>" alt="Zomato-Logo" class="img-fluid"><span><%#DataBinder.Eval(Container.DataItem, "Comp_name")%></span></div>--%>
                                                        <%--<a href="#" class="show-head-mobile arrow-angle"><i class="fa fa-angle-right" aria-hidden="true"></i></a>--%>
                                                    </div>
                                                    <div class="box-2 text-center">
                                                        <%#DataBinder.Eval(Container.DataItem, "ipo_issuefrm").ToString()!=""?FormatFunctions.C_Format.M_FormatDate(DataBinder.Eval(Container.DataItem, "ipo_issuefrm").ToString(), "dd MMM yy")+"-"+FormatFunctions.C_Format.M_FormatDate(DataBinder.Eval(Container.DataItem, "ipo_issueto").ToString(), "dd MMM yy "):"To be Announced" %>
                                                        <p class="show-head-mobile">Bidding Dates</p>
                                                    </div>
                                                    <div class="box-3 text-center <%#DataBinder.Eval(Container.DataItem, "ipo_prfrm").ToString()!="0"?"":"dnowrap"%>">
                                                        <%#DataBinder.Eval(Container.DataItem, "ipo_prfrm").ToString()!="0"?"₹"+DataBinder.Eval(Container.DataItem, "ipo_prfrm") +"- ₹"+DataBinder.Eval(Container.DataItem, "ipo_prto"):"To be Announced"%><p class="show-head-mobile">Price Range</p>
                                                    </div>
                                                    <%-- <div class="box-4 text-center"><%#DataBinder.Eval(Container.DataItem, "category")%> <p class="show-head-mobile">Category</p></div>--%>
                                                    <div class="box-5 text-right" id="upbtn_apply" runat="server">
                                                        <a href="#" class="apply-btn" data-toggle="modal" onclick="return filldata('<%#DataBinder.Eval(Container.DataItem, "ipo_prfrm")%>','<%#DataBinder.Eval(Container.DataItem, "ipo_prto")%>','<%#DataBinder.Eval(Container.DataItem, "ipo_minord")%>','<%#DataBinder.Eval(Container.DataItem, "ipo_symbse")%>','<%#DataBinder.Eval(Container.DataItem, "filename")%>','','<%#FormatFunctions.C_Format.M_FormatDate(DataBinder.Eval(Container.DataItem, "ipo_issuefrm").ToString(), "dd/MMM/yyyy")%>','<%#FormatFunctions.C_Format.M_FormatDate(DataBinder.Eval(Container.DataItem, "ipo_issueto").ToString(), "dd/MMM/yyyy")%>','<%#FormatFunctions.C_Format.M_FormatDate(DataBinder.Eval(Container.DataItem, "IPO_MTimFrm").ToString(), "hh:mm tt")%>','<%#FormatFunctions.C_Format.M_FormatDate(DataBinder.Eval(Container.DataItem, "IPO_MTimTo").ToString(), "hh:mm tt")%>','',''
                                                        ,'<%#DataBinder.Eval(Container.DataItem, "ipo_tick")%>','<%#DataBinder.Eval(Container.DataItem, "ExTypeNew")%>','<%#DataBinder.Eval(Container.DataItem, "ipo_name")%>');"
                                                            data-target="#apply">PRE-APPLY</a><a style="display: none;" href="companyinfo.aspx"><i class="fa fa-angle-right" aria-hidden="true"></i></a>
                                                    </div>

                                                </div>
                                            </ItemTemplate>
                                        </asp:Repeater>
                                        <div id="nodatadivupcoming" runat="server" class="table-body" align="center">
                                            <asp:Label ID="Label2" runat="server" Style="color: red">No Data Available</asp:Label>

                                        </div>
                                    </div>
                                </div>
                                <%--   upcoming end--%>
                                <div class="w-100">
                                    <br />
                                </div>



                                <%-- open closed   </div>--%>
                                <%--  end upcoming/open--%>

                                <div id="recentlyclosed" class="tab-pane fade">
                                    <div class="main-box recentlyclosed-table">
                                        <div class="table-head">
                                            <div class="box-1 width17">Company</div>
                                            <div class="box-2 text-center width16">Allotment Date</div>
                                            <div class="box-3 text-center width16">Allotment Price</div>
                                            <div class="box-4 text-center width16">Listing Date</div>
                                            <div class="box-5 text-center width16 ">Listing Price</div>
                                            <div class="box-6 text-center width16">Listing day gains</div>
                                            <%--<div class="box-7 text-center">Previous Close</div>--%>
                                            <%-- <div class="box-8 text-right"></div>--%>
                                        </div>

                                        <asp:Repeater ID="rep_recentlyclosed" runat="server" OnItemDataBound="rep_recentlyclosed_ItemDataBound">
                                            <ItemTemplate>
                                                <div class="table-body">
                                                    <div class="box-1 width17">
                                                        <%--<div class="logo-company"><img src="images/Zomato-Logo.png" alt="Zomato-Logo" class="img-fluid"><span>Zomato</span></div>--%>
                                                        <div class="logo-company">
                                                            <img src="admin/files/<%#DataBinder.Eval(Container.DataItem, "filename").ToString()!=""?DataBinder.Eval(Container.DataItem, "filename").ToString():"noimage.png"%>" class="img-fluid" style="width: 49px; height: 49px;">
                                                            <span title="<%#DataBinder.Eval(Container.DataItem, "Ipo_Name")%>"><%#DataBinder.Eval(Container.DataItem, "Ipo_Name")%><div class="SMEalgin"><%#DataBinder.Eval(Container.DataItem, "SUBTYPE")%></div>
                                                            </span>
                                                        </div>
                                                    </div>
                                                    <div class="box-2 text-center width16">
                                                        <%#DataBinder.Eval(Container.DataItem, "AllotmentDate").ToString()!=""?FormatFunctions.C_Format.M_FormatDate(DataBinder.Eval(Container.DataItem, "AllotmentDate").ToString(), "dd MMM yy "):"N.A"%><p class="show-head-mobile">Allotment Date</p>
                                                    </div>
                                                    <div class="box-3 text-center width16">
                                                        <%#DataBinder.Eval(Container.DataItem, "AllotmentPrice").ToString()!=""?DataBinder.Eval(Container.DataItem, "AllotmentPrice").ToString():"N.A"%><p class="show-head-mobile">Allotment Price </p>
                                                    </div>
                                                    <div class="box-4 text-center width16">
                                                        <%#DataBinder.Eval(Container.DataItem, "ListingDate").ToString()!=""?FormatFunctions.C_Format.M_FormatDate(DataBinder.Eval(Container.DataItem, "ListingDate").ToString(), "dd MMM yy "):"N.A"%><p class="show-head-mobile">Listing Date</p>
                                                    </div>
                                                    <div class="box-5 text-center width16">
                                                        <%#DataBinder.Eval(Container.DataItem, "ListingPrice").ToString()!=""?DataBinder.Eval(Container.DataItem, "ListingPrice").ToString():"N.A"%><p class="show-head-mobile">Listing Price</p>
                                                    </div>
                                                    <div class="box-6 text-center width16" id="Gaindiv" runat="server"></div>
                                                    <%--  <div class="box-7 text-center">-<p class="show-head-mobile">Previous Close</p></div>
                    <div class="box-8 text-right"><a href="#"><i class="fa fa-angle-right" aria-hidden="true"></i></a></div>--%>
                                                </div>
                                            </ItemTemplate>
                                        </asp:Repeater>

                                        <div id="divnodataclosed" runat="server" class="table-body" align="center">
                                            <asp:Label ID="Label1" runat="server" Style="color: red">No Data Available</asp:Label>

                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-12">
                        <div class="app-sc text-center My-Application-Mobile-View">
                            <a href="/orders.aspx" class="app-btn overridedisplay">My Applications</a>
                        </div>
                    </div>

                </div>
            </div>
        </section>
        <section>
            <div class="modify-popup" id="modalid">
                <div class="modal" id="apply">
                    <div class="modal-dialog">
                        <div class="modal-content">

                            <!-- Modal Header -->
                            <div class="modal-header">
                                <a href="javascript:void(0)" class="zomato-logo">
                                    <img id="logodiv" runat="server" src="images/zomato-logo.png" style="width: 49px; height: 49px;" class="img-fluid">
                                    <div class="zomato-logo-content">
                                        <h5 id="headsymbol" runat="server">Zomato IPO</h5>
                                        <%-- <p>Zomato India pvt. ltd</p>--%>
                                    </div>
                                </a>
                                <button type="button" class="close" data-dismiss="modal">Close</button>
                            </div>

                            <!-- Modal body -->
                            <div class="modal-body">
                                <asp:HiddenField ID="hdndvcount" runat="server" />
                                <div class="bid-content-common bid-content-3" id="divLocation1">
                                    <label>Category</label>
                                    <asp:DropDownList ID="category_drp" CssClass="number" runat="server" onchange="categorydiscount()">
                                    </asp:DropDownList>
                                </div>
                                <div class="bid-pnl">
                                    <%--<h5 style="width:100%!important;">Bid 1<a onclick="test();" style="float:right;">Add Bid</a></h5>--%>
                                    <h5 style="width: 100%!important;" id="bidpnlvalue">
                                        <span id="bidhead1" class="headactive" onclick="return tabreset('1');">Bid 1 </span>
                                        <span id="bidhead2">
                                            <span id="headb2" onclick="return tabreset('2');">Bid 2</span>
                                            <a onclick="return closebid2();" style="color: red; padding-left: 1px; width: 2%;">X</a> </span>
                                        <span id="bidhead3"><span id="headb3" onclick="return tabreset('3');">Bid 3</span>
                                            <a onclick="return closebid3();" style="color: red; padding-left: 1px; width: 2%;">X</a> </span>
                                        <a id="addbtn" onclick="return test();" style="float: right;">Add Bid</a></h5>

                                    <%-- <h5>Bid 1</h5>
              <a href="">Add Bid</a>--%>
                                </div>
                                <div id="biddiv1">
                                    <div class="bid-content">

                                        <div class="bid-content-common bid-content-1">
                                            <label>Lot</label>
                                            <div class="number">
                                                <span class="minus">-</span>
                                                <input type="text" id="lot1" class="ValidateNumeric" runat="server" value="1" onchange="return CalculateAll();">
                                                <span class="plus">+</span>
                                            </div>
                                            <span id="minqtydiv1" runat="server">( 1 x 195 shares )</span>
                                        </div>
                                        <div class="bid-content-common bid-content-2">
                                            <label>Bid Price</label>
                                            <input type="text" id="price1" runat="server" class="ValidateNumeric" name="" onchange="return CheckPrice('1');">
                                            <span id="pricebid1" runat="server">( ₹ 72 - 76 )</span>
                                            <div class="custom-control custom-checkbox mb-3">
                                                <input type="checkbox" class="custom-control-input" id="cutoff1" runat="server" onclick="javascript: chk(this.id);" />

                                                <label class="custom-control-label" for="cutoff1">At Cutoff Price</label>
                                                <br />
                                                <label id="lbldiscount1" runat="server" style="font-size: 16px; color: #707070; width: auto;">Discount : 500 <span>per share</span></label>
                                                  

                                            </div>

                                             

                                        </div>
                                        <div class="bid-amount ">
                                        <label class="totallbl separetetotal"> Amount of  Bid 1</label>
                                        <p id="bidamount1" runat="server" aria-readonly="true" class="separetetotal">₹ 0  </p>
                                    </div>
                                    </div>
                                </div>
                                <div id="biddiv2" style="display: none;">
                                    <%--<div class="bid-pnl">
              <h5 style="width:100%!important;">Bid 2 <a onclick="closebid2();" style="float:right;">X</a></h5>
              
            </div>--%>
                                    <div class="bid-content">
                                        <div class="bid-content-common bid-content-1">
                                            <label>Lot</label>
                                            <div class="number">
                                                <span class="minus">-</span>
                                                <input type="text" id="lot2" class="ValidateNumeric" runat="server" value="" onchange="return CalculateAll();">
                                                <span class="plus">+</span>
                                            </div>
                                            <span id="minqtydiv2" runat="server">( 1 x 195 shares )</span>
                                        </div>
                                        <div class="bid-content-common bid-content-2">
                                            <label>Bid Price</label>
                                            <input type="text" id="price2" class="ValidateNumeric" runat="server" name="" onchange="return CheckPrice('2');">
                                            <span id="pricebid2" runat="server">( ₹ 72 - 76 )</span>
                                            <div class="custom-control custom-checkbox mb-3">
                                                <input id="cutoff2" type="checkbox" class="custom-control-input" runat="server" onclick="javascript: chk(this.id);" name="example1">
                                                <label class="custom-control-label" for="cutoff2">At Cutoff Price</label>
                                                <br />
                                                <label id="lbldiscount2" style="font-size: 16px; color: #707070; width: auto;">Discount : 500</label>
                                            </div>
                                        </div>


                                         <div class="bid-amount ">
                                        <label class="totallbl separetetotal"> Amount of Bid 2</label>
                                        <p id="bidamount2" runat="server" aria-readonly="true" class="separetetotal">₹ 0  </p>
                                    </div>
                                    </div>
                                </div>
                                <div id="biddiv3" style="display: none;">
                                    <%--<div class="bid-pnl">
              <h5 style="width:100%!important;" >Bid 3 <a onclick="closebid3();" style="float:right;">X</a></h5>

            </div>--%>
                                    <div class="bid-content">
                                        <%-- <div class="bid-content-common bid-content-3">
                      <label>Category</label>
                    <asp:DropDownList ID="category_drp1" runat="server">
                        
                    </asp:DropDownList>
                    </div>--%>
                                        <div class="bid-content-common bid-content-1">
                                            <label>Lot</label>
                                            <div class="number">
                                                <span class="minus">-</span>

                                                <input type="text" id="lot3" class="ValidateNumeric" runat="server" value="" onchange="return CalculateAll();">

                                                <span class="plus">+</span>
                                            </div>
                                            <span id="minqtydiv3" runat="server">( 1 x 195 shares )</span>

                                        </div>
                                        <div class="bid-content-common bid-content-2">
                                            <label>Bid Price</label>
                                            <input type="text" id="price3" class="ValidateNumeric" runat="server" name="" onchange="return CheckPrice('3');">
                                            <span id="pricebid3" runat="server">( ₹ 72 - 76 )</span>
                                            <div class="custom-control custom-checkbox mb-3">
                                                <input type="checkbox" class="custom-control-input" id="cutoff3" runat="server" onclick="javascript: chk(this.id);" name="example1">
                                                <label class="custom-control-label" for="cutoff3">At Cutoff Price</label>
                                                <br />
                                                <label id="lbldiscount3" style="font-size: 16px; color: #707070; width: auto;">Discount : 500</label>
                                            </div>
                                        </div>
                                         <div class="bid-amount ">
                                        <label class="totallbl separetetotal"> Amount of Bid 3</label>
                                        <p id="bidamount3" runat="server" aria-readonly="true" class="separetetotal">₹ 0  </p>
                                    </div>
                                    </div>
                                </div>
                                <asp:HiddenField ID="minprice" runat="server" />
                                <asp:HiddenField ID="maxprice" runat="server" />
                                <asp:HiddenField ID="categoryhdn" runat="server" />
                                <asp:HiddenField ID="symbolhdn" runat="server" />
                                <asp:HiddenField ID="discounthdn" runat="server" />
                                <asp:HiddenField ID="issuefromtimehdn" runat="server" />
                                <asp:HiddenField ID="issuetotimehdn" runat="server" />
                                <asp:HiddenField ID="issuefromdatehdn" runat="server" />
                                <asp:HiddenField ID="issuetodatehdn" runat="server" />
                                <asp:HiddenField ID="ticksizehdn" runat="server" />
                                <asp:HiddenField ID="discounttypehdn" runat="server" />
                                <asp:HiddenField ID="offtrigger" runat="server" />
                                <asp:HiddenField ID="offlinemessage" runat="server" />
                                <asp:HiddenField ID="minqty" runat="server" />
                                <asp:HiddenField ID="exchanges" runat="server" />
                                <asp:HiddenField ID="IPONAME" runat="server" />
                             
                                <div class="bid-bottom-content">


                                    <div class="bid-content-common bid-content-3">
                                        <%--  <label>Discount</label>
                  <p>₹500</p>--%>
                                        <label>UPI ID</label>
                                        <input id="txtupiid" runat="server" type="text" placeholder="Enter the UPI ID" name="">
                                        <div class="custom-control custom-checkbox mb-3">
                                            <input type="checkbox" class="custom-control-input" id="upiid" runat="server" name="example1">
                                            <label class="custom-control-label" for="upiid">Save UPI ID</label>
                                        </div>
                                    </div>

                                    <div class="bid-content-common bid-content-4">
                                        <label>Total</label>
                                        <p id="total" runat="server" aria-readonly="true">₹ 0  </p>
                                    </div>
                                </div>
                            </div>

                            <!-- Modal footer -->
                            <div class="modal-footer">
                                <a id="applybtn" runat="server" onclick="return submitalldata();">APPLY</a>
                                <%--<asp:Button ID="btnhdn" runat="server" OnClick="btnhdn_Click" Style="display: none;" />--%>
                            </div>

                        </div>
                    </div>
                </div>
            </div>


            <%--user details pop up started--%>
            <div class="modal fade" id="conformModalpopup" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLongTitle"><b>Client Details Verification</b></h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
    <div class="verification">

<%--       <div> <label><b>Client Name &nbsp :     &nbsp   </b><label id="clname" runat="server"></label></label></div>
      <div>  <label><b>Pan No &nbsp &nbsp &nbsp &nbsp &nbsp :       &nbsp </b><label id="clpan" runat="server"></label></label></div> 
       <div>   <label><b>DP ID   &nbsp &nbsp &nbsp  &nbsp &nbsp &nbsp  :&nbsp  </b><label id="cldpid" runat="server"></label></label></div>
      <div>   <label><b>UPI ID &nbsp &nbsp &nbsp  &nbsp &nbsp &nbsp   :&nbsp </b><label id="clupi" runat="server"></label></label></div>
    --%>

        <table>
  <tr>
   <td>Client Name</td>
      <td></td> <td></td> <td>:</td> <td></td> <td></td>
    <td id="clname" runat="server"> </td>
       <td></td>
  </tr><tr></tr>
  <tr>
    <td>Pan No</td>  <td></td> <td></td><td>:</td> <td></td> <td></td>
    <td  id="clpan" runat="server"> </td> <td></td>
  </tr><tr></tr>
  <tr>
    <td>DP ID </td>  <td></td> <td></td><td>:</td> <td></td> <td></td>
    <td id="cldpid" runat="server"> </td> <td></td>
  </tr><tr></tr>
             <tr>
    <td>UPI ID </td>  <td></td> <td></td><td>:</td> <td></td> <td></td>
                   <td id="clupi"></td>
  <%--  <td id="clupi"><%=validteupid%></td>--%>
                 <td></td>
  </tr><tr></tr>
</table>

    </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-white verificationpopup" data-dismiss="modal" runat="server"   id="cancelbtn" onserverclick="cancelbtn_ServerClick">Cancel</button>
        <button type="button" class=" btn btn-white modify-popup verificationpopup"   id="confirm_txt" runat="server" onserverclick="applybtn_ServerClick"     onclick=" message();">confirm</button>
      </div> <%--<label id="conform_txtbx"   ></label>--%>
        <input type="text" id="conform_txtbx"   runat="server"  />
    </div>
  
</div>  
</div>
            <%--user details pop up ended--%>
        
        </section>
    </form>


     <%--  date and time--%>
   <%-- <script>
        var tym = setInterval(function () {

            console.log(moment().format("DD-MMM-YYYY hh:mm:ss a"));
            $("#lbltym").text(moment().format("DD-MMM-YYYY hh:mm:ss a"));
        }, 1000);
    </script>--%>


    <script>
        $('#apply').on('shown.bs.modal', function () {
            $('.custom-control-input').prop('checked', false);
        })


    </script>

 <script>
     //debugger;
     //$('#confirm_txt').click(function () {
     //    $('#conform_txtbx').show();
     //});

     function message() {
         debugger;
      
         document.getElementById("conform_txtbx").value = " Just Wait A Moment";
         //alert("hlo");
         return true;
     }
        function categorysymbol() {

            //debugger;
            var symbol = document.getElementById("symbolhdn").value;
            $.ajax({
                type: "POST",
                contentType: "application/json; charset=utf-8",
                data: "{'catsymbol':'" + symbol + "','exc':'" + document.getElementById("exchanges").value + "'}",
                url: "/ipo.aspx/Retrievecategory",
                dataType: "json",
                success: function (data) {
                   // debugger;
                    var userData = data.d;
                    // alert(userData)
                    var value1 = userData.split('|')

                    var select = document.getElementById("category_drp");
                    //select.add(option, "hni");
                    select.length = 0;

                    for (var i = 0; i < value1.length; i++) {
                        var value2 = value1[i].split('~');
                        var option = document.createElement('option');
                        //if (i == 0)
                        //    $("#categoryhdn").val(value2[1]);
                        // alert(value2[1])

                        option.text = value2[0];
                        option.value = value2[1];


                        select.add(option, i);
                        if (option.value == "IND") {
                            option.selected = true;

                        }
                        //select.add(option, "HNI");
                        //option.value = "IND";
                        //option.text = "HNI";

                    }
                    //var option = document.createElement('option');
                    //option.text = HNI;
                    //option.value = IND;
                    //select.add(option, value1.length);
                    select.options.add(new Option('HNI', 'IND'))
                    categorydiscount();

                },
                error: function (result) {
                    alertify.alert(result.responseText);
                }
            });

        }


        function categorydiscount() {

            //debugger;
            //var res = document.getElementById("category_drp").value;
            //alert(res);
            // alert("{'Category':'" + document.getElementById("category_drp").value + "','Symbol':'" + document.getElementById("symbolhdn").value + "'}")
            $.ajax({
                type: "POST",
                contentType: "application/json; charset=utf-8",

                data: "{'Category':'" + document.getElementById("category_drp").value + "','Symbol':'" + document.getElementById("symbolhdn").value + "','exc':'" + document.getElementById("exchanges").value + "'}",
                url: "/ipo.aspx/fillipocategory_discount",
                dataType: "json",
                success: function (data) {
                   // debugger;
                    var userData = data.d;
                    var ab = document.getElementById("category_drp");
                    // alert(ab.options[ab.selectedIndex].text)
                    var category = ab.options[ab.selectedIndex].text;
                    var value1 = userData.split('|');

                    //var res = document.getElementById("lbldiscount1").style.font="14px";
                    //var res2 = document.getElementById("lbldiscount2");
                    //var res3 = document.getElementById("lbldiscount3");//discount label id
                    //res.innerHTML ="Discfgfdsgount : ₹"+ (value1[1])+'&nbsp;'+"per share";
                    //res2.innerHTML = "Discount : ₹" + (value1[1]) + '&nbsp;' + "per share";
                    //res3.innerHTML = "Discount : ₹" + (value1[1]) + '&nbsp;' + "per share";
                    //alert(value1[1])

                    //document.getElementById("lbldiscount1").innerHTML = "Discount : ₹" + (value1[1]) + '&nbsp;' + "per share";
                    //document.getElementById("lbldiscount2").innerHTML = "Discount : ₹" + (value1[1]) + '&nbsp;' + "per share";
                    //document.getElementById("lbldiscount3").innerHTML = "Discount : ₹" + (value1[1]) + '&nbsp;' + "per share";
                    document.getElementById("lbldiscount1").innerHTML = "Discount " + value1[0] + '&nbsp;' + (value1[1]) + '&nbsp;' + "per share";
                    document.getElementById("lbldiscount2").innerHTML = "Discount " + value1[0] + '&nbsp;' + (value1[1]) + '&nbsp;' + "per share";
                    document.getElementById("lbldiscount3").innerHTML = "Discount " + value1[0] + '&nbsp;' + (value1[1]) + '&nbsp;' + "per share";

                    $("#discounthdn").val(value1[1]);
                    if (category == "HNI") {
                        //alert(category);
                        var minprice = document.getElementById("minprice").value;
                        var maxprice = document.getElementById("maxprice").value;
                        var lot = document.getElementById("minqty").value;

                        var txtTxt = 200000 / (maxprice * lot);
                        var lotvalue1 = document.getElementById("<%=lot1.ClientID%>").value = Math.ceil(txtTxt);
                        var pricevalue1 = document.getElementById("<%=price1.ClientID%>").value = maxprice;
                        closebid2();
                        closebid3();
                    }
                    else {
                        var MaxP = parseFloat($("#maxprice").val())
                        var minq = parseFloat($("#minqty").val())

                        document.getElementById("<%=lot1.ClientID%>").value = "1";
                        document.getElementById('<%=cutoff1.ClientID%>').checked = true;
                        
                <%--       if (cutoff1.checked != false) {
                           
                           var minprice = document.getElementById("minprice").value;
                               //var pricevalue1 = document.getElementById("<%=price1.ClientID%>").value = minprice;
                        var pricevalue1 = document.getElementById("<%=price2.ClientID%>").value = minprice;
                        var pricevalue1 = document.getElementById("<%=price3.ClientID%>").value = minprice;
                    
                       }
                        alert(cutoff1.checked)
                        if (cutoff1.checked != true) {
                            alert(cutoff1.checked)
                             var minprice = document.getElementById("minprice").value;
                               var pricevalue1 = document.getElementById("<%=price1.ClientID%>").value = minprice;
                        }--%>

                        chk('cutoff1');

                        closebid2();
                        closebid3();
                        $("#addbtn").hide();
                    }

                  <%--  else if (category != "HNI") {
                        //alert(category);
                        document.getElementById("lot1").value = "1";
                        document.getElementById("lot2").value = "1";
                        document.getElementById("lot3").value = "1";
                        document.getElementById("<%=price1.ClientID%>").value = "";
                        document.getElementById("<%=price2.ClientID%>").value = "";
                        document.getElementById("<%=price3.ClientID%>").value = "";
                          document.getElementById('<%=cutoff1.ClientID%>').checked = false;
                        document.getElementById("<%=total.ClientID%>").innerHTML = "₹  0.00 ";

                        $('#category_drp').change(function () {
                           
                            $('#bidhead1').show();
                            $('#bidhead2').hide();
                            $('#bidhead3').hide();
                          
                        });
                        $("#addbtn").show();
                    }--%>

                    CalculateAll();
                },
                error: function (result) {
                    alertify.alert(result.responseText);
                }
            });


        }




        $(document).ready(function () {
         debugger;


        

            $('#bidhead1').show();
            $('#bidhead2').hide();
            $('#bidhead3').hide();
            $('.minus').click(function () {
                var $input = $(this).parent().find('input');
                var count = parseInt($input.val()) - 1;
                count = count < 1 ? 1 : count;
                $input.val(count);
                $input.change();
                return false;
            });
            $('.plus').click(function () {
                //debugger;
                var $input = $(this).parent().find('input');
                $input.val(parseInt($input.val()) + 1);
                //var minqty = parseInt($("#minqty").val());

                // $input.val(parseInt($input.val()) * minqty);
                $input.change();
                return false;
            });
        });
    </script>
    <%--    <script>
        $('#apply').on('hidden.bs.modal', function (e) {
            $(this)
              .find("input,textarea,select")
                 .val('')
                 .end()
              .find("input[type=checkbox], input[type=radio],input[type=text]")
                 .prop("checked", "")
                 .end();
        })</script>--%>
    <%-- <script>
        $('#apply').on('shown.bs.modal', function (e) {
            $(this).find('#txtupiid').val('');
        });

    </script>--%>






    <script>

        function tabreset(id) {
            //debugger;
            if (id == "1") {
                $("#biddiv2").hide();
                $("#biddiv1").show();
                $("#biddiv3").hide();
                //class="headactive";
                $("#bidhead1").addClass('headactive');
                $("#headb2").removeClass('headactive');
                $("#headb3").removeClass('headactive');



            }
            else if (id == "2") {
                $("#biddiv1").hide();
                $("#biddiv2").show();
                $("#biddiv3").hide();
                $("#headb2").addClass('headactive');
                $("#bidhead1").removeClass('headactive');
                $("#headb3").removeClass('headactive');

            }
            else if (id == "3") {
                $("#biddiv1").hide();
                $("#biddiv2").hide();
                $("#biddiv3").show();
                $("#headb3").addClass('headactive');
                $("#headb2").removeClass('headactive');
                $("#bidhead1").removeClass('headactive');

            }
            return false;
        }

        function test() {
          //debugger;
            var txtPr1 = document.getElementById("<%=price1.ClientID%>").value;
            var txtPr2 = document.getElementById("<%=price2.ClientID%>").value;
            var txtPr3 = document.getElementById("<%=price3.ClientID%>").value;
            var txtQt1 = document.getElementById("<%=lot1.ClientID%>").value;
            var txtQt2 = document.getElementById("<%=lot2.ClientID%>").value;
            var txtQt3 = document.getElementById("<%=lot3.ClientID%>").value;
            var count = parseInt($("#hdndvcount").val());
            count++;


            if (count == 2) {
                //debugger;
                //Bid 2
                if (txtPr1 != "" && txtQt1 !="") {
                    $("#bidhead2").show();
                    $("#biddiv1").hide();
                    $("#biddiv2").show();
                    $("#biddiv3").hide();
                    $("#bidhead1").removeClass('headactive');
                    $("#headb2").addClass('headactive');
                    $("#headb3").removeClass('headactive');

                    var skillsSelect = document.getElementById("category_drp");
                    var selectedText = skillsSelect.options[skillsSelect.selectedIndex].text;
                    if (selectedText == "HNI") {
                        var minprice = document.getElementById("minprice").value;
                        var maxprice = document.getElementById("maxprice").value;
                        var lot = document.getElementById("minqty").value;
                        var txtT1 = 200000 / (maxprice * lot);
                        var lotvalue2 = document.getElementById("<%=lot2.ClientID%>").value = Math.ceil(txtT1);
                        var pricevalue2 = document.getElementById("<%=price2.ClientID%>").value = maxprice;
                        CalculateAll();
                    }
                }
                else {
                    alertify.alert("Please enter  Bid 1 price and lot should not be empty");
                    document.getElementById("<%=price1.ClientID%>").focus();
                }
            }
            else if (count == 3) {
                //Bid 3
               // debugger;
                if (document.getElementById("biddiv2").style.display == "none") {
                    if (txtPr1 != "" && txtQt1 != "") {
                        $("#bidhead2").show();
                        $("#biddiv1").hide();
                        $("#biddiv2").show();
                        $("#biddiv3").hide();
                        $("#bidhead1").removeClass('headactive');
                        $("#headb2").addClass('headactive');
                        $("#headb3").removeClass('headactive');

                        count--;
                        var skillsSelect = document.getElementById("category_drp");
                        var selectedText = skillsSelect.options[skillsSelect.selectedIndex].text;

                        if (selectedText == "HNI") {
                            var minprice = document.getElementById("minprice").value;
                            var maxprice = document.getElementById("maxprice").value;
                            var lot = document.getElementById("minqty").value;

                            var txtT1 = 200000 / (maxprice * lot);

                            var lotvalue3 = document.getElementById("<%=lot2.ClientID%>").value = Math.ceil(txtT1);

                            var pricevalue3 = document.getElementById("<%=price2.ClientID%>").value = maxprice;
                            CalculateAll();
                        }
                    }
                    else {
                        alertify.alert("Please enter  Bid 1 price and lot should not be empty ");
                        document.getElementById("<%=price1.ClientID%>").focus();
                        count--;
                    }
                }
                else {
                    if (txtPr2 != "" && txtQt2 != "") {
                        $("#biddiv3").show();
                        $("#bidhead3").show();
                        $("#biddiv1").hide();
                        $("#biddiv2").hide();
                        $("#bidhead1").removeClass('headactive');
                        $("#headb3").addClass('headactive');
                        $("#headb2").removeClass('headactive');
                        count--;
                        var skillsSelect = document.getElementById("category_drp");
                        var selectedText = skillsSelect.options[skillsSelect.selectedIndex].text;

                        if (selectedText == "HNI") {
                            var minprice = document.getElementById("minprice").value;
                            var maxprice = document.getElementById("maxprice").value;
                            var lot = document.getElementById("minqty").value;
                            var txtT1 = 200000 / (maxprice * lot);
                            var lotvalue2 = document.getElementById("<%=lot3.ClientID%>").value = Math.ceil(txtT1);
                            var pricevalue2 = document.getElementById("<%=price3.ClientID%>").value = maxprice;
                            CalculateAll();
                        }
                    }
                    else {
                        alertify.alert("Please enter  Bid 2 price and lot should not be empty ");
                        document.getElementById("<%=price2.ClientID%>").focus();
                        count--;
                    }
                }
            }
        $("#hdndvcount").val(count);
        return false;
    }

   
function closebid2() {
    //debugger;
    document.getElementById("bidhead2").style.display = "none";
    //document.getElementById("biddiv2").style.display = "none";
    //document.getElementById("biddiv3").style.display = "block";
    //document.getElementById("biddiv1").style.display = "block";
    //$("#bidhead2").hide();
    document.getElementById("<%=lot2.ClientID%>").value = "1";
    document.getElementById('<%=cutoff2.ClientID%>').checked = false;

    //$('#bidhead1').click();
    //$("#biddiv2").hide();
    tabreset('1');

    //$("#biddiv1").show();
    //$("#biddiv3").hide();

    $("#hdndvcount").val("1");
    return false;
}

function closebid3() {
    //document.getElementById("biddiv3").style.display = "none";
    $("#bidhead3").hide();
    $("#biddiv3").hide();
    document.getElementById("<%=lot3.ClientID%>").value = "1";
    document.getElementById('<%=cutoff3.ClientID%>').checked = false;
    tabreset('1');

    $("#hdndvcount").val("2");
    return false;


}

function filldata(pricef, priceto, minqty, symbol, logoname, category, issuefromdate, issuetodate, issuefromtime, issuetotime, discounttype, discount, ticksize, exchange, iponame) {
    //debugger;
    var t = '12';
    $("#addbtn").show();

    closebid2();
    closebid3();
    document.getElementById("<%=price1.ClientID%>").readOnly = false;
    document.getElementById("<%=price1.ClientID%>").value = "";
    document.getElementById("pricebid1").innerHTML = "( ₹ " + pricef + " - " + priceto + " )";
    document.getElementById("pricebid2").innerHTML = "( ₹ " + pricef + " - " + priceto + " )";
    document.getElementById("pricebid3").innerHTML = "( ₹ " + pricef + " - " + priceto + " )";
    document.getElementById("minqtydiv1").innerHTML = "( 1 x " + minqty + " shares )";
    document.getElementById("minqtydiv2").innerHTML = "( 1 x " + minqty + " shares )";
    document.getElementById("minqtydiv3").innerHTML = "( 1 x " + minqty + " shares )";
    document.getElementById("headsymbol").innerHTML = iponame;

    if (logoname == "") {
        logoname = "noimage.png"
    }
    $("#symbolhdn").val(symbol);
    $("#minqty").val(minqty);
    $("#minprice").val(pricef);
    $("#maxprice").val(priceto);
    $("#exchanges").val(exchange);
    categorysymbol();
    $("#IPONAME").val(iponame);
    $("#logodiv").attr("src", "admin/files/" + logoname);
    //$("#symbolhdn").val(symbol);
    //$("#categoryhdn").val(category);
    $("#issuefromtimehdn").val(issuefromtime);
    $("#issuetotimehdn").val(issuetotime);
    $("#issuefromdatehdn").val(issuefromdate);
    $("#issuetodatehdn").val(issuetodate);


    $("#ticksizehdn").val(ticksize);
    $("#discounttypehdn").val(discounttype);
    $("#discounthdn").val(discount);

    //document.getElementById("total").innerHTML = "₹ 0";
    //document.getElementById("total").value = '';
    //if (discounttype == "3") {
    //    document.getElementById("lbldiscount1").innerHTML = "Discount : " + (parseFloat(discount) / 100.0) + " % <span style='display: contents;'>per share</span>";
    //    document.getElementById("lbldiscount2").innerHTML = "Discount : " + (parseFloat(discount) / 100.0) + " % <span style='display: contents;'>per share</span>";
    //    document.getElementById("lbldiscount3").innerHTML = "Discount : " + (parseFloat(discount) / 100.0) + " % <span style='display: contents;'>per share</span>";

    //}
    //else {
    //    document.getElementById("lbldiscount1").innerHTML = "Discount : ₹ " + discount + " <span style='display: contents;'>per share</span>";
    //    document.getElementById("lbldiscount2").innerHTML = "Discount : ₹ " + discount + " <span style='display: contents;'>per share</span>";
    //    document.getElementById("lbldiscount3").innerHTML = "Discount : ₹ " + discount + "<span style='display: contents;'>per share</span>";
    //}
    document.getElementById("lot1").value = "1";
    document.getElementById("total").innerHTML = "₹ 0";
    // document.getElementById("txtupiid").innerHTML = "";
    //document.getElementsByClassName(".ValidateNumeric").innerHTML = "1";
    //  $("#categoryhdn").val(document.getElementById("category_drp").value);
    // alert(document.getElementById("categoryhdn").value);

    $("#apply").on('hide.bs.modal', function () {
        $('.custom-control-input').prop('checked', false);
    });

    // $("#totalhidden").val(document.getElementById("total").value) = "₹ 0";


    // document.getElementById("total").value="";
    // categorydiscount();
    return false;


}

function CheckPrice(id) {
    //debugger;

    var MinP = parseFloat($("#minprice").val());
    var MaxP = parseFloat($("#maxprice").val());

    if (id == "1") {
        var pr = parseFloat(document.getElementById("<%=price1.ClientID%>").value);
        if ((MinP > pr) || (MaxP < pr)) {
            alertify.alert("Please enter a value between the min and max Price");
            document.getElementById("<%=price1.ClientID%>").value = "";
            document.getElementById("<%=price1.ClientID%>").focus();
            CalculateAll();
            return false;
        }
    }
    else if (id == "2") {
        var pr = parseFloat(document.getElementById("<%=price2.ClientID%>").value);
        if ((MinP > pr) || (MaxP < pr)) {
            alertify.alert("Please enter a value between the min and max Price");
            document.getElementById("<%=price2.ClientID%>").value = "";
            document.getElementById("<%=price2.ClientID%>").focus();
            CalculateAll();
            return false;
        }

    }
    else if (id == "3") {
        var pr = parseFloat(document.getElementById("<%=price3.ClientID%>").value);
        if ((MinP > pr) || (MaxP < pr)) {
            alertify.alert("Please enter a value between the min and max Price");
            document.getElementById("<%=price3.ClientID%>").value = "";
            document.getElementById("<%=price3.ClientID%>").focus();
            CalculateAll();
            return false;
        }

    }

    CalculateAll();
    return false;

}

function CalculateAll() {
    //debugger;
    var txtPr1 = document.getElementById("<%=price1.ClientID%>").value;
    var txtPr2 = document.getElementById("<%=price2.ClientID%>").value;
    var txtPr3 = document.getElementById("<%=price3.ClientID%>").value;
    // alert(txtPr1);
    //alert(txtPr2);
    // alert(txtPr3);
    var txtQt1 = document.getElementById("<%=lot1.ClientID%>").value;
    var txtQt2 = document.getElementById("<%=lot2.ClientID%>").value;
    var txtQt3 = document.getElementById("<%=lot3.ClientID%>").value;
    //alert(txtQt1);
    // alert(txtQt2);
    // alert(txtQt3);
    if (parseInt(txtQt1) < 1) {
        document.getElementById("<%=lot1.ClientID%>").value = "1";
        txtQt1 = "1";
    }
    if (parseInt(txtQt2) < 1) {
        document.getElementById("<%=lot2.ClientID%>").value = "1";
        txtQt2 = "1";
    }
    if (parseInt(txtQt3) < 1) {
        document.getElementById("<%=lot3.ClientID%>").value = "1";
        txtQt3 = "1";

    }
    //var MaxP = parseFloat($("#minprice").val());
    //var MinP = parseFloat($("#maxprice").val());
    var MaxP = parseFloat($("#maxprice").val());
    var MinP = parseFloat($("#minprice").val());
    var MinQ = parseFloat($("#minqty").val());
    // alert(MaxP);
    // alert(MinP);
    // alert(MinQ);

    if ((txtPr1 == "") || (isNaN(txtPr1))) { txtPr1 = "0"; }
    if ((txtPr2 == "") || (isNaN(txtPr2))) { txtPr2 = "0"; }
    if ((txtPr3 == "") || (isNaN(txtPr3))) { txtPr3 = "0"; }

    if ((txtQt1 == "") || (isNaN(txtQt1))) { txtQt1 = "0"; }
    if ((txtQt2 == "") || (isNaN(txtQt2))) { txtQt2 = "0"; }
    if ((txtQt3 == "") || (isNaN(txtQt3))) { txtQt3 = "0"; }

    var txtT1 = parseFloat(txtPr1) * parseFloat(txtQt1) * parseFloat(MinQ);
    var txtT2 = parseFloat(txtPr2) * parseFloat(txtQt2) * parseFloat(MinQ);
    var txtT3 = parseFloat(txtPr3) * parseFloat(txtQt3) * parseFloat(MinQ);
    //alert(txtT1);
    // alert(txtT2);
    //alert(txtT3);

    if (parseFloat(txtT1) > 500000) {
        txtQt1 = 1;
        txtPr1 = MinP;
        document.getElementById("<%=lot1.ClientID%>").value = 1;
        document.getElementById("<%=price1.ClientID%>").value = MaxP;

        txtT1 = parseFloat(MaxP) * parseFloat(txtQt1) * parseFloat(MinQ);

        alertify.alert('The maximum amount that a retail individual investor can invest in an IPO is Rs. 5.0 lakhs.');
        document.getElementById("<%=lot1.ClientID%>").focus();

        //return false;
    }
    else if (parseFloat(txtT2) > 500000) {
        txtQt2 = 1;
        txtPr1 = MinP;
        document.getElementById("<%=lot2.ClientID%>").value = 1;
        document.getElementById("<%=price2.ClientID%>").value = MaxP;
        txtT2 = parseFloat(MaxP) * parseFloat(txtQt2) * parseFloat(MinQ);

        alertify.alert('The maximum amount that a retail individual investor can invest in an IPO is Rs. 5.0 lakhs.');
        //alert('The maximum amount should be less than 200000 per client');
        document.getElementById("<%=lot2.ClientID%>").focus();
        //alert('The maximum amount should be less thean 200000 per client');           
        //return false;
    }
    else if (parseFloat(txtT3) > 500000) {

        txtQt3 = 1;
        txtPr3 = MinQ;
        document.getElementById("<%=lot3.ClientID%>").value = minq;
        document.getElementById("<%=price3.ClientID%>").value = MaxP;
        txtT3 = parseFloat(MaxP) * parseFloat(txtQt3) * parseFloat(MinQ);

        alertify.alert('The maximum amount that a retail individual investor can invest in an IPO is Rs. 5.0 lakhs.');
        //alert('The maximum amount should be less than 200000 per client');
        document.getElementById("<%=lot3.ClientID%>").focus();

        // return false;
    }
    var skillsSelect = document.getElementById("category_drp");
    var selectedText = skillsSelect.options[skillsSelect.selectedIndex].text;//indiviual or HNI
    //alert("CalculateAll_selectedIndex");
    //alert(selectedText);

    var checkbox = document.getElementById("cutoff1");
    if (selectedText == "HNI") {
        //document.getElementById("lbldiscount1").style.display = 'none';
        //document.getElementById("lbldiscount2").style.display = 'none';
        //document.getElementById("lbldiscount3").style.display = 'none';
        document.getElementById('<%=cutoff1.ClientID%>').disabled = true;
        document.getElementById('<%=cutoff2.ClientID%>').disabled = true;
        document.getElementById('<%=cutoff3.ClientID%>').disabled = true;
        document.getElementById('<%=cutoff1.ClientID%>').checked = false;
        document.getElementById('<%=cutoff2.ClientID%>').checked = false;
        document.getElementById('<%=cutoff3.ClientID%>').checked = false;
        $("#addbtn").show();


    }


    else if (selectedText != "HNI") {

        if (MaxP == MinP) {//fixed smi not allow cuttoff
            //alert(MaxP);
            //alert(MinP);

            //document.getElementById("lbldiscount1").style.display = 'block';
            //document.getElementById("lbldiscount2").style.display = 'block';
            //document.getElementById("lbldiscount3").style.display = 'block';
            document.getElementById('<%=cutoff1.ClientID%>').disabled = true;
            document.getElementById('<%=cutoff2.ClientID%>').disabled = true;
            document.getElementById('<%=cutoff3.ClientID%>').disabled = true;
            document.getElementById('<%=cutoff1.ClientID%>').checked = false;
            document.getElementById('<%=cutoff2.ClientID%>').checked = false;
            document.getElementById('<%=cutoff3.ClientID%>').checked = false;
            $("#addbtn").show();
        }
        else {
            document.getElementById('<%=cutoff1.ClientID%>').disabled = false;
            document.getElementById('<%=cutoff2.ClientID%>').disabled = false;
            document.getElementById('<%=cutoff3.ClientID%>').disabled = false;
        }
    }

    var Max;
    var discount = parseFloat($("#discounthdn").val());
    //var discount = 0;$("#discounthdn").val()
    //var discountvalue = (parseFloat(txtQt1) * discount).toFixed(2);
    var discountvalue;
    var distype = $("#discounttypehdn").val();
    //var Max = Math.max(parseFloat(txtT1), parseFloat(txtT2), parseFloat(txtT3))
    if (parseFloat(txtT1) >= parseFloat(txtT2) && parseFloat(txtT1) >= parseFloat(txtT3)) {
        Max = txtT1;
        if (distype == '3' || distype == 'P') {
            discount = parseFloat(txtPr1) * (parseFloat($("#discounthdn").val()) / 100.0);
        }
        discountvalue = (parseFloat(txtQt1) * parseFloat(MinQ) * discount).toFixed(2);
    }
    else if (parseFloat(txtT2) >= parseFloat(txtT1) && parseFloat(txtT2) >= parseFloat(txtT3)) {
        Max = txtT2;
        if (distype == '3' || distype == 'P') {
            discount = parseFloat(txtPr2) * (parseFloat($("#discounthdn").val()) / 100.0);
        }
        discountvalue = (parseFloat(txtQt2) * parseFloat(MinQ) * discount).toFixed(2);
    }
    else if (parseFloat(txtT3) >= parseFloat(txtT1) && parseFloat(txtT3) >= parseFloat(txtT2)) {
        Max = txtT3;
        if (distype == '3' || distype == 'P') {
            discount = parseFloat(txtPr3) * (parseFloat($("#discounthdn").val()) / 100.0);
        }
        discountvalue = (parseFloat(txtQt3) * parseFloat(MinQ) * discount).toFixed(2);
    }

    <%--document.getElementById("<%=TxtAmt1.ClientID%>").value = txtT1.toFixed(2);
        document.getElementById("<%=TxtAmt2.ClientID%>").value = txtT2.toFixed(2);
        document.getElementById("<%=TxtAmt3.ClientID%>").value = txtT3.toFixed(2);--%>
    <%--var discount = parseFloat(document.getElementById("<%=LblDiscount.ClientID%>").innerHTML);--%>
    //var discountvalue = (parseFloat(txtQt1) * discount).toFixed(2);

    // var totalvalue;
    // var totalamountdiscount = document.getElementById("<%=total.ClientID%>").value;
    //alert(totalamountdiscount);



    var totalvalue = Max - discountvalue;
    if (totalvalue >= 200000) {
        totalvalue = Max;
        document.getElementById("lbldiscount1").style.display = 'none';
        document.getElementById("lbldiscount2").style.display = 'none';
        document.getElementById("lbldiscount3").style.display = 'none';
    }
    else {

        //alert('lesser than 200000');

        totalvalue = Max - discountvalue;
        document.getElementById("lbldiscount1").style.display = 'block';
        document.getElementById("lbldiscount2").style.display = 'block';
        document.getElementById("lbldiscount3").style.display = 'block';
    }





    if (parseFloat(totalvalue) < 0) {
        totalvalue = 0;
    }
    var bid1total;
    var bid2total;
    var bid3total;
    //total amount substraction of discount
    //bid1total = txtT1 - discountvalue;
    //bid2total = txtT2 - discountvalue;
    //bid3total = txtT3 - discountvalue;
    //alert(bid1total);
    bid1total = txtT1 ;
    bid2total = txtT2 ;
    bid3total = txtT3 ;
    document.getElementById("<%=bidamount1.ClientID%>").innerHTML = isNaN(bid1total) ? "₹ " + 0 : "₹ " + bid1total.toFixed(2);
    document.getElementById("<%=bidamount2.ClientID%>").innerHTML = isNaN(bid2total) ? "₹ " + 0 : "₹ " + bid2total.toFixed(2);
    document.getElementById("<%=bidamount3.ClientID%>").innerHTML = isNaN(bid3total) ? "₹ " + 0 : "₹ " + bid3total.toFixed(2);
    document.getElementById("<%=total.ClientID%>").innerHTML = isNaN(totalvalue) ? "₹ " + 0 : "₹ " + totalvalue.toFixed(2);
    // alert(totalvalue);

}

function chk(id) {

    //debugger;
    // alert(id);
    var MaxP = parseFloat($("#maxprice").val());
    //var MinP = parseFloat($("#maxprice").val());
    var minq = parseFloat($("#minqty").val());


    <%--if (document.getElementById('<%=cutoff1.ClientID%>').checked = true) {

        document.getElementById('<%=cutoff1.ClientID%>').unchecked = false
    }--%>
    if (document.getElementById(id).checked == true && id == '<%=cutoff1.ClientID%>') {
        document.getElementById("<%=price1.ClientID%>").value = MaxP;
        document.getElementById("<%=price1.ClientID%>").readOnly = true;
       <%-- document.getElementById('<%=cutoff1.ClientID%>').checked = false;
        alert("false")--%>
        var txtQt1 = document.getElementById("<%=lot1.ClientID%>").value;

        if (txtQt1 == '') {
            // alert("empty")
            // document.getElementById("checkbox").checked = false;
            txtQt1 = minq;
            document.getElementById("<%=lot1.ClientID%>").value = "1";


        }
        document.getElementById('<%=cutoff1.ClientID%>').checked = true;
        var txtT1 = parseFloat(MaxP) * parseFloat(txtQt1);
          document.getElementById("<%=bidamount1.ClientID%>").value = txtT1.toFixed(2);
      <%--  document.getElementById("<%=total.ClientID%>").value = txtT1.toFixed(2);--%>

        //disable2();
        //disable3();
        closebid2();
        closebid3();
        $("#addbtn").hide();

        //$('#apply').on('hidden.bs.modal', function () {
        //    $(this).find('form').trigger('reset');
        //    alert('hi')
        //})
    }

    else if (document.getElementById(id).checked == true && id == '<%=cutoff2.ClientID%>') {
        document.getElementById("<%=price1.ClientID%>").value = MaxP;
        document.getElementById("<%=price1.ClientID%>").readOnly = true;
        var txtQt2 = document.getElementById("<%=lot2.ClientID%>").value;
        if (txtQt2 == '') {
            txtQt2 = minq;
            document.getElementById("<%=lot2.ClientID%>").value = "1";

        }
        document.getElementById("<%=lot2.ClientID%>").value = txtQt2;

        var txtT2 = parseFloat(MaxP) * parseFloat(txtQt2);
          document.getElementById("<%=bidamount2.ClientID%>").value = txtT2.toFixed(2);
      <%--  document.getElementById("<%=total.ClientID%>").value = txtT2.toFixed(2);--%>
        document.getElementById('<%=cutoff1.ClientID%>').checked = true;

        closebid2();
        closebid3();
        $("#addbtn").hide();

    }
    else if (document.getElementById(id).checked == true && id == '<%=cutoff3.ClientID%>') {
        document.getElementById("<%=price1.ClientID%>").value = MaxP;
        document.getElementById("<%=price1.ClientID%>").readOnly = true;
        var txtQt3 = document.getElementById("<%=lot2.ClientID%>").value;
        if (txtQt3 == '') {
            txtQt3 = minq;
            document.getElementById("<%=lot1.ClientID%>").value = minq;
        }

        document.getElementById("<%=lot1.ClientID%>").value = txtQt3;

        var txtT3 = parseFloat(MaxP) * parseFloat(txtQt3);
        <%--   document.getElementById("<%=total.ClientID%>").value = txtT3.toFixed(2);--%>
        document.getElementById("<%=bidamount3.ClientID%>").value = txtT3.toFixed(2);
        document.getElementById('<%=cutoff1.ClientID%>').checked = true;

        closebid2();
        closebid3();
        $("#addbtn").hide();

    }
    else {
        $("#addbtn").show();

        closebid2();
        closebid3();
        document.getElementById("<%=price1.ClientID%>").readOnly = false;
        document.getElementById("<%=price1.ClientID%>").value = "";

        document.getElementById('<%=cutoff1.ClientID%>').checked = false;

    }
    CalculateAll();
}

        //function userdetailsvalidation() {
        //    let text = "confirm.";
        //    if (confirm == text) {

        //        return true;
        //    } else {

        //        return false;
        //    }
        //}



function submitalldata() {
    //debugger;

     var UPIID = document.getElementById("<%=txtupiid.ClientID%>").value;
             document.getElementById("clupi").innerText = UPIID;
    $("#categoryhdn").val(document.getElementById("category_drp").value);
    //alert('submit');
    var validateamount = document.getElementById("<%=total.ClientID%>").innerHTML;

    var skillsSelect = document.getElementById("category_drp");
    var selectedText = skillsSelect.options[skillsSelect.selectedIndex].text;
    var abc = parseFloat(document.getElementById("total").innerText.replace("₹", ""));
    if (selectedText == "HNI") {

        //alert(abc);
        if (abc < 200000) {
            alertify.alert('minimum application amount to be 2 lakhs');
            return false;
        }
    }
   // alert("hni cross");

    var BidQ1 = document.getElementById("<%=lot1.ClientID%>").value;
    var BidQ2 = document.getElementById("<%=lot2.ClientID%>").value;
    var BidQ3 = document.getElementById("<%=lot3.ClientID%>").value;
    var BidP1 = document.getElementById("<%=price1.ClientID%>").value;
    var BidP2 = document.getElementById("<%=price2.ClientID%>").value;
    var BidP3 = document.getElementById("<%=price3.ClientID%>").value;


    var match = /^\w+@\w+$/;
    //var MBidQty = parseFloat(document.getElementById("<%=minqty.ClientID%>").innerHTML;
   //alert(MBidQty);
    var UPIID = document.getElementById("<%=txtupiid.ClientID%>").value;
    var upinewid = document.getElementById("<%=txtupiid.ClientID%>").value;
    //alert(UPIID.trim());

    if (UPIID.trim() == "") {
        //debugger;
        alertify.alert("Please enter the VPA");
        document.getElementById("<%=txtupiid.ClientID%>").focus();
        // document.getElementById("<%=txtupiid.ClientID%>").value = ""; 
        return false;
    }
 
      if ((BidQ1 == "" || BidP1 == "")) {
          alertify.alert("Please enter quantity and price of the Bid 1 ");
        return false;
    }
      if (document.getElementById("bidhead2").style.display != "none") {
        if ((BidQ2 == "" ) || (BidP2 == "")) {
            alertify.alert("Please enter quantity and price of the Bid 2 ");
            return false;
        }
    }
      if (document.getElementById("bidhead3").style.display != "none") {
        if ((BidQ3 == "" || BidP3 == "")) {
            alertify.alert("Please enter quantity and price of the Bid 3 ");
            return false;
        }
    }
  if (document.getElementById("<%=total.ClientID%>").value == "") {
      alertify.alert("Total Amount Payable Should not be empty");
        return false;
    }
   

    
           
            if (validateamount.replace("₹", "") >= 200000) {
            //let text = "Total Amount Greaterthan 2 lakhs Could not be Cancelled.";
            //if (confirm(text)) {
            //    offline();
            //    return true;
            //}
            //else {

            //    return false;
                //}

                twolakamountconfbx();
                return true;
        }
        else
            {
                 
                offline();
                return false;
        }
  
}



        function twolakamountconfbx() {
            debugger;
            alertify.alert("Total Amount Greaterthan 2 lakhs Could not be Cancelled.",
                  function(e){
                      if(e){
                          offline();
                         // return true;
                          //$('#conformModalpopup').modal('show');
                      } else {
                          //return false;
                          //$('#conformModalpopup').modal('hide');
                      }
                  });
        }



<%--        function offline() {
              var UPIID = document.getElementById("<%=txtupiid.ClientID%>").value;
         if (validateoffline()) {
            var msgalert = document.getElementById("<%=offlinemessage.ClientID%>").value;
            if (document.getElementById("<%=offtrigger.ClientID%>").value == "Y") {
                if (confirm("On Clicking OK button," + msgalert)) {
                    document.getElementById("clupi").innerText = UPIID;
                    $('#conformModalpopup').modal('show');

                    return true;
                    
                }
                else {
                    return false;
                }
            }
            else {
                alertify.alert('Sorry! Your bid could not be placed because market is not open.');
                return false;
            }
        }
         else {
            document.getElementById("clupi").innerText = UPIID;
            $('#conformModalpopup').modal('show');
           
            return true;
          
        }
        }--%>



         function offline() {

             debugger;
             if (validateoffline()) {
                 var msgalert = document.getElementById("<%=offlinemessage.ClientID%>").value;
                 if (document.getElementById("<%=offtrigger.ClientID%>").value == "Y") {
                     alertify.confirm("On Clicking OK button," + msgalert,
                       function (e) {
                           debugger;
                           if(e){
                               $('#conformModalpopup').modal('show');
                           } else {
                               $('#conformModalpopup').modal('hide');
                           }
                       });

                 //if (confirm("On Clicking OK button," + msgalert)) {
                 //    document.getElementById("clupi").innerText = UPIID;
                 //    $('#conformModalpopup').modal('show');

                 //    return true;

                 //}
                 //else {
                 //    return false;
                 //}

                 }
                 else {
                     alertify.alert('Sorry! Your bid could not be placed because market is not open.');
                     return false;
                 }

            }
            else {

               
                $('#conformModalpopup').modal('show');
                return true;

            }
        }























        function validateoffline() {
            //debugger;
            //return false;
            var now = new Date();

            var timest = $("#issuefromtimehdn").val();
            var timeet = $("#issuetotimehdn").val();
            var st = (now.getMonth() + 1) + "/" + now.getDate() + "/" + now.getFullYear() + " " + timest;
            var et = (now.getMonth() + 1) + "/" + now.getDate() + "/" + now.getFullYear() + " " + timeet;
            var finalst = new Date(st);
            var finalet = new Date(et);

            var curdate = new Date().toDateString();

            var sd = new Date($("#issuefromdatehdn").val()).toDateString();
            var ed = new Date($("#issuetodatehdn").val()).toDateString();
            if (new Date(curdate) < new Date(sd)) {
                return true;
            }
            else if (new Date(curdate) >= new Date(sd) && new Date(curdate) <= new Date(ed)) {
                if (curdate == ed) {
                    //if (new Date(curdate) == new Date(ed)) {
                    if (now < finalst) {
                        return true;
                    }
                    else if (now > finalet) {
                        return false;
                    }

                }
                    //else if (Convert.ToDateTime(DateTime.Now.ToString("hh:mm tt")) < Convert.ToDateTime(LblST.Text) || Convert.ToDateTime(DateTime.Now.ToString("hh:mm tt")) > Convert.ToDateTime(LblET.Text))
                else if (now < finalst || now > finalet) {
                    return true;
                }
                else {

                    return false;
                }

            }


        }
        function testcalculate(ap1, lp1) {
            if (ap1 != "" && lp1 != "") {
                var t = ((parseFloat(lp1) - parseFloat(ap1)) / parseFloat(lp1)) * 100.0;
                return t;
            }
            else {
                return "";
            }
        }


        (function ($) {
            $.fn.inputFilter = function (inputFilter) {
                return this.on("input keydown keyup mousedown mouseup select contextmenu drop", function () {
                    if (inputFilter(this.value)) {
                        this.oldValue = this.value;
                        this.oldSelectionStart = this.selectionStart;
                        this.oldSelectionEnd = this.selectionEnd;
                    } else if (this.hasOwnProperty("oldValue")) {
                        this.value = this.oldValue;
                        this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
                    }
                });
            };
        }(jQuery));

        //$(document).ready(function () {
        //    $("#apply").on('hide.bs.modal', function () {
        //        $('.custom-control-input').prop('checked', false);
        //    });
        //});

        //    //    //$('#total').prop('value', '0');
        //    //   //document.getElementById('total').display.style =none;
        //    //   //alert('unable')
        //       

        //    //$("#apply").on('dialogclose', function (event) {
        //    //    $("#total").val($('.bid-content-4').val())
        //    //    $('.bid-content-4').val('');
        //    //});

        //});
        //$(document).ready(function () {
        //    $('#apply').on('hidden.bs.modal', function () {
        //        $(this).find('form').trigger('reset');
        //        //alert('sucess')
        //    })

        //});

        $(".ValidateNumeric").inputFilter(function (value) {
            return /^[0-9\.]*$/.test(value);
        });
    </script>
    <script>
        //function returnAndClose() {
        //    document.getElementById("apply").value = "";
        //}


        //window.onunload = refreshParent;
        //function refreshParent() {
        //    window.opener.location.reload();
        //}
        //window.onunload = function () {
        //    window.opener.location.reload();
        //};
        //function returnAndClose() {
        //    $('#apply').on('hidden.bs.modal', function () {
        //        $(this).find('form').trigger('reset');
        //    })
        //}
    </script>
    <script>
        //        function returnAndClose() {

        //var value = document.getElementById("total").value;

        //window.opener.setValueAndClear(value);

        //window.close();
        //alert('abc')
        //}



    </script>



</body>
</html>
